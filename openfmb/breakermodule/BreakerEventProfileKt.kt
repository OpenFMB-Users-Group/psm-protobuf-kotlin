// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: breakermodule/breakermodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.breakermodule;

@kotlin.jvm.JvmName("-initializebreakerEventProfile")
public inline fun breakerEventProfile(block: openfmb.breakermodule.BreakerEventProfileKt.Dsl.() -> kotlin.Unit): openfmb.breakermodule.BreakerEventProfile =
  openfmb.breakermodule.BreakerEventProfileKt.Dsl._create(openfmb.breakermodule.BreakerEventProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Breaker event profile
 * ```
 *
 * Protobuf type `breakermodule.BreakerEventProfile`
 */
public object BreakerEventProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.breakermodule.BreakerEventProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.breakermodule.BreakerEventProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.breakermodule.BreakerEventProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var eventMessageInfo: openfmb.commonmodule.EventMessageInfo
      @kotlin.jvm.JvmName("getEventMessageInfo")
        get() = _builder.eventMessageInfo
      @kotlin.jvm.JvmName("setEventMessageInfo")
        set(value) {
        _builder.eventMessageInfo = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearEventMessageInfo() {
      _builder.clearEventMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the eventMessageInfo field is set.
     */
    public fun hasEventMessageInfo(): kotlin.Boolean {
      return _builder.hasEventMessageInfo()
    }

    public val BreakerEventProfileKt.Dsl.eventMessageInfoOrNull: openfmb.commonmodule.EventMessageInfo?
      get() = _builder.eventMessageInfoOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.breakermodule.Breaker breaker = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var breaker: openfmb.breakermodule.Breaker
      @kotlin.jvm.JvmName("getBreaker")
        get() = _builder.breaker
      @kotlin.jvm.JvmName("setBreaker")
        set(value) {
        _builder.breaker = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.breakermodule.Breaker breaker = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearBreaker() {
      _builder.clearBreaker()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.breakermodule.Breaker breaker = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the breaker field is set.
     */
    public fun hasBreaker(): kotlin.Boolean {
      return _builder.hasBreaker()
    }

    public val BreakerEventProfileKt.Dsl.breakerOrNull: openfmb.breakermodule.Breaker?
      get() = _builder.breakerOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.breakermodule.BreakerEvent breakerEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var breakerEvent: openfmb.breakermodule.BreakerEvent
      @kotlin.jvm.JvmName("getBreakerEvent")
        get() = _builder.breakerEvent
      @kotlin.jvm.JvmName("setBreakerEvent")
        set(value) {
        _builder.breakerEvent = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.breakermodule.BreakerEvent breakerEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearBreakerEvent() {
      _builder.clearBreakerEvent()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.breakermodule.BreakerEvent breakerEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the breakerEvent field is set.
     */
    public fun hasBreakerEvent(): kotlin.Boolean {
      return _builder.hasBreakerEvent()
    }

    public val BreakerEventProfileKt.Dsl.breakerEventOrNull: openfmb.breakermodule.BreakerEvent?
      get() = _builder.breakerEventOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.breakermodule.BreakerEventProfile.copy(block: `openfmb.breakermodule`.BreakerEventProfileKt.Dsl.() -> kotlin.Unit): openfmb.breakermodule.BreakerEventProfile =
  `openfmb.breakermodule`.BreakerEventProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.breakermodule.BreakerEventProfileOrBuilder.eventMessageInfoOrNull: openfmb.commonmodule.EventMessageInfo?
  get() = if (hasEventMessageInfo()) getEventMessageInfo() else null

public val openfmb.breakermodule.BreakerEventProfileOrBuilder.breakerOrNull: openfmb.breakermodule.Breaker?
  get() = if (hasBreaker()) getBreaker() else null

public val openfmb.breakermodule.BreakerEventProfileOrBuilder.breakerEventOrNull: openfmb.breakermodule.BreakerEvent?
  get() = if (hasBreakerEvent()) getBreakerEvent() else null

