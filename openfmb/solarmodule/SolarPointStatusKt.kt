//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: solarmodule/solarmodule.proto

package openfmb.solarmodule;

@kotlin.jvm.JvmName("-initializesolarPointStatus")
public inline fun solarPointStatus(block: openfmb.solarmodule.SolarPointStatusKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarPointStatus =
  openfmb.solarmodule.SolarPointStatusKt.Dsl._create(openfmb.solarmodule.SolarPointStatus.newBuilder()).apply { block() }._build()
public object SolarPointStatusKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.solarmodule.SolarPointStatus.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.solarmodule.SolarPointStatus.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.solarmodule.SolarPointStatus = _builder.build()

    /**
     * <pre>
     * Enable frequency set point
     * </pre>
     *
     * <code>.commonmodule.StatusSPS frequencySetPointEnabled = 1;</code>
     */
    public var frequencySetPointEnabled: openfmb.commonmodule.StatusSPS
      @JvmName("getFrequencySetPointEnabled")
      get() = _builder.getFrequencySetPointEnabled()
      @JvmName("setFrequencySetPointEnabled")
      set(value) {
        _builder.setFrequencySetPointEnabled(value)
      }
    /**
     * <pre>
     * Enable frequency set point
     * </pre>
     *
     * <code>.commonmodule.StatusSPS frequencySetPointEnabled = 1;</code>
     */
    public fun clearFrequencySetPointEnabled() {
      _builder.clearFrequencySetPointEnabled()
    }
    /**
     * <pre>
     * Enable frequency set point
     * </pre>
     *
     * <code>.commonmodule.StatusSPS frequencySetPointEnabled = 1;</code>
     * @return Whether the frequencySetPointEnabled field is set.
     */
    public fun hasFrequencySetPointEnabled(): kotlin.Boolean {
      return _builder.hasFrequencySetPointEnabled()
    }

    /**
     * <pre>
     * Grid connect mode
     * </pre>
     *
     * <code>.commonmodule.ENG_GridConnectModeKind mode = 2;</code>
     */
    public var mode: openfmb.commonmodule.ENG_GridConnectModeKind
      @JvmName("getMode")
      get() = _builder.getMode()
      @JvmName("setMode")
      set(value) {
        _builder.setMode(value)
      }
    /**
     * <pre>
     * Grid connect mode
     * </pre>
     *
     * <code>.commonmodule.ENG_GridConnectModeKind mode = 2;</code>
     */
    public fun clearMode() {
      _builder.clearMode()
    }
    /**
     * <pre>
     * Grid connect mode
     * </pre>
     *
     * <code>.commonmodule.ENG_GridConnectModeKind mode = 2;</code>
     * @return Whether the mode field is set.
     */
    public fun hasMode(): kotlin.Boolean {
      return _builder.hasMode()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.google.protobuf.FloatValue pctHzDroop = 3;</code>
     */
    public var pctHzDroop: com.google.protobuf.FloatValue
      @JvmName("getPctHzDroop")
      get() = _builder.getPctHzDroop()
      @JvmName("setPctHzDroop")
      set(value) {
        _builder.setPctHzDroop(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.google.protobuf.FloatValue pctHzDroop = 3;</code>
     */
    public fun clearPctHzDroop() {
      _builder.clearPctHzDroop()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.google.protobuf.FloatValue pctHzDroop = 3;</code>
     * @return Whether the pctHzDroop field is set.
     */
    public fun hasPctHzDroop(): kotlin.Boolean {
      return _builder.hasPctHzDroop()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.google.protobuf.FloatValue pctVDroop = 4;</code>
     */
    public var pctVDroop: com.google.protobuf.FloatValue
      @JvmName("getPctVDroop")
      get() = _builder.getPctVDroop()
      @JvmName("setPctVDroop")
      set(value) {
        _builder.setPctVDroop(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.google.protobuf.FloatValue pctVDroop = 4;</code>
     */
    public fun clearPctVDroop() {
      _builder.clearPctVDroop()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.google.protobuf.FloatValue pctVDroop = 4;</code>
     * @return Whether the pctVDroop field is set.
     */
    public fun hasPctVDroop(): kotlin.Boolean {
      return _builder.hasPctVDroop()
    }

    /**
     * <pre>
     * Ramp rates
     * </pre>
     *
     * <code>.commonmodule.RampRate rampRates = 5;</code>
     */
    public var rampRates: openfmb.commonmodule.RampRate
      @JvmName("getRampRates")
      get() = _builder.getRampRates()
      @JvmName("setRampRates")
      set(value) {
        _builder.setRampRates(value)
      }
    /**
     * <pre>
     * Ramp rates
     * </pre>
     *
     * <code>.commonmodule.RampRate rampRates = 5;</code>
     */
    public fun clearRampRates() {
      _builder.clearRampRates()
    }
    /**
     * <pre>
     * Ramp rates
     * </pre>
     *
     * <code>.commonmodule.RampRate rampRates = 5;</code>
     * @return Whether the rampRates field is set.
     */
    public fun hasRampRates(): kotlin.Boolean {
      return _builder.hasRampRates()
    }

    /**
     * <pre>
     * Enable reactive power set point
     * </pre>
     *
     * <code>.commonmodule.StatusSPS reactivePwrSetPointEnabled = 6;</code>
     */
    public var reactivePwrSetPointEnabled: openfmb.commonmodule.StatusSPS
      @JvmName("getReactivePwrSetPointEnabled")
      get() = _builder.getReactivePwrSetPointEnabled()
      @JvmName("setReactivePwrSetPointEnabled")
      set(value) {
        _builder.setReactivePwrSetPointEnabled(value)
      }
    /**
     * <pre>
     * Enable reactive power set point
     * </pre>
     *
     * <code>.commonmodule.StatusSPS reactivePwrSetPointEnabled = 6;</code>
     */
    public fun clearReactivePwrSetPointEnabled() {
      _builder.clearReactivePwrSetPointEnabled()
    }
    /**
     * <pre>
     * Enable reactive power set point
     * </pre>
     *
     * <code>.commonmodule.StatusSPS reactivePwrSetPointEnabled = 6;</code>
     * @return Whether the reactivePwrSetPointEnabled field is set.
     */
    public fun hasReactivePwrSetPointEnabled(): kotlin.Boolean {
      return _builder.hasReactivePwrSetPointEnabled()
    }

    /**
     * <pre>
     * Enable real power set point
     * </pre>
     *
     * <code>.commonmodule.StatusSPS realPwrSetPointEnabled = 7;</code>
     */
    public var realPwrSetPointEnabled: openfmb.commonmodule.StatusSPS
      @JvmName("getRealPwrSetPointEnabled")
      get() = _builder.getRealPwrSetPointEnabled()
      @JvmName("setRealPwrSetPointEnabled")
      set(value) {
        _builder.setRealPwrSetPointEnabled(value)
      }
    /**
     * <pre>
     * Enable real power set point
     * </pre>
     *
     * <code>.commonmodule.StatusSPS realPwrSetPointEnabled = 7;</code>
     */
    public fun clearRealPwrSetPointEnabled() {
      _builder.clearRealPwrSetPointEnabled()
    }
    /**
     * <pre>
     * Enable real power set point
     * </pre>
     *
     * <code>.commonmodule.StatusSPS realPwrSetPointEnabled = 7;</code>
     * @return Whether the realPwrSetPointEnabled field is set.
     */
    public fun hasRealPwrSetPointEnabled(): kotlin.Boolean {
      return _builder.hasRealPwrSetPointEnabled()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.Optional_StateKind state = 8;</code>
     */
    public var state: openfmb.commonmodule.Optional_StateKind
      @JvmName("getState")
      get() = _builder.getState()
      @JvmName("setState")
      set(value) {
        _builder.setState(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.Optional_StateKind state = 8;</code>
     */
    public fun clearState() {
      _builder.clearState()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.Optional_StateKind state = 8;</code>
     * @return Whether the state field is set.
     */
    public fun hasState(): kotlin.Boolean {
      return _builder.hasState()
    }

    /**
     * <pre>
     * Enable voltage set point
     * </pre>
     *
     * <code>.commonmodule.StatusSPS voltageSetPointEnabled = 9;</code>
     */
    public var voltageSetPointEnabled: openfmb.commonmodule.StatusSPS
      @JvmName("getVoltageSetPointEnabled")
      get() = _builder.getVoltageSetPointEnabled()
      @JvmName("setVoltageSetPointEnabled")
      set(value) {
        _builder.setVoltageSetPointEnabled(value)
      }
    /**
     * <pre>
     * Enable voltage set point
     * </pre>
     *
     * <code>.commonmodule.StatusSPS voltageSetPointEnabled = 9;</code>
     */
    public fun clearVoltageSetPointEnabled() {
      _builder.clearVoltageSetPointEnabled()
    }
    /**
     * <pre>
     * Enable voltage set point
     * </pre>
     *
     * <code>.commonmodule.StatusSPS voltageSetPointEnabled = 9;</code>
     * @return Whether the voltageSetPointEnabled field is set.
     */
    public fun hasVoltageSetPointEnabled(): kotlin.Boolean {
      return _builder.hasVoltageSetPointEnabled()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ControlSPC blackStartEnabled = 10;</code>
     */
    public var blackStartEnabled: openfmb.commonmodule.ControlSPC
      @JvmName("getBlackStartEnabled")
      get() = _builder.getBlackStartEnabled()
      @JvmName("setBlackStartEnabled")
      set(value) {
        _builder.setBlackStartEnabled(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ControlSPC blackStartEnabled = 10;</code>
     */
    public fun clearBlackStartEnabled() {
      _builder.clearBlackStartEnabled()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ControlSPC blackStartEnabled = 10;</code>
     * @return Whether the blackStartEnabled field is set.
     */
    public fun hasBlackStartEnabled(): kotlin.Boolean {
      return _builder.hasBlackStartEnabled()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.EnterServiceAPC enterServiceOperation = 11;</code>
     */
    public var enterServiceOperation: openfmb.commonmodule.EnterServiceAPC
      @JvmName("getEnterServiceOperation")
      get() = _builder.getEnterServiceOperation()
      @JvmName("setEnterServiceOperation")
      set(value) {
        _builder.setEnterServiceOperation(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.EnterServiceAPC enterServiceOperation = 11;</code>
     */
    public fun clearEnterServiceOperation() {
      _builder.clearEnterServiceOperation()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.EnterServiceAPC enterServiceOperation = 11;</code>
     * @return Whether the enterServiceOperation field is set.
     */
    public fun hasEnterServiceOperation(): kotlin.Boolean {
      return _builder.hasEnterServiceOperation()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.HzWPoint hzWOperation = 12;</code>
     */
    public var hzWOperation: openfmb.commonmodule.HzWPoint
      @JvmName("getHzWOperation")
      get() = _builder.getHzWOperation()
      @JvmName("setHzWOperation")
      set(value) {
        _builder.setHzWOperation(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.HzWPoint hzWOperation = 12;</code>
     */
    public fun clearHzWOperation() {
      _builder.clearHzWOperation()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.HzWPoint hzWOperation = 12;</code>
     * @return Whether the hzWOperation field is set.
     */
    public fun hasHzWOperation(): kotlin.Boolean {
      return _builder.hasHzWOperation()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.LimitWAPC limitWOperation = 13;</code>
     */
    public var limitWOperation: openfmb.commonmodule.LimitWAPC
      @JvmName("getLimitWOperation")
      get() = _builder.getLimitWOperation()
      @JvmName("setLimitWOperation")
      set(value) {
        _builder.setLimitWOperation(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.LimitWAPC limitWOperation = 13;</code>
     */
    public fun clearLimitWOperation() {
      _builder.clearLimitWOperation()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.LimitWAPC limitWOperation = 13;</code>
     * @return Whether the limitWOperation field is set.
     */
    public fun hasLimitWOperation(): kotlin.Boolean {
      return _builder.hasLimitWOperation()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.PFSPC pFOperation = 14;</code>
     */
    public var pFOperation: openfmb.commonmodule.PFSPC
      @JvmName("getPFOperation")
      get() = _builder.getPFOperation()
      @JvmName("setPFOperation")
      set(value) {
        _builder.setPFOperation(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.PFSPC pFOperation = 14;</code>
     */
    public fun clearPFOperation() {
      _builder.clearPFOperation()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.PFSPC pFOperation = 14;</code>
     * @return Whether the pFOperation field is set.
     */
    public fun hasPFOperation(): kotlin.Boolean {
      return _builder.hasPFOperation()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ControlSPC syncBackToGrid = 15;</code>
     */
    public var syncBackToGrid: openfmb.commonmodule.ControlSPC
      @JvmName("getSyncBackToGrid")
      get() = _builder.getSyncBackToGrid()
      @JvmName("setSyncBackToGrid")
      set(value) {
        _builder.setSyncBackToGrid(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ControlSPC syncBackToGrid = 15;</code>
     */
    public fun clearSyncBackToGrid() {
      _builder.clearSyncBackToGrid()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ControlSPC syncBackToGrid = 15;</code>
     * @return Whether the syncBackToGrid field is set.
     */
    public fun hasSyncBackToGrid(): kotlin.Boolean {
      return _builder.hasSyncBackToGrid()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.TmHzCSG tmHzTripOperation = 16;</code>
     */
    public var tmHzTripOperation: openfmb.commonmodule.TmHzCSG
      @JvmName("getTmHzTripOperation")
      get() = _builder.getTmHzTripOperation()
      @JvmName("setTmHzTripOperation")
      set(value) {
        _builder.setTmHzTripOperation(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.TmHzCSG tmHzTripOperation = 16;</code>
     */
    public fun clearTmHzTripOperation() {
      _builder.clearTmHzTripOperation()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.TmHzCSG tmHzTripOperation = 16;</code>
     * @return Whether the tmHzTripOperation field is set.
     */
    public fun hasTmHzTripOperation(): kotlin.Boolean {
      return _builder.hasTmHzTripOperation()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.TmVoltCSG tmVoltTripOperation = 17;</code>
     */
    public var tmVoltTripOperation: openfmb.commonmodule.TmVoltCSG
      @JvmName("getTmVoltTripOperation")
      get() = _builder.getTmVoltTripOperation()
      @JvmName("setTmVoltTripOperation")
      set(value) {
        _builder.setTmVoltTripOperation(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.TmVoltCSG tmVoltTripOperation = 17;</code>
     */
    public fun clearTmVoltTripOperation() {
      _builder.clearTmVoltTripOperation()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.TmVoltCSG tmVoltTripOperation = 17;</code>
     * @return Whether the tmVoltTripOperation field is set.
     */
    public fun hasTmVoltTripOperation(): kotlin.Boolean {
      return _builder.hasTmVoltTripOperation()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.VarSPC vArOperation = 18;</code>
     */
    public var vArOperation: openfmb.commonmodule.VarSPC
      @JvmName("getVArOperation")
      get() = _builder.getVArOperation()
      @JvmName("setVArOperation")
      set(value) {
        _builder.setVArOperation(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.VarSPC vArOperation = 18;</code>
     */
    public fun clearVArOperation() {
      _builder.clearVArOperation()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.VarSPC vArOperation = 18;</code>
     * @return Whether the vArOperation field is set.
     */
    public fun hasVArOperation(): kotlin.Boolean {
      return _builder.hasVArOperation()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.VoltVarCSG voltVarOperation = 19;</code>
     */
    public var voltVarOperation: openfmb.commonmodule.VoltVarCSG
      @JvmName("getVoltVarOperation")
      get() = _builder.getVoltVarOperation()
      @JvmName("setVoltVarOperation")
      set(value) {
        _builder.setVoltVarOperation(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.VoltVarCSG voltVarOperation = 19;</code>
     */
    public fun clearVoltVarOperation() {
      _builder.clearVoltVarOperation()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.VoltVarCSG voltVarOperation = 19;</code>
     * @return Whether the voltVarOperation field is set.
     */
    public fun hasVoltVarOperation(): kotlin.Boolean {
      return _builder.hasVoltVarOperation()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.VoltWCSG voltWOperation = 20;</code>
     */
    public var voltWOperation: openfmb.commonmodule.VoltWCSG
      @JvmName("getVoltWOperation")
      get() = _builder.getVoltWOperation()
      @JvmName("setVoltWOperation")
      set(value) {
        _builder.setVoltWOperation(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.VoltWCSG voltWOperation = 20;</code>
     */
    public fun clearVoltWOperation() {
      _builder.clearVoltWOperation()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.VoltWCSG voltWOperation = 20;</code>
     * @return Whether the voltWOperation field is set.
     */
    public fun hasVoltWOperation(): kotlin.Boolean {
      return _builder.hasVoltWOperation()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.WVarCSG wVarOperation = 21;</code>
     */
    public var wVarOperation: openfmb.commonmodule.WVarCSG
      @JvmName("getWVarOperation")
      get() = _builder.getWVarOperation()
      @JvmName("setWVarOperation")
      set(value) {
        _builder.setWVarOperation(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.WVarCSG wVarOperation = 21;</code>
     */
    public fun clearWVarOperation() {
      _builder.clearWVarOperation()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.WVarCSG wVarOperation = 21;</code>
     * @return Whether the wVarOperation field is set.
     */
    public fun hasWVarOperation(): kotlin.Boolean {
      return _builder.hasWVarOperation()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.solarmodule.SolarPointStatus.copy(block: openfmb.solarmodule.SolarPointStatusKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarPointStatus =
  openfmb.solarmodule.SolarPointStatusKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.solarmodule.SolarPointStatusOrBuilder.frequencySetPointEnabledOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasFrequencySetPointEnabled()) getFrequencySetPointEnabled() else null

public val openfmb.solarmodule.SolarPointStatusOrBuilder.modeOrNull: openfmb.commonmodule.ENG_GridConnectModeKind?
  get() = if (hasMode()) getMode() else null

public val openfmb.solarmodule.SolarPointStatusOrBuilder.pctHzDroopOrNull: com.google.protobuf.FloatValue?
  get() = if (hasPctHzDroop()) getPctHzDroop() else null

public val openfmb.solarmodule.SolarPointStatusOrBuilder.pctVDroopOrNull: com.google.protobuf.FloatValue?
  get() = if (hasPctVDroop()) getPctVDroop() else null

public val openfmb.solarmodule.SolarPointStatusOrBuilder.rampRatesOrNull: openfmb.commonmodule.RampRate?
  get() = if (hasRampRates()) getRampRates() else null

public val openfmb.solarmodule.SolarPointStatusOrBuilder.reactivePwrSetPointEnabledOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasReactivePwrSetPointEnabled()) getReactivePwrSetPointEnabled() else null

public val openfmb.solarmodule.SolarPointStatusOrBuilder.realPwrSetPointEnabledOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasRealPwrSetPointEnabled()) getRealPwrSetPointEnabled() else null

public val openfmb.solarmodule.SolarPointStatusOrBuilder.stateOrNull: openfmb.commonmodule.Optional_StateKind?
  get() = if (hasState()) getState() else null

public val openfmb.solarmodule.SolarPointStatusOrBuilder.voltageSetPointEnabledOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasVoltageSetPointEnabled()) getVoltageSetPointEnabled() else null

public val openfmb.solarmodule.SolarPointStatusOrBuilder.blackStartEnabledOrNull: openfmb.commonmodule.ControlSPC?
  get() = if (hasBlackStartEnabled()) getBlackStartEnabled() else null

public val openfmb.solarmodule.SolarPointStatusOrBuilder.enterServiceOperationOrNull: openfmb.commonmodule.EnterServiceAPC?
  get() = if (hasEnterServiceOperation()) getEnterServiceOperation() else null

public val openfmb.solarmodule.SolarPointStatusOrBuilder.hzWOperationOrNull: openfmb.commonmodule.HzWPoint?
  get() = if (hasHzWOperation()) getHzWOperation() else null

public val openfmb.solarmodule.SolarPointStatusOrBuilder.limitWOperationOrNull: openfmb.commonmodule.LimitWAPC?
  get() = if (hasLimitWOperation()) getLimitWOperation() else null

public val openfmb.solarmodule.SolarPointStatusOrBuilder.pFOperationOrNull: openfmb.commonmodule.PFSPC?
  get() = if (hasPFOperation()) getPFOperation() else null

public val openfmb.solarmodule.SolarPointStatusOrBuilder.syncBackToGridOrNull: openfmb.commonmodule.ControlSPC?
  get() = if (hasSyncBackToGrid()) getSyncBackToGrid() else null

public val openfmb.solarmodule.SolarPointStatusOrBuilder.tmHzTripOperationOrNull: openfmb.commonmodule.TmHzCSG?
  get() = if (hasTmHzTripOperation()) getTmHzTripOperation() else null

public val openfmb.solarmodule.SolarPointStatusOrBuilder.tmVoltTripOperationOrNull: openfmb.commonmodule.TmVoltCSG?
  get() = if (hasTmVoltTripOperation()) getTmVoltTripOperation() else null

public val openfmb.solarmodule.SolarPointStatusOrBuilder.vArOperationOrNull: openfmb.commonmodule.VarSPC?
  get() = if (hasVArOperation()) getVArOperation() else null

public val openfmb.solarmodule.SolarPointStatusOrBuilder.voltVarOperationOrNull: openfmb.commonmodule.VoltVarCSG?
  get() = if (hasVoltVarOperation()) getVoltVarOperation() else null

public val openfmb.solarmodule.SolarPointStatusOrBuilder.voltWOperationOrNull: openfmb.commonmodule.VoltWCSG?
  get() = if (hasVoltWOperation()) getVoltWOperation() else null

public val openfmb.solarmodule.SolarPointStatusOrBuilder.wVarOperationOrNull: openfmb.commonmodule.WVarCSG?
  get() = if (hasWVarOperation()) getWVarOperation() else null

