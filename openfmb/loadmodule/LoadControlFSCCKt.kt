// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: loadmodule/loadmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.loadmodule;

@kotlin.jvm.JvmName("-initializeloadControlFSCC")
public inline fun loadControlFSCC(block: openfmb.loadmodule.LoadControlFSCCKt.Dsl.() -> kotlin.Unit): openfmb.loadmodule.LoadControlFSCC =
  openfmb.loadmodule.LoadControlFSCCKt.Dsl._create(openfmb.loadmodule.LoadControlFSCC.newBuilder()).apply { block() }._build()
/**
 * ```
 * Specialized FSCC 61850 class.  LN: Schedule controller   Name: FSCC
 * ```
 *
 * Protobuf type `loadmodule.LoadControlFSCC`
 */
public object LoadControlFSCCKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.loadmodule.LoadControlFSCC.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.loadmodule.LoadControlFSCC.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.loadmodule.LoadControlFSCC = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];`
     */
    public var controlFSCC: openfmb.commonmodule.ControlFSCC
      @JvmName("getControlFSCC")
      get() = _builder.getControlFSCC()
      @JvmName("setControlFSCC")
      set(value) {
        _builder.setControlFSCC(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearControlFSCC() {
      _builder.clearControlFSCC()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the controlFSCC field is set.
     */
    public fun hasControlFSCC(): kotlin.Boolean {
      return _builder.hasControlFSCC()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.loadmodule.LoadControlScheduleFSCH loadControlScheduleFSCH = 2;`
     */
    public var loadControlScheduleFSCH: openfmb.loadmodule.LoadControlScheduleFSCH
      @JvmName("getLoadControlScheduleFSCH")
      get() = _builder.getLoadControlScheduleFSCH()
      @JvmName("setLoadControlScheduleFSCH")
      set(value) {
        _builder.setLoadControlScheduleFSCH(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.loadmodule.LoadControlScheduleFSCH loadControlScheduleFSCH = 2;`
     */
    public fun clearLoadControlScheduleFSCH() {
      _builder.clearLoadControlScheduleFSCH()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.loadmodule.LoadControlScheduleFSCH loadControlScheduleFSCH = 2;`
     * @return Whether the loadControlScheduleFSCH field is set.
     */
    public fun hasLoadControlScheduleFSCH(): kotlin.Boolean {
      return _builder.hasLoadControlScheduleFSCH()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun openfmb.loadmodule.LoadControlFSCC.copy(block: openfmb.loadmodule.LoadControlFSCCKt.Dsl.() -> kotlin.Unit): openfmb.loadmodule.LoadControlFSCC =
  openfmb.loadmodule.LoadControlFSCCKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.loadmodule.LoadControlFSCCOrBuilder.controlFSCCOrNull: openfmb.commonmodule.ControlFSCC?
  get() = if (hasControlFSCC()) getControlFSCC() else null

public val openfmb.loadmodule.LoadControlFSCCOrBuilder.loadControlScheduleFSCHOrNull: openfmb.loadmodule.LoadControlScheduleFSCH?
  get() = if (hasLoadControlScheduleFSCH()) getLoadControlScheduleFSCH() else null

