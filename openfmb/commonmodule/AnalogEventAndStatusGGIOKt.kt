// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializeanalogEventAndStatusGGIO")
public inline fun analogEventAndStatusGGIO(block: openfmb.commonmodule.AnalogEventAndStatusGGIOKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.AnalogEventAndStatusGGIO =
  openfmb.commonmodule.AnalogEventAndStatusGGIOKt.Dsl._create(openfmb.commonmodule.AnalogEventAndStatusGGIO.newBuilder()).apply { block() }._build()
/**
 * ```
 * LN: Generic process I/O   Name: GGIO
 * ```
 *
 * Protobuf type `commonmodule.AnalogEventAndStatusGGIO`
 */
public object AnalogEventAndStatusGGIOKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.AnalogEventAndStatusGGIO.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.AnalogEventAndStatusGGIO.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.AnalogEventAndStatusGGIO = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public var logicalNode: openfmb.commonmodule.LogicalNode
      @JvmName("getLogicalNode")
      get() = _builder.getLogicalNode()
      @JvmName("setLogicalNode")
      set(value) {
        _builder.setLogicalNode(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearLogicalNode() {
      _builder.clearLogicalNode()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the logicalNode field is set.
     */
    public fun hasLogicalNode(): kotlin.Boolean {
      return _builder.hasLogicalNode()
    }

    /**
     * ```
     * Generic analogue input <i>n</i>.
     * ```
     *
     * `.commonmodule.MV AnIn = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var anIn: openfmb.commonmodule.MV
      @JvmName("getAnIn")
      get() = _builder.getAnIn()
      @JvmName("setAnIn")
      set(value) {
        _builder.setAnIn(value)
      }
    /**
     * ```
     * Generic analogue input <i>n</i>.
     * ```
     *
     * `.commonmodule.MV AnIn = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearAnIn() {
      _builder.clearAnIn()
    }
    /**
     * ```
     * Generic analogue input <i>n</i>.
     * ```
     *
     * `.commonmodule.MV AnIn = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the anIn field is set.
     */
    public fun hasAnIn(): kotlin.Boolean {
      return _builder.hasAnIn()
    }

    /**
     * ```
     * Phase code
     * ```
     *
     * `.commonmodule.Optional_PhaseCodeKind Phase = 3;`
     */
    public var phase: openfmb.commonmodule.Optional_PhaseCodeKind
      @JvmName("getPhase")
      get() = _builder.getPhase()
      @JvmName("setPhase")
      set(value) {
        _builder.setPhase(value)
      }
    /**
     * ```
     * Phase code
     * ```
     *
     * `.commonmodule.Optional_PhaseCodeKind Phase = 3;`
     */
    public fun clearPhase() {
      _builder.clearPhase()
    }
    /**
     * ```
     * Phase code
     * ```
     *
     * `.commonmodule.Optional_PhaseCodeKind Phase = 3;`
     * @return Whether the phase field is set.
     */
    public fun hasPhase(): kotlin.Boolean {
      return _builder.hasPhase()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun openfmb.commonmodule.AnalogEventAndStatusGGIO.copy(block: openfmb.commonmodule.AnalogEventAndStatusGGIOKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.AnalogEventAndStatusGGIO =
  openfmb.commonmodule.AnalogEventAndStatusGGIOKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.AnalogEventAndStatusGGIOOrBuilder.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
  get() = if (hasLogicalNode()) getLogicalNode() else null

public val openfmb.commonmodule.AnalogEventAndStatusGGIOOrBuilder.anInOrNull: openfmb.commonmodule.MV?
  get() = if (hasAnIn()) getAnIn() else null

public val openfmb.commonmodule.AnalogEventAndStatusGGIOOrBuilder.phaseOrNull: openfmb.commonmodule.Optional_PhaseCodeKind?
  get() = if (hasPhase()) getPhase() else null

