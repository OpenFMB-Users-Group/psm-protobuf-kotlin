// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: circuitsegmentservicemodule/circuitsegmentservicemodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.circuitsegmentservicemodule;

@kotlin.jvm.JvmName("-initializecircuitSegmentStatusDCSC")
public inline fun circuitSegmentStatusDCSC(block: openfmb.circuitsegmentservicemodule.CircuitSegmentStatusDCSCKt.Dsl.() -> kotlin.Unit): openfmb.circuitsegmentservicemodule.CircuitSegmentStatusDCSC =
  openfmb.circuitsegmentservicemodule.CircuitSegmentStatusDCSCKt.Dsl._create(openfmb.circuitsegmentservicemodule.CircuitSegmentStatusDCSC.newBuilder()).apply { block() }._build()
/**
 * ```
 * OpenFMB specialization for coordination service control, DCSC (Distributed Coordination Service
 * Control), following 61850 naming convention.
 * ```
 *
 * Protobuf type `circuitsegmentservicemodule.CircuitSegmentStatusDCSC`
 */
public object CircuitSegmentStatusDCSCKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.circuitsegmentservicemodule.CircuitSegmentStatusDCSC.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.circuitsegmentservicemodule.CircuitSegmentStatusDCSC.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.circuitsegmentservicemodule.CircuitSegmentStatusDCSC = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public var logicalNode: openfmb.commonmodule.LogicalNode
      @JvmName("getLogicalNode")
      get() = _builder.getLogicalNode()
      @JvmName("setLogicalNode")
      set(value) {
        _builder.setLogicalNode(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearLogicalNode() {
      _builder.clearLogicalNode()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the logicalNode field is set.
     */
    public fun hasLogicalNode(): kotlin.Boolean {
      return _builder.hasLogicalNode()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.circuitsegmentservicemodule.ENG_CircuitSegmentServiceModeKind CircuitSegmentServiceMode = 2;`
     */
    public var circuitSegmentServiceMode: openfmb.circuitsegmentservicemodule.ENG_CircuitSegmentServiceModeKind
      @JvmName("getCircuitSegmentServiceMode")
      get() = _builder.getCircuitSegmentServiceMode()
      @JvmName("setCircuitSegmentServiceMode")
      set(value) {
        _builder.setCircuitSegmentServiceMode(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.circuitsegmentservicemodule.ENG_CircuitSegmentServiceModeKind CircuitSegmentServiceMode = 2;`
     */
    public fun clearCircuitSegmentServiceMode() {
      _builder.clearCircuitSegmentServiceMode()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.circuitsegmentservicemodule.ENG_CircuitSegmentServiceModeKind CircuitSegmentServiceMode = 2;`
     * @return Whether the circuitSegmentServiceMode field is set.
     */
    public fun hasCircuitSegmentServiceMode(): kotlin.Boolean {
      return _builder.hasCircuitSegmentServiceMode()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusDPS Island = 3;`
     */
    public var island: openfmb.commonmodule.StatusDPS
      @JvmName("getIsland")
      get() = _builder.getIsland()
      @JvmName("setIsland")
      set(value) {
        _builder.setIsland(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusDPS Island = 3;`
     */
    public fun clearIsland() {
      _builder.clearIsland()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusDPS Island = 3;`
     * @return Whether the island field is set.
     */
    public fun hasIsland(): kotlin.Boolean {
      return _builder.hasIsland()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusSPS PermissibleAuto = 4;`
     */
    public var permissibleAuto: openfmb.commonmodule.StatusSPS
      @JvmName("getPermissibleAuto")
      get() = _builder.getPermissibleAuto()
      @JvmName("setPermissibleAuto")
      set(value) {
        _builder.setPermissibleAuto(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusSPS PermissibleAuto = 4;`
     */
    public fun clearPermissibleAuto() {
      _builder.clearPermissibleAuto()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusSPS PermissibleAuto = 4;`
     * @return Whether the permissibleAuto field is set.
     */
    public fun hasPermissibleAuto(): kotlin.Boolean {
      return _builder.hasPermissibleAuto()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusSPS PermissibleManual = 5;`
     */
    public var permissibleManual: openfmb.commonmodule.StatusSPS
      @JvmName("getPermissibleManual")
      get() = _builder.getPermissibleManual()
      @JvmName("setPermissibleManual")
      set(value) {
        _builder.setPermissibleManual(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusSPS PermissibleManual = 5;`
     */
    public fun clearPermissibleManual() {
      _builder.clearPermissibleManual()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusSPS PermissibleManual = 5;`
     * @return Whether the permissibleManual field is set.
     */
    public fun hasPermissibleManual(): kotlin.Boolean {
      return _builder.hasPermissibleManual()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusSPS PermissibleNetzero = 6;`
     */
    public var permissibleNetzero: openfmb.commonmodule.StatusSPS
      @JvmName("getPermissibleNetzero")
      get() = _builder.getPermissibleNetzero()
      @JvmName("setPermissibleNetzero")
      set(value) {
        _builder.setPermissibleNetzero(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusSPS PermissibleNetzero = 6;`
     */
    public fun clearPermissibleNetzero() {
      _builder.clearPermissibleNetzero()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusSPS PermissibleNetzero = 6;`
     * @return Whether the permissibleNetzero field is set.
     */
    public fun hasPermissibleNetzero(): kotlin.Boolean {
      return _builder.hasPermissibleNetzero()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusSPS PermissibleStart = 7;`
     */
    public var permissibleStart: openfmb.commonmodule.StatusSPS
      @JvmName("getPermissibleStart")
      get() = _builder.getPermissibleStart()
      @JvmName("setPermissibleStart")
      set(value) {
        _builder.setPermissibleStart(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusSPS PermissibleStart = 7;`
     */
    public fun clearPermissibleStart() {
      _builder.clearPermissibleStart()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusSPS PermissibleStart = 7;`
     * @return Whether the permissibleStart field is set.
     */
    public fun hasPermissibleStart(): kotlin.Boolean {
      return _builder.hasPermissibleStart()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusSPS PermissibleStop = 8;`
     */
    public var permissibleStop: openfmb.commonmodule.StatusSPS
      @JvmName("getPermissibleStop")
      get() = _builder.getPermissibleStop()
      @JvmName("setPermissibleStop")
      set(value) {
        _builder.setPermissibleStop(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusSPS PermissibleStop = 8;`
     */
    public fun clearPermissibleStop() {
      _builder.clearPermissibleStop()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusSPS PermissibleStop = 8;`
     * @return Whether the permissibleStop field is set.
     */
    public fun hasPermissibleStop(): kotlin.Boolean {
      return _builder.hasPermissibleStop()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.circuitsegmentservicemodule.CircuitSegmentStatusDCSC.copy(block: openfmb.circuitsegmentservicemodule.CircuitSegmentStatusDCSCKt.Dsl.() -> kotlin.Unit): openfmb.circuitsegmentservicemodule.CircuitSegmentStatusDCSC =
  openfmb.circuitsegmentservicemodule.CircuitSegmentStatusDCSCKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.circuitsegmentservicemodule.CircuitSegmentStatusDCSCOrBuilder.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
  get() = if (hasLogicalNode()) getLogicalNode() else null

public val openfmb.circuitsegmentservicemodule.CircuitSegmentStatusDCSCOrBuilder.circuitSegmentServiceModeOrNull: openfmb.circuitsegmentservicemodule.ENG_CircuitSegmentServiceModeKind?
  get() = if (hasCircuitSegmentServiceMode()) getCircuitSegmentServiceMode() else null

public val openfmb.circuitsegmentservicemodule.CircuitSegmentStatusDCSCOrBuilder.islandOrNull: openfmb.commonmodule.StatusDPS?
  get() = if (hasIsland()) getIsland() else null

public val openfmb.circuitsegmentservicemodule.CircuitSegmentStatusDCSCOrBuilder.permissibleAutoOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasPermissibleAuto()) getPermissibleAuto() else null

public val openfmb.circuitsegmentservicemodule.CircuitSegmentStatusDCSCOrBuilder.permissibleManualOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasPermissibleManual()) getPermissibleManual() else null

public val openfmb.circuitsegmentservicemodule.CircuitSegmentStatusDCSCOrBuilder.permissibleNetzeroOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasPermissibleNetzero()) getPermissibleNetzero() else null

public val openfmb.circuitsegmentservicemodule.CircuitSegmentStatusDCSCOrBuilder.permissibleStartOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasPermissibleStart()) getPermissibleStart() else null

public val openfmb.circuitsegmentservicemodule.CircuitSegmentStatusDCSCOrBuilder.permissibleStopOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasPermissibleStop()) getPermissibleStop() else null

