// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: breakermodule/breakermodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.breakermodule;

@kotlin.jvm.JvmName("-initializebreaker")
public inline fun breaker(block: openfmb.breakermodule.BreakerKt.Dsl.() -> kotlin.Unit): openfmb.breakermodule.Breaker =
  openfmb.breakermodule.BreakerKt.Dsl._create(openfmb.breakermodule.Breaker.newBuilder()).apply { block() }._build()
/**
 * ```
 * A mechanical switching device capable of making, carrying, and breaking currents under normal
 * circuit conditions and also making, carrying for a specified time, and breaking currents under
 * specified abnormal circuit conditions e.g.  those of short circuit.
 * ```
 *
 * Protobuf type `breakermodule.Breaker`
 */
public object BreakerKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.breakermodule.Breaker.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.breakermodule.Breaker.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.breakermodule.Breaker = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];`
     */
    public var conductingEquipment: openfmb.commonmodule.ConductingEquipment
      @JvmName("getConductingEquipment")
      get() = _builder.getConductingEquipment()
      @JvmName("setConductingEquipment")
      set(value) {
        _builder.setConductingEquipment(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearConductingEquipment() {
      _builder.clearConductingEquipment()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the conductingEquipment field is set.
     */
    public fun hasConductingEquipment(): kotlin.Boolean {
      return _builder.hasConductingEquipment()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.breakermodule.Breaker.copy(block: openfmb.breakermodule.BreakerKt.Dsl.() -> kotlin.Unit): openfmb.breakermodule.Breaker =
  openfmb.breakermodule.BreakerKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.breakermodule.BreakerOrBuilder.conductingEquipmentOrNull: openfmb.commonmodule.ConductingEquipment?
  get() = if (hasConductingEquipment()) getConductingEquipment() else null

