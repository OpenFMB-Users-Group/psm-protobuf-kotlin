//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializeconductingEquipment")
public inline fun conductingEquipment(block: openfmb.commonmodule.ConductingEquipmentKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ConductingEquipment =
  openfmb.commonmodule.ConductingEquipmentKt.Dsl._create(openfmb.commonmodule.ConductingEquipment.newBuilder()).apply { block() }._build()
public object ConductingEquipmentKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.ConductingEquipment.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.ConductingEquipment.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.ConductingEquipment = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.NamedObject namedObject = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var namedObject: openfmb.commonmodule.NamedObject
      @JvmName("getNamedObject")
      get() = _builder.getNamedObject()
      @JvmName("setNamedObject")
      set(value) {
        _builder.setNamedObject(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.NamedObject namedObject = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearNamedObject() {
      _builder.clearNamedObject()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.NamedObject namedObject = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the namedObject field is set.
     */
    public fun hasNamedObject(): kotlin.Boolean {
      return _builder.hasNamedObject()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>string mRID = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_uuid) = true, (.uml.option_key) = true];</code>
     */
    public var mRID: kotlin.String
      @JvmName("getMRID")
      get() = _builder.getMRID()
      @JvmName("setMRID")
      set(value) {
        _builder.setMRID(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>string mRID = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_uuid) = true, (.uml.option_key) = true];</code>
     */
    public fun clearMRID() {
      _builder.clearMRID()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.ConductingEquipment.copy(block: openfmb.commonmodule.ConductingEquipmentKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ConductingEquipment =
  openfmb.commonmodule.ConductingEquipmentKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.ConductingEquipmentOrBuilder.namedObjectOrNull: openfmb.commonmodule.NamedObject?
  get() = if (hasNamedObject()) getNamedObject() else null

