//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: essmodule/essmodule.proto

package openfmb.essmodule;

@kotlin.jvm.JvmName("-initializecapacityFirming")
public inline fun capacityFirming(block: openfmb.essmodule.CapacityFirmingKt.Dsl.() -> kotlin.Unit): openfmb.essmodule.CapacityFirming =
  openfmb.essmodule.CapacityFirmingKt.Dsl._create(openfmb.essmodule.CapacityFirming.newBuilder()).apply { block() }._build()
public object CapacityFirmingKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.essmodule.CapacityFirming.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.essmodule.CapacityFirming.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.essmodule.CapacityFirming = _builder.build()

    /**
     * <pre>
     * Control value (TRUE or FALSE)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue capacityFirmingCtl = 1;</code>
     */
    public var capacityFirmingCtl: com.google.protobuf.BoolValue
      @JvmName("getCapacityFirmingCtl")
      get() = _builder.getCapacityFirmingCtl()
      @JvmName("setCapacityFirmingCtl")
      set(value) {
        _builder.setCapacityFirmingCtl(value)
      }
    /**
     * <pre>
     * Control value (TRUE or FALSE)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue capacityFirmingCtl = 1;</code>
     */
    public fun clearCapacityFirmingCtl() {
      _builder.clearCapacityFirmingCtl()
    }
    /**
     * <pre>
     * Control value (TRUE or FALSE)
     * </pre>
     *
     * <code>.google.protobuf.BoolValue capacityFirmingCtl = 1;</code>
     * @return Whether the capacityFirmingCtl field is set.
     */
    public fun hasCapacityFirmingCtl(): kotlin.Boolean {
      return _builder.hasCapacityFirmingCtl()
    }

    /**
     * <pre>
     * uint/1kW/min  If the supervised power increases at a rate higher that the rate defined by these
     * limits, the ESS will discharge/charge at an opposite dp/dt to reduce (smooth) the rate of change at
     * the PCC
     * </pre>
     *
     * <code>.google.protobuf.FloatValue limitNegative_dp_dt = 2;</code>
     */
    public var limitNegativeDpDt: com.google.protobuf.FloatValue
      @JvmName("getLimitNegativeDpDt")
      get() = _builder.getLimitNegativeDpDt()
      @JvmName("setLimitNegativeDpDt")
      set(value) {
        _builder.setLimitNegativeDpDt(value)
      }
    /**
     * <pre>
     * uint/1kW/min  If the supervised power increases at a rate higher that the rate defined by these
     * limits, the ESS will discharge/charge at an opposite dp/dt to reduce (smooth) the rate of change at
     * the PCC
     * </pre>
     *
     * <code>.google.protobuf.FloatValue limitNegative_dp_dt = 2;</code>
     */
    public fun clearLimitNegativeDpDt() {
      _builder.clearLimitNegativeDpDt()
    }
    /**
     * <pre>
     * uint/1kW/min  If the supervised power increases at a rate higher that the rate defined by these
     * limits, the ESS will discharge/charge at an opposite dp/dt to reduce (smooth) the rate of change at
     * the PCC
     * </pre>
     *
     * <code>.google.protobuf.FloatValue limitNegative_dp_dt = 2;</code>
     * @return Whether the limitNegativeDpDt field is set.
     */
    public fun hasLimitNegativeDpDt(): kotlin.Boolean {
      return _builder.hasLimitNegativeDpDt()
    }

    /**
     * <pre>
     * uint/1kW/min  If the supervised power increases at a rate higher that the rate defined by these
     * limits, the ESS will discharge/charge at an opposite dp/dt to reduce (smooth) the rate of change at
     * the PCC
     * </pre>
     *
     * <code>.google.protobuf.FloatValue limitPositive_dp_dt = 3;</code>
     */
    public var limitPositiveDpDt: com.google.protobuf.FloatValue
      @JvmName("getLimitPositiveDpDt")
      get() = _builder.getLimitPositiveDpDt()
      @JvmName("setLimitPositiveDpDt")
      set(value) {
        _builder.setLimitPositiveDpDt(value)
      }
    /**
     * <pre>
     * uint/1kW/min  If the supervised power increases at a rate higher that the rate defined by these
     * limits, the ESS will discharge/charge at an opposite dp/dt to reduce (smooth) the rate of change at
     * the PCC
     * </pre>
     *
     * <code>.google.protobuf.FloatValue limitPositive_dp_dt = 3;</code>
     */
    public fun clearLimitPositiveDpDt() {
      _builder.clearLimitPositiveDpDt()
    }
    /**
     * <pre>
     * uint/1kW/min  If the supervised power increases at a rate higher that the rate defined by these
     * limits, the ESS will discharge/charge at an opposite dp/dt to reduce (smooth) the rate of change at
     * the PCC
     * </pre>
     *
     * <code>.google.protobuf.FloatValue limitPositive_dp_dt = 3;</code>
     * @return Whether the limitPositiveDpDt field is set.
     */
    public fun hasLimitPositiveDpDt(): kotlin.Boolean {
      return _builder.hasLimitPositiveDpDt()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.essmodule.CapacityFirming.copy(block: openfmb.essmodule.CapacityFirmingKt.Dsl.() -> kotlin.Unit): openfmb.essmodule.CapacityFirming =
  openfmb.essmodule.CapacityFirmingKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.essmodule.CapacityFirmingOrBuilder.capacityFirmingCtlOrNull: com.google.protobuf.BoolValue?
  get() = if (hasCapacityFirmingCtl()) getCapacityFirmingCtl() else null

public val openfmb.essmodule.CapacityFirmingOrBuilder.limitNegativeDpDtOrNull: com.google.protobuf.FloatValue?
  get() = if (hasLimitNegativeDpDt()) getLimitNegativeDpDt() else null

public val openfmb.essmodule.CapacityFirmingOrBuilder.limitPositiveDpDtOrNull: com.google.protobuf.FloatValue?
  get() = if (hasLimitPositiveDpDt()) getLimitPositiveDpDt() else null

