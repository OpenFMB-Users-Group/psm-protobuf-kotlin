// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializefrequencyRegulation")
public inline fun frequencyRegulation(block: openfmb.commonmodule.FrequencyRegulationKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.FrequencyRegulation =
  openfmb.commonmodule.FrequencyRegulationKt.Dsl._create(openfmb.commonmodule.FrequencyRegulation.newBuilder()).apply { block() }._build()
/**
 * ```
 * ESS inverter high level function to maintain frequency within dead bands.
 * ```
 *
 * Protobuf type `commonmodule.FrequencyRegulation`
 */
public object FrequencyRegulationKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.FrequencyRegulation.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.FrequencyRegulation.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.FrequencyRegulation = _builder.build()

    /**
     * ```
     * uint/0.01Hz  Frequency regulation is performed when the grid frequency goes beyond the dead
     * bands. The dead bands are defined as follows: Upper DB = frequency set point + dead band plus Lower
     * DB = frequency set point – dead band minus
     * ```
     *
     * `.google.protobuf.FloatValue frequencyDeadBandMinus = 1;`
     */
    public var frequencyDeadBandMinus: com.google.protobuf.FloatValue
      @kotlin.jvm.JvmName("getFrequencyDeadBandMinus")
        get() = _builder.frequencyDeadBandMinus
      @kotlin.jvm.JvmName("setFrequencyDeadBandMinus")
        set(value) {
        _builder.frequencyDeadBandMinus = value
      }
    /**
     * ```
     * uint/0.01Hz  Frequency regulation is performed when the grid frequency goes beyond the dead
     * bands. The dead bands are defined as follows: Upper DB = frequency set point + dead band plus Lower
     * DB = frequency set point – dead band minus
     * ```
     *
     * `.google.protobuf.FloatValue frequencyDeadBandMinus = 1;`
     */
    public fun clearFrequencyDeadBandMinus() {
      _builder.clearFrequencyDeadBandMinus()
    }
    /**
     * ```
     * uint/0.01Hz  Frequency regulation is performed when the grid frequency goes beyond the dead
     * bands. The dead bands are defined as follows: Upper DB = frequency set point + dead band plus Lower
     * DB = frequency set point – dead band minus
     * ```
     *
     * `.google.protobuf.FloatValue frequencyDeadBandMinus = 1;`
     * @return Whether the frequencyDeadBandMinus field is set.
     */
    public fun hasFrequencyDeadBandMinus(): kotlin.Boolean {
      return _builder.hasFrequencyDeadBandMinus()
    }

    public val FrequencyRegulationKt.Dsl.frequencyDeadBandMinusOrNull: com.google.protobuf.FloatValue?
      get() = _builder.frequencyDeadBandMinusOrNull

    /**
     * ```
     * uint/0.01Hz  Frequency regulation is performed when the grid frequency goes beyond the dead
     * bands. The dead bands are defined as follows: Upper DB = frequency set point + dead band plus Lower
     * DB = frequency set point – dead band minus
     * ```
     *
     * `.google.protobuf.FloatValue frequencyDeadBandPlus = 2;`
     */
    public var frequencyDeadBandPlus: com.google.protobuf.FloatValue
      @kotlin.jvm.JvmName("getFrequencyDeadBandPlus")
        get() = _builder.frequencyDeadBandPlus
      @kotlin.jvm.JvmName("setFrequencyDeadBandPlus")
        set(value) {
        _builder.frequencyDeadBandPlus = value
      }
    /**
     * ```
     * uint/0.01Hz  Frequency regulation is performed when the grid frequency goes beyond the dead
     * bands. The dead bands are defined as follows: Upper DB = frequency set point + dead band plus Lower
     * DB = frequency set point – dead band minus
     * ```
     *
     * `.google.protobuf.FloatValue frequencyDeadBandPlus = 2;`
     */
    public fun clearFrequencyDeadBandPlus() {
      _builder.clearFrequencyDeadBandPlus()
    }
    /**
     * ```
     * uint/0.01Hz  Frequency regulation is performed when the grid frequency goes beyond the dead
     * bands. The dead bands are defined as follows: Upper DB = frequency set point + dead band plus Lower
     * DB = frequency set point – dead band minus
     * ```
     *
     * `.google.protobuf.FloatValue frequencyDeadBandPlus = 2;`
     * @return Whether the frequencyDeadBandPlus field is set.
     */
    public fun hasFrequencyDeadBandPlus(): kotlin.Boolean {
      return _builder.hasFrequencyDeadBandPlus()
    }

    public val FrequencyRegulationKt.Dsl.frequencyDeadBandPlusOrNull: com.google.protobuf.FloatValue?
      get() = _builder.frequencyDeadBandPlusOrNull

    /**
     * ```
     * Control value (TRUE or FALSE)
     * ```
     *
     * `.google.protobuf.BoolValue frequencyRegulationCtl = 3;`
     */
    public var frequencyRegulationCtl: com.google.protobuf.BoolValue
      @kotlin.jvm.JvmName("getFrequencyRegulationCtl")
        get() = _builder.frequencyRegulationCtl
      @kotlin.jvm.JvmName("setFrequencyRegulationCtl")
        set(value) {
        _builder.frequencyRegulationCtl = value
      }
    /**
     * ```
     * Control value (TRUE or FALSE)
     * ```
     *
     * `.google.protobuf.BoolValue frequencyRegulationCtl = 3;`
     */
    public fun clearFrequencyRegulationCtl() {
      _builder.clearFrequencyRegulationCtl()
    }
    /**
     * ```
     * Control value (TRUE or FALSE)
     * ```
     *
     * `.google.protobuf.BoolValue frequencyRegulationCtl = 3;`
     * @return Whether the frequencyRegulationCtl field is set.
     */
    public fun hasFrequencyRegulationCtl(): kotlin.Boolean {
      return _builder.hasFrequencyRegulationCtl()
    }

    public val FrequencyRegulationKt.Dsl.frequencyRegulationCtlOrNull: com.google.protobuf.BoolValue?
      get() = _builder.frequencyRegulationCtlOrNull

    /**
     * ```
     * uint/0.01Hz  Target frequency
     * ```
     *
     * `.google.protobuf.FloatValue frequencySetPoint = 4;`
     */
    public var frequencySetPoint: com.google.protobuf.FloatValue
      @kotlin.jvm.JvmName("getFrequencySetPoint")
        get() = _builder.frequencySetPoint
      @kotlin.jvm.JvmName("setFrequencySetPoint")
        set(value) {
        _builder.frequencySetPoint = value
      }
    /**
     * ```
     * uint/0.01Hz  Target frequency
     * ```
     *
     * `.google.protobuf.FloatValue frequencySetPoint = 4;`
     */
    public fun clearFrequencySetPoint() {
      _builder.clearFrequencySetPoint()
    }
    /**
     * ```
     * uint/0.01Hz  Target frequency
     * ```
     *
     * `.google.protobuf.FloatValue frequencySetPoint = 4;`
     * @return Whether the frequencySetPoint field is set.
     */
    public fun hasFrequencySetPoint(): kotlin.Boolean {
      return _builder.hasFrequencySetPoint()
    }

    public val FrequencyRegulationKt.Dsl.frequencySetPointOrNull: com.google.protobuf.FloatValue?
      get() = _builder.frequencySetPointOrNull

    /**
     * ```
     * uint/0.01Hz  Other modes of operation, such as peak shaving, smoothing or SOC management may
     * operate if the grid frequency is within the stable band. Upper stable band = frequency set point +
     * band plus Lower stable band = frequency set point – band minus
     * ```
     *
     * `.google.protobuf.FloatValue gridFrequencyStableBandMinus = 5;`
     */
    public var gridFrequencyStableBandMinus: com.google.protobuf.FloatValue
      @kotlin.jvm.JvmName("getGridFrequencyStableBandMinus")
        get() = _builder.gridFrequencyStableBandMinus
      @kotlin.jvm.JvmName("setGridFrequencyStableBandMinus")
        set(value) {
        _builder.gridFrequencyStableBandMinus = value
      }
    /**
     * ```
     * uint/0.01Hz  Other modes of operation, such as peak shaving, smoothing or SOC management may
     * operate if the grid frequency is within the stable band. Upper stable band = frequency set point +
     * band plus Lower stable band = frequency set point – band minus
     * ```
     *
     * `.google.protobuf.FloatValue gridFrequencyStableBandMinus = 5;`
     */
    public fun clearGridFrequencyStableBandMinus() {
      _builder.clearGridFrequencyStableBandMinus()
    }
    /**
     * ```
     * uint/0.01Hz  Other modes of operation, such as peak shaving, smoothing or SOC management may
     * operate if the grid frequency is within the stable band. Upper stable band = frequency set point +
     * band plus Lower stable band = frequency set point – band minus
     * ```
     *
     * `.google.protobuf.FloatValue gridFrequencyStableBandMinus = 5;`
     * @return Whether the gridFrequencyStableBandMinus field is set.
     */
    public fun hasGridFrequencyStableBandMinus(): kotlin.Boolean {
      return _builder.hasGridFrequencyStableBandMinus()
    }

    public val FrequencyRegulationKt.Dsl.gridFrequencyStableBandMinusOrNull: com.google.protobuf.FloatValue?
      get() = _builder.gridFrequencyStableBandMinusOrNull

    /**
     * ```
     * uint/0.01Hz  Other modes of operation, such as peak shaving, smoothing or SOC management may
     * operate if the grid frequency is within the stable band. Upper stable band = frequency set point +
     * band plus Lower stable band = frequency set point – band minus
     * ```
     *
     * `.google.protobuf.FloatValue gridFrequencyStableBandPlus = 6;`
     */
    public var gridFrequencyStableBandPlus: com.google.protobuf.FloatValue
      @kotlin.jvm.JvmName("getGridFrequencyStableBandPlus")
        get() = _builder.gridFrequencyStableBandPlus
      @kotlin.jvm.JvmName("setGridFrequencyStableBandPlus")
        set(value) {
        _builder.gridFrequencyStableBandPlus = value
      }
    /**
     * ```
     * uint/0.01Hz  Other modes of operation, such as peak shaving, smoothing or SOC management may
     * operate if the grid frequency is within the stable band. Upper stable band = frequency set point +
     * band plus Lower stable band = frequency set point – band minus
     * ```
     *
     * `.google.protobuf.FloatValue gridFrequencyStableBandPlus = 6;`
     */
    public fun clearGridFrequencyStableBandPlus() {
      _builder.clearGridFrequencyStableBandPlus()
    }
    /**
     * ```
     * uint/0.01Hz  Other modes of operation, such as peak shaving, smoothing or SOC management may
     * operate if the grid frequency is within the stable band. Upper stable band = frequency set point +
     * band plus Lower stable band = frequency set point – band minus
     * ```
     *
     * `.google.protobuf.FloatValue gridFrequencyStableBandPlus = 6;`
     * @return Whether the gridFrequencyStableBandPlus field is set.
     */
    public fun hasGridFrequencyStableBandPlus(): kotlin.Boolean {
      return _builder.hasGridFrequencyStableBandPlus()
    }

    public val FrequencyRegulationKt.Dsl.gridFrequencyStableBandPlusOrNull: com.google.protobuf.FloatValue?
      get() = _builder.gridFrequencyStableBandPlusOrNull

    /**
     * ```
     * uint/0.1%  The droops define the reaction of the PCS to under/over frequency events. A droop of
     * 1% means that the PCS will output 100% power if the frequency is 1% of the nominal frequency away
     * from the upper or lower dead band. The minimum droop value possible is 0.8%.
     * ```
     *
     * `.google.protobuf.FloatValue overFrequencyDroop = 7;`
     */
    public var overFrequencyDroop: com.google.protobuf.FloatValue
      @kotlin.jvm.JvmName("getOverFrequencyDroop")
        get() = _builder.overFrequencyDroop
      @kotlin.jvm.JvmName("setOverFrequencyDroop")
        set(value) {
        _builder.overFrequencyDroop = value
      }
    /**
     * ```
     * uint/0.1%  The droops define the reaction of the PCS to under/over frequency events. A droop of
     * 1% means that the PCS will output 100% power if the frequency is 1% of the nominal frequency away
     * from the upper or lower dead band. The minimum droop value possible is 0.8%.
     * ```
     *
     * `.google.protobuf.FloatValue overFrequencyDroop = 7;`
     */
    public fun clearOverFrequencyDroop() {
      _builder.clearOverFrequencyDroop()
    }
    /**
     * ```
     * uint/0.1%  The droops define the reaction of the PCS to under/over frequency events. A droop of
     * 1% means that the PCS will output 100% power if the frequency is 1% of the nominal frequency away
     * from the upper or lower dead band. The minimum droop value possible is 0.8%.
     * ```
     *
     * `.google.protobuf.FloatValue overFrequencyDroop = 7;`
     * @return Whether the overFrequencyDroop field is set.
     */
    public fun hasOverFrequencyDroop(): kotlin.Boolean {
      return _builder.hasOverFrequencyDroop()
    }

    public val FrequencyRegulationKt.Dsl.overFrequencyDroopOrNull: com.google.protobuf.FloatValue?
      get() = _builder.overFrequencyDroopOrNull

    /**
     * ```
     * uint/0.1%  The droops define the reaction of the PCS to under/over voltage events. A droop of 1%
     * means that the PCS will output 100% power if the voltage is 1% of the nominal voltage away from the
     * upper or lower dead band. The minimum droop value possible is 0.8%.
     * ```
     *
     * `.google.protobuf.FloatValue underFrequencyDroop = 8;`
     */
    public var underFrequencyDroop: com.google.protobuf.FloatValue
      @kotlin.jvm.JvmName("getUnderFrequencyDroop")
        get() = _builder.underFrequencyDroop
      @kotlin.jvm.JvmName("setUnderFrequencyDroop")
        set(value) {
        _builder.underFrequencyDroop = value
      }
    /**
     * ```
     * uint/0.1%  The droops define the reaction of the PCS to under/over voltage events. A droop of 1%
     * means that the PCS will output 100% power if the voltage is 1% of the nominal voltage away from the
     * upper or lower dead band. The minimum droop value possible is 0.8%.
     * ```
     *
     * `.google.protobuf.FloatValue underFrequencyDroop = 8;`
     */
    public fun clearUnderFrequencyDroop() {
      _builder.clearUnderFrequencyDroop()
    }
    /**
     * ```
     * uint/0.1%  The droops define the reaction of the PCS to under/over voltage events. A droop of 1%
     * means that the PCS will output 100% power if the voltage is 1% of the nominal voltage away from the
     * upper or lower dead band. The minimum droop value possible is 0.8%.
     * ```
     *
     * `.google.protobuf.FloatValue underFrequencyDroop = 8;`
     * @return Whether the underFrequencyDroop field is set.
     */
    public fun hasUnderFrequencyDroop(): kotlin.Boolean {
      return _builder.hasUnderFrequencyDroop()
    }

    public val FrequencyRegulationKt.Dsl.underFrequencyDroopOrNull: com.google.protobuf.FloatValue?
      get() = _builder.underFrequencyDroopOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.FrequencyRegulation.copy(block: `openfmb.commonmodule`.FrequencyRegulationKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.FrequencyRegulation =
  `openfmb.commonmodule`.FrequencyRegulationKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.FrequencyRegulationOrBuilder.frequencyDeadBandMinusOrNull: com.google.protobuf.FloatValue?
  get() = if (hasFrequencyDeadBandMinus()) getFrequencyDeadBandMinus() else null

public val openfmb.commonmodule.FrequencyRegulationOrBuilder.frequencyDeadBandPlusOrNull: com.google.protobuf.FloatValue?
  get() = if (hasFrequencyDeadBandPlus()) getFrequencyDeadBandPlus() else null

public val openfmb.commonmodule.FrequencyRegulationOrBuilder.frequencyRegulationCtlOrNull: com.google.protobuf.BoolValue?
  get() = if (hasFrequencyRegulationCtl()) getFrequencyRegulationCtl() else null

public val openfmb.commonmodule.FrequencyRegulationOrBuilder.frequencySetPointOrNull: com.google.protobuf.FloatValue?
  get() = if (hasFrequencySetPoint()) getFrequencySetPoint() else null

public val openfmb.commonmodule.FrequencyRegulationOrBuilder.gridFrequencyStableBandMinusOrNull: com.google.protobuf.FloatValue?
  get() = if (hasGridFrequencyStableBandMinus()) getGridFrequencyStableBandMinus() else null

public val openfmb.commonmodule.FrequencyRegulationOrBuilder.gridFrequencyStableBandPlusOrNull: com.google.protobuf.FloatValue?
  get() = if (hasGridFrequencyStableBandPlus()) getGridFrequencyStableBandPlus() else null

public val openfmb.commonmodule.FrequencyRegulationOrBuilder.overFrequencyDroopOrNull: com.google.protobuf.FloatValue?
  get() = if (hasOverFrequencyDroop()) getOverFrequencyDroop() else null

public val openfmb.commonmodule.FrequencyRegulationOrBuilder.underFrequencyDroopOrNull: com.google.protobuf.FloatValue?
  get() = if (hasUnderFrequencyDroop()) getUnderFrequencyDroop() else null

