//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: circuitsegmentservicemodule/circuitsegmentservicemodule.proto

package openfmb.circuitsegmentservicemodule;

@kotlin.jvm.JvmName("-initializecircuitSegmentEvent")
public inline fun circuitSegmentEvent(block: openfmb.circuitsegmentservicemodule.CircuitSegmentEventKt.Dsl.() -> kotlin.Unit): openfmb.circuitsegmentservicemodule.CircuitSegmentEvent =
  openfmb.circuitsegmentservicemodule.CircuitSegmentEventKt.Dsl._create(openfmb.circuitsegmentservicemodule.CircuitSegmentEvent.newBuilder()).apply { block() }._build()
public object CircuitSegmentEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.circuitsegmentservicemodule.CircuitSegmentEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.circuitsegmentservicemodule.CircuitSegmentEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.circuitsegmentservicemodule.CircuitSegmentEvent = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var identifiedObject: openfmb.commonmodule.IdentifiedObject
      @JvmName("getIdentifiedObject")
      get() = _builder.getIdentifiedObject()
      @JvmName("setIdentifiedObject")
      set(value) {
        _builder.setIdentifiedObject(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearIdentifiedObject() {
      _builder.clearIdentifiedObject()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the identifiedObject field is set.
     */
    public fun hasIdentifiedObject(): kotlin.Boolean {
      return _builder.hasIdentifiedObject()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.circuitsegmentservicemodule.CircuitSegmentEventDCSC circuitSegmentEventDCSC = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var circuitSegmentEventDCSC: openfmb.circuitsegmentservicemodule.CircuitSegmentEventDCSC
      @JvmName("getCircuitSegmentEventDCSC")
      get() = _builder.getCircuitSegmentEventDCSC()
      @JvmName("setCircuitSegmentEventDCSC")
      set(value) {
        _builder.setCircuitSegmentEventDCSC(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.circuitsegmentservicemodule.CircuitSegmentEventDCSC circuitSegmentEventDCSC = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearCircuitSegmentEventDCSC() {
      _builder.clearCircuitSegmentEventDCSC()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.circuitsegmentservicemodule.CircuitSegmentEventDCSC circuitSegmentEventDCSC = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @return Whether the circuitSegmentEventDCSC field is set.
     */
    public fun hasCircuitSegmentEventDCSC(): kotlin.Boolean {
      return _builder.hasCircuitSegmentEventDCSC()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.circuitsegmentservicemodule.CircuitSegmentEvent.copy(block: openfmb.circuitsegmentservicemodule.CircuitSegmentEventKt.Dsl.() -> kotlin.Unit): openfmb.circuitsegmentservicemodule.CircuitSegmentEvent =
  openfmb.circuitsegmentservicemodule.CircuitSegmentEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.circuitsegmentservicemodule.CircuitSegmentEventOrBuilder.identifiedObjectOrNull: openfmb.commonmodule.IdentifiedObject?
  get() = if (hasIdentifiedObject()) getIdentifiedObject() else null

public val openfmb.circuitsegmentservicemodule.CircuitSegmentEventOrBuilder.circuitSegmentEventDCSCOrNull: openfmb.circuitsegmentservicemodule.CircuitSegmentEventDCSC?
  get() = if (hasCircuitSegmentEventDCSC()) getCircuitSegmentEventDCSC() else null

