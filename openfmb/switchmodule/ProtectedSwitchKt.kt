// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: switchmodule/switchmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.switchmodule;

@kotlin.jvm.JvmName("-initializeprotectedSwitch")
public inline fun protectedSwitch(block: openfmb.switchmodule.ProtectedSwitchKt.Dsl.() -> kotlin.Unit): openfmb.switchmodule.ProtectedSwitch =
  openfmb.switchmodule.ProtectedSwitchKt.Dsl._create(openfmb.switchmodule.ProtectedSwitch.newBuilder()).apply { block() }._build()
/**
 * ```
 * A ProtectedSwitch is a switching device that can be operated by ProtectionEquipment.
 * ```
 *
 * Protobuf type `switchmodule.ProtectedSwitch`
 */
public object ProtectedSwitchKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.switchmodule.ProtectedSwitch.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.switchmodule.ProtectedSwitch.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.switchmodule.ProtectedSwitch = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];`
     */
    public var conductingEquipment: openfmb.commonmodule.ConductingEquipment
      @JvmName("getConductingEquipment")
      get() = _builder.getConductingEquipment()
      @JvmName("setConductingEquipment")
      set(value) {
        _builder.setConductingEquipment(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearConductingEquipment() {
      _builder.clearConductingEquipment()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the conductingEquipment field is set.
     */
    public fun hasConductingEquipment(): kotlin.Boolean {
      return _builder.hasConductingEquipment()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.switchmodule.ProtectedSwitch.copy(block: openfmb.switchmodule.ProtectedSwitchKt.Dsl.() -> kotlin.Unit): openfmb.switchmodule.ProtectedSwitch =
  openfmb.switchmodule.ProtectedSwitchKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.switchmodule.ProtectedSwitchOrBuilder.conductingEquipmentOrNull: openfmb.commonmodule.ConductingEquipment?
  get() = if (hasConductingEquipment()) getConductingEquipment() else null

