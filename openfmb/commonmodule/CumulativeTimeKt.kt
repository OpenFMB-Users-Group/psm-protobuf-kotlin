//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializecumulativeTime")
public inline fun cumulativeTime(block: openfmb.commonmodule.CumulativeTimeKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.CumulativeTime =
  openfmb.commonmodule.CumulativeTimeKt.Dsl._create(openfmb.commonmodule.CumulativeTime.newBuilder()).apply { block() }._build()
public object CumulativeTimeKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.CumulativeTime.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.CumulativeTime.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.CumulativeTime = _builder.build()

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>uint64 seconds = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var seconds: kotlin.Long
      @JvmName("getSeconds")
      get() = _builder.getSeconds()
      @JvmName("setSeconds")
      set(value) {
        _builder.setSeconds(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>uint64 seconds = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearSeconds() {
      _builder.clearSeconds()
    }

    /**
     * <pre>
     * Partial (sub) second expressed in nanoseconds (10&lt;sup&gt;-9&lt;/sup&gt; second).
     * </pre>
     *
     * <code>uint32 nanoseconds = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var nanoseconds: kotlin.Int
      @JvmName("getNanoseconds")
      get() = _builder.getNanoseconds()
      @JvmName("setNanoseconds")
      set(value) {
        _builder.setNanoseconds(value)
      }
    /**
     * <pre>
     * Partial (sub) second expressed in nanoseconds (10&lt;sup&gt;-9&lt;/sup&gt; second).
     * </pre>
     *
     * <code>uint32 nanoseconds = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearNanoseconds() {
      _builder.clearNanoseconds()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.CumulativeTime.copy(block: openfmb.commonmodule.CumulativeTimeKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.CumulativeTime =
  openfmb.commonmodule.CumulativeTimeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

