//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializewYE")
public inline fun wYE(block: openfmb.commonmodule.WYEKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.WYE =
  openfmb.commonmodule.WYEKt.Dsl._create(openfmb.commonmodule.WYE.newBuilder()).apply { block() }._build()
public object WYEKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.WYE.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.WYE.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.WYE = _builder.build()

    /**
     * <pre>
     * Net current, as the algebraic sum of the instantaneous values of currents flowing through all
     * live conductors and the neutral of a circuit at one point of the electrical installation ('phsA
     * instCVal'+'phsB.instCVal'+'phsC.instCVal'+'neut.instCVal').
     * </pre>
     *
     * <code>.commonmodule.CMV net = 1;</code>
     */
    public var net: openfmb.commonmodule.CMV
      @JvmName("getNet")
      get() = _builder.getNet()
      @JvmName("setNet")
      set(value) {
        _builder.setNet(value)
      }
    /**
     * <pre>
     * Net current, as the algebraic sum of the instantaneous values of currents flowing through all
     * live conductors and the neutral of a circuit at one point of the electrical installation ('phsA
     * instCVal'+'phsB.instCVal'+'phsC.instCVal'+'neut.instCVal').
     * </pre>
     *
     * <code>.commonmodule.CMV net = 1;</code>
     */
    public fun clearNet() {
      _builder.clearNet()
    }
    /**
     * <pre>
     * Net current, as the algebraic sum of the instantaneous values of currents flowing through all
     * live conductors and the neutral of a circuit at one point of the electrical installation ('phsA
     * instCVal'+'phsB.instCVal'+'phsC.instCVal'+'neut.instCVal').
     * </pre>
     *
     * <code>.commonmodule.CMV net = 1;</code>
     * @return Whether the net field is set.
     */
    public fun hasNet(): kotlin.Boolean {
      return _builder.hasNet()
    }

    /**
     * <pre>
     * Value of the measured phase neutral. If a direct measurement of this value is not available, it
     * is acceptable to substitute an estimate computed by creating the algebraic sum of the instantaneous
     * values of currents flowing through all live conductors ('phsA.instCVal'+'phsB.instCVal'+'phsC
     * instCVal'); in that case, 'neut'='res'.
     * </pre>
     *
     * <code>.commonmodule.CMV neut = 2;</code>
     */
    public var neut: openfmb.commonmodule.CMV
      @JvmName("getNeut")
      get() = _builder.getNeut()
      @JvmName("setNeut")
      set(value) {
        _builder.setNeut(value)
      }
    /**
     * <pre>
     * Value of the measured phase neutral. If a direct measurement of this value is not available, it
     * is acceptable to substitute an estimate computed by creating the algebraic sum of the instantaneous
     * values of currents flowing through all live conductors ('phsA.instCVal'+'phsB.instCVal'+'phsC
     * instCVal'); in that case, 'neut'='res'.
     * </pre>
     *
     * <code>.commonmodule.CMV neut = 2;</code>
     */
    public fun clearNeut() {
      _builder.clearNeut()
    }
    /**
     * <pre>
     * Value of the measured phase neutral. If a direct measurement of this value is not available, it
     * is acceptable to substitute an estimate computed by creating the algebraic sum of the instantaneous
     * values of currents flowing through all live conductors ('phsA.instCVal'+'phsB.instCVal'+'phsC
     * instCVal'); in that case, 'neut'='res'.
     * </pre>
     *
     * <code>.commonmodule.CMV neut = 2;</code>
     * @return Whether the neut field is set.
     */
    public fun hasNeut(): kotlin.Boolean {
      return _builder.hasNeut()
    }

    /**
     * <pre>
     * Value of phase A.
     * </pre>
     *
     * <code>.commonmodule.CMV phsA = 3;</code>
     */
    public var phsA: openfmb.commonmodule.CMV
      @JvmName("getPhsA")
      get() = _builder.getPhsA()
      @JvmName("setPhsA")
      set(value) {
        _builder.setPhsA(value)
      }
    /**
     * <pre>
     * Value of phase A.
     * </pre>
     *
     * <code>.commonmodule.CMV phsA = 3;</code>
     */
    public fun clearPhsA() {
      _builder.clearPhsA()
    }
    /**
     * <pre>
     * Value of phase A.
     * </pre>
     *
     * <code>.commonmodule.CMV phsA = 3;</code>
     * @return Whether the phsA field is set.
     */
    public fun hasPhsA(): kotlin.Boolean {
      return _builder.hasPhsA()
    }

    /**
     * <pre>
     * Value of phase B.
     * </pre>
     *
     * <code>.commonmodule.CMV phsB = 4;</code>
     */
    public var phsB: openfmb.commonmodule.CMV
      @JvmName("getPhsB")
      get() = _builder.getPhsB()
      @JvmName("setPhsB")
      set(value) {
        _builder.setPhsB(value)
      }
    /**
     * <pre>
     * Value of phase B.
     * </pre>
     *
     * <code>.commonmodule.CMV phsB = 4;</code>
     */
    public fun clearPhsB() {
      _builder.clearPhsB()
    }
    /**
     * <pre>
     * Value of phase B.
     * </pre>
     *
     * <code>.commonmodule.CMV phsB = 4;</code>
     * @return Whether the phsB field is set.
     */
    public fun hasPhsB(): kotlin.Boolean {
      return _builder.hasPhsB()
    }

    /**
     * <pre>
     * Value of phase C.
     * </pre>
     *
     * <code>.commonmodule.CMV phsC = 5;</code>
     */
    public var phsC: openfmb.commonmodule.CMV
      @JvmName("getPhsC")
      get() = _builder.getPhsC()
      @JvmName("setPhsC")
      set(value) {
        _builder.setPhsC(value)
      }
    /**
     * <pre>
     * Value of phase C.
     * </pre>
     *
     * <code>.commonmodule.CMV phsC = 5;</code>
     */
    public fun clearPhsC() {
      _builder.clearPhsC()
    }
    /**
     * <pre>
     * Value of phase C.
     * </pre>
     *
     * <code>.commonmodule.CMV phsC = 5;</code>
     * @return Whether the phsC field is set.
     */
    public fun hasPhsC(): kotlin.Boolean {
      return _builder.hasPhsC()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.WYE.copy(block: openfmb.commonmodule.WYEKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.WYE =
  openfmb.commonmodule.WYEKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.WYEOrBuilder.netOrNull: openfmb.commonmodule.CMV?
  get() = if (hasNet()) getNet() else null

public val openfmb.commonmodule.WYEOrBuilder.neutOrNull: openfmb.commonmodule.CMV?
  get() = if (hasNeut()) getNeut() else null

public val openfmb.commonmodule.WYEOrBuilder.phsAOrNull: openfmb.commonmodule.CMV?
  get() = if (hasPhsA()) getPhsA() else null

public val openfmb.commonmodule.WYEOrBuilder.phsBOrNull: openfmb.commonmodule.CMV?
  get() = if (hasPhsB()) getPhsB() else null

public val openfmb.commonmodule.WYEOrBuilder.phsCOrNull: openfmb.commonmodule.CMV?
  get() = if (hasPhsC()) getPhsC() else null

