//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: essmodule/essmodule.proto

package openfmb.essmodule;

@kotlin.jvm.JvmName("-initializeeSSFunction")
public inline fun eSSFunction(block: openfmb.essmodule.ESSFunctionKt.Dsl.() -> kotlin.Unit): openfmb.essmodule.ESSFunction =
  openfmb.essmodule.ESSFunctionKt.Dsl._create(openfmb.essmodule.ESSFunction.newBuilder()).apply { block() }._build()
public object ESSFunctionKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.essmodule.ESSFunction.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.essmodule.ESSFunction.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.essmodule.ESSFunction = _builder.build()

    /**
     * <pre>
     * ESS inverter high level function to reduce (smooth) charging or discharging rate of change.
     * </pre>
     *
     * <code>.essmodule.CapacityFirming capacityFirming = 1;</code>
     */
    public var capacityFirming: openfmb.essmodule.CapacityFirming
      @JvmName("getCapacityFirming")
      get() = _builder.getCapacityFirming()
      @JvmName("setCapacityFirming")
      set(value) {
        _builder.setCapacityFirming(value)
      }
    /**
     * <pre>
     * ESS inverter high level function to reduce (smooth) charging or discharging rate of change.
     * </pre>
     *
     * <code>.essmodule.CapacityFirming capacityFirming = 1;</code>
     */
    public fun clearCapacityFirming() {
      _builder.clearCapacityFirming()
    }
    /**
     * <pre>
     * ESS inverter high level function to reduce (smooth) charging or discharging rate of change.
     * </pre>
     *
     * <code>.essmodule.CapacityFirming capacityFirming = 1;</code>
     * @return Whether the capacityFirming field is set.
     */
    public fun hasCapacityFirming(): kotlin.Boolean {
      return _builder.hasCapacityFirming()
    }

    /**
     * <pre>
     * ESS inverter high level function to maintain frequency within dead bands.
     * </pre>
     *
     * <code>.essmodule.FrequencyRegulation frequencyRegulation = 2;</code>
     */
    public var frequencyRegulation: openfmb.essmodule.FrequencyRegulation
      @JvmName("getFrequencyRegulation")
      get() = _builder.getFrequencyRegulation()
      @JvmName("setFrequencyRegulation")
      set(value) {
        _builder.setFrequencyRegulation(value)
      }
    /**
     * <pre>
     * ESS inverter high level function to maintain frequency within dead bands.
     * </pre>
     *
     * <code>.essmodule.FrequencyRegulation frequencyRegulation = 2;</code>
     */
    public fun clearFrequencyRegulation() {
      _builder.clearFrequencyRegulation()
    }
    /**
     * <pre>
     * ESS inverter high level function to maintain frequency within dead bands.
     * </pre>
     *
     * <code>.essmodule.FrequencyRegulation frequencyRegulation = 2;</code>
     * @return Whether the frequencyRegulation field is set.
     */
    public fun hasFrequencyRegulation(): kotlin.Boolean {
      return _builder.hasFrequencyRegulation()
    }

    /**
     * <pre>
     * ESS inverter high level function to maintain power level by charging or discharging
     * </pre>
     *
     * <code>.essmodule.PeakShaving peakShaving = 3;</code>
     */
    public var peakShaving: openfmb.essmodule.PeakShaving
      @JvmName("getPeakShaving")
      get() = _builder.getPeakShaving()
      @JvmName("setPeakShaving")
      set(value) {
        _builder.setPeakShaving(value)
      }
    /**
     * <pre>
     * ESS inverter high level function to maintain power level by charging or discharging
     * </pre>
     *
     * <code>.essmodule.PeakShaving peakShaving = 3;</code>
     */
    public fun clearPeakShaving() {
      _builder.clearPeakShaving()
    }
    /**
     * <pre>
     * ESS inverter high level function to maintain power level by charging or discharging
     * </pre>
     *
     * <code>.essmodule.PeakShaving peakShaving = 3;</code>
     * @return Whether the peakShaving field is set.
     */
    public fun hasPeakShaving(): kotlin.Boolean {
      return _builder.hasPeakShaving()
    }

    /**
     * <pre>
     * ESS inverter high level function to shut down ESS if SOC exceeds high or low limits.
     * </pre>
     *
     * <code>.essmodule.SocLimit socLimit = 4;</code>
     */
    public var socLimit: openfmb.essmodule.SocLimit
      @JvmName("getSocLimit")
      get() = _builder.getSocLimit()
      @JvmName("setSocLimit")
      set(value) {
        _builder.setSocLimit(value)
      }
    /**
     * <pre>
     * ESS inverter high level function to shut down ESS if SOC exceeds high or low limits.
     * </pre>
     *
     * <code>.essmodule.SocLimit socLimit = 4;</code>
     */
    public fun clearSocLimit() {
      _builder.clearSocLimit()
    }
    /**
     * <pre>
     * ESS inverter high level function to shut down ESS if SOC exceeds high or low limits.
     * </pre>
     *
     * <code>.essmodule.SocLimit socLimit = 4;</code>
     * @return Whether the socLimit field is set.
     */
    public fun hasSocLimit(): kotlin.Boolean {
      return _builder.hasSocLimit()
    }

    /**
     * <pre>
     * ESS inverter high level function to maintain SOC within dead bands
     * </pre>
     *
     * <code>.essmodule.SOCManagement socManagement = 5;</code>
     */
    public var socManagement: openfmb.essmodule.SOCManagement
      @JvmName("getSocManagement")
      get() = _builder.getSocManagement()
      @JvmName("setSocManagement")
      set(value) {
        _builder.setSocManagement(value)
      }
    /**
     * <pre>
     * ESS inverter high level function to maintain SOC within dead bands
     * </pre>
     *
     * <code>.essmodule.SOCManagement socManagement = 5;</code>
     */
    public fun clearSocManagement() {
      _builder.clearSocManagement()
    }
    /**
     * <pre>
     * ESS inverter high level function to maintain SOC within dead bands
     * </pre>
     *
     * <code>.essmodule.SOCManagement socManagement = 5;</code>
     * @return Whether the socManagement field is set.
     */
    public fun hasSocManagement(): kotlin.Boolean {
      return _builder.hasSocManagement()
    }

    /**
     * <pre>
     * ESS inverter high level function to maintain voltage within droop dead bands.
     * </pre>
     *
     * <code>.essmodule.VoltageDroop voltageDroop = 6;</code>
     */
    public var voltageDroop: openfmb.essmodule.VoltageDroop
      @JvmName("getVoltageDroop")
      get() = _builder.getVoltageDroop()
      @JvmName("setVoltageDroop")
      set(value) {
        _builder.setVoltageDroop(value)
      }
    /**
     * <pre>
     * ESS inverter high level function to maintain voltage within droop dead bands.
     * </pre>
     *
     * <code>.essmodule.VoltageDroop voltageDroop = 6;</code>
     */
    public fun clearVoltageDroop() {
      _builder.clearVoltageDroop()
    }
    /**
     * <pre>
     * ESS inverter high level function to maintain voltage within droop dead bands.
     * </pre>
     *
     * <code>.essmodule.VoltageDroop voltageDroop = 6;</code>
     * @return Whether the voltageDroop field is set.
     */
    public fun hasVoltageDroop(): kotlin.Boolean {
      return _builder.hasVoltageDroop()
    }

    /**
     * <pre>
     * ESS inverter high level function to maintain voltage within dead bands.
     * </pre>
     *
     * <code>.essmodule.VoltagePI voltagePI = 7;</code>
     */
    public var voltagePI: openfmb.essmodule.VoltagePI
      @JvmName("getVoltagePI")
      get() = _builder.getVoltagePI()
      @JvmName("setVoltagePI")
      set(value) {
        _builder.setVoltagePI(value)
      }
    /**
     * <pre>
     * ESS inverter high level function to maintain voltage within dead bands.
     * </pre>
     *
     * <code>.essmodule.VoltagePI voltagePI = 7;</code>
     */
    public fun clearVoltagePI() {
      _builder.clearVoltagePI()
    }
    /**
     * <pre>
     * ESS inverter high level function to maintain voltage within dead bands.
     * </pre>
     *
     * <code>.essmodule.VoltagePI voltagePI = 7;</code>
     * @return Whether the voltagePI field is set.
     */
    public fun hasVoltagePI(): kotlin.Boolean {
      return _builder.hasVoltagePI()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.essmodule.ESSFunction.copy(block: openfmb.essmodule.ESSFunctionKt.Dsl.() -> kotlin.Unit): openfmb.essmodule.ESSFunction =
  openfmb.essmodule.ESSFunctionKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val openfmb.essmodule.ESSFunctionOrBuilder.capacityFirmingOrNull: openfmb.essmodule.CapacityFirming?
  get() = if (hasCapacityFirming()) getCapacityFirming() else null

val openfmb.essmodule.ESSFunctionOrBuilder.frequencyRegulationOrNull: openfmb.essmodule.FrequencyRegulation?
  get() = if (hasFrequencyRegulation()) getFrequencyRegulation() else null

val openfmb.essmodule.ESSFunctionOrBuilder.peakShavingOrNull: openfmb.essmodule.PeakShaving?
  get() = if (hasPeakShaving()) getPeakShaving() else null

val openfmb.essmodule.ESSFunctionOrBuilder.socLimitOrNull: openfmb.essmodule.SocLimit?
  get() = if (hasSocLimit()) getSocLimit() else null

val openfmb.essmodule.ESSFunctionOrBuilder.socManagementOrNull: openfmb.essmodule.SOCManagement?
  get() = if (hasSocManagement()) getSocManagement() else null

val openfmb.essmodule.ESSFunctionOrBuilder.voltageDroopOrNull: openfmb.essmodule.VoltageDroop?
  get() = if (hasVoltageDroop()) getVoltageDroop() else null

val openfmb.essmodule.ESSFunctionOrBuilder.voltagePIOrNull: openfmb.essmodule.VoltagePI?
  get() = if (hasVoltagePI()) getVoltagePI() else null

