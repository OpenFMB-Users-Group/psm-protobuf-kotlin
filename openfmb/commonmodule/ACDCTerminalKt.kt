// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializeaCDCTerminal")
public inline fun aCDCTerminal(block: openfmb.commonmodule.ACDCTerminalKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ACDCTerminal =
  openfmb.commonmodule.ACDCTerminalKt.Dsl._create(openfmb.commonmodule.ACDCTerminal.newBuilder()).apply { block() }._build()
/**
 * ```
 * An electrical connection point (AC or DC) to a piece of conducting equipment. Terminals are
 * connected at physical connection points called connectivity nodes.
 * ```
 *
 * Protobuf type `commonmodule.ACDCTerminal`
 */
public object ACDCTerminalKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.ACDCTerminal.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.ACDCTerminal.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.ACDCTerminal = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];`
     */
    public var identifiedObject: openfmb.commonmodule.IdentifiedObject
      @JvmName("getIdentifiedObject")
      get() = _builder.getIdentifiedObject()
      @JvmName("setIdentifiedObject")
      set(value) {
        _builder.setIdentifiedObject(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearIdentifiedObject() {
      _builder.clearIdentifiedObject()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the identifiedObject field is set.
     */
    public fun hasIdentifiedObject(): kotlin.Boolean {
      return _builder.hasIdentifiedObject()
    }

    /**
     * ```
     * The connected status is related to a bus-branch model and the topological node to terminal
     * relation.  True implies the terminal is connected to the related topological node and false implies
     * it is not.  In a bus-branch model, the connected status is used to tell if equipment is disconnected
     * without having to change the connectivity described by the topological node to terminal relation. A
     * valid case is that conducting equipment can be connected in one end and open in the other. In
     * particular for an AC line segment, where the reactive line charging can be significant, this is a
     * relevant case.
     * ```
     *
     * `.google.protobuf.BoolValue connected = 2;`
     */
    public var connected: com.google.protobuf.BoolValue
      @JvmName("getConnected")
      get() = _builder.getConnected()
      @JvmName("setConnected")
      set(value) {
        _builder.setConnected(value)
      }
    /**
     * ```
     * The connected status is related to a bus-branch model and the topological node to terminal
     * relation.  True implies the terminal is connected to the related topological node and false implies
     * it is not.  In a bus-branch model, the connected status is used to tell if equipment is disconnected
     * without having to change the connectivity described by the topological node to terminal relation. A
     * valid case is that conducting equipment can be connected in one end and open in the other. In
     * particular for an AC line segment, where the reactive line charging can be significant, this is a
     * relevant case.
     * ```
     *
     * `.google.protobuf.BoolValue connected = 2;`
     */
    public fun clearConnected() {
      _builder.clearConnected()
    }
    /**
     * ```
     * The connected status is related to a bus-branch model and the topological node to terminal
     * relation.  True implies the terminal is connected to the related topological node and false implies
     * it is not.  In a bus-branch model, the connected status is used to tell if equipment is disconnected
     * without having to change the connectivity described by the topological node to terminal relation. A
     * valid case is that conducting equipment can be connected in one end and open in the other. In
     * particular for an AC line segment, where the reactive line charging can be significant, this is a
     * relevant case.
     * ```
     *
     * `.google.protobuf.BoolValue connected = 2;`
     * @return Whether the connected field is set.
     */
    public fun hasConnected(): kotlin.Boolean {
      return _builder.hasConnected()
    }

    /**
     * ```
     * The orientation of the terminal connections for a multiple terminal conducting equipment.  The
     * sequence numbering starts with 1 and additional terminals should follow in increasing order.   The
     * first terminal is the "starting point" for a two terminal branch.
     * ```
     *
     * `.google.protobuf.Int32Value sequenceNumber = 3;`
     */
    public var sequenceNumber: com.google.protobuf.Int32Value
      @JvmName("getSequenceNumber")
      get() = _builder.getSequenceNumber()
      @JvmName("setSequenceNumber")
      set(value) {
        _builder.setSequenceNumber(value)
      }
    /**
     * ```
     * The orientation of the terminal connections for a multiple terminal conducting equipment.  The
     * sequence numbering starts with 1 and additional terminals should follow in increasing order.   The
     * first terminal is the "starting point" for a two terminal branch.
     * ```
     *
     * `.google.protobuf.Int32Value sequenceNumber = 3;`
     */
    public fun clearSequenceNumber() {
      _builder.clearSequenceNumber()
    }
    /**
     * ```
     * The orientation of the terminal connections for a multiple terminal conducting equipment.  The
     * sequence numbering starts with 1 and additional terminals should follow in increasing order.   The
     * first terminal is the "starting point" for a two terminal branch.
     * ```
     *
     * `.google.protobuf.Int32Value sequenceNumber = 3;`
     * @return Whether the sequenceNumber field is set.
     */
    public fun hasSequenceNumber(): kotlin.Boolean {
      return _builder.hasSequenceNumber()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun openfmb.commonmodule.ACDCTerminal.copy(block: openfmb.commonmodule.ACDCTerminalKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ACDCTerminal =
  openfmb.commonmodule.ACDCTerminalKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.ACDCTerminalOrBuilder.identifiedObjectOrNull: openfmb.commonmodule.IdentifiedObject?
  get() = if (hasIdentifiedObject()) getIdentifiedObject() else null

public val openfmb.commonmodule.ACDCTerminalOrBuilder.connectedOrNull: com.google.protobuf.BoolValue?
  get() = if (hasConnected()) getConnected() else null

public val openfmb.commonmodule.ACDCTerminalOrBuilder.sequenceNumberOrNull: com.google.protobuf.Int32Value?
  get() = if (hasSequenceNumber()) getSequenceNumber() else null

