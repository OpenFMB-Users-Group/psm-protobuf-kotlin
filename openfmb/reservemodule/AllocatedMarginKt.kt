// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: reservemodule/reservemodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.reservemodule;

@kotlin.jvm.JvmName("-initializeallocatedMargin")
public inline fun allocatedMargin(block: openfmb.reservemodule.AllocatedMarginKt.Dsl.() -> kotlin.Unit): openfmb.reservemodule.AllocatedMargin =
  openfmb.reservemodule.AllocatedMarginKt.Dsl._create(openfmb.reservemodule.AllocatedMargin.newBuilder()).apply { block() }._build()
/**
 * ```
 * MISSING DOCUMENTATION!!!
 * ```
 *
 * Protobuf type `reservemodule.AllocatedMargin`
 */
public object AllocatedMarginKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.reservemodule.AllocatedMargin.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.reservemodule.AllocatedMargin.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.reservemodule.AllocatedMargin = _builder.build()

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `string requestID = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var requestID: kotlin.String
      @JvmName("getRequestID")
      get() = _builder.getRequestID()
      @JvmName("setRequestID")
      set(value) {
        _builder.setRequestID(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `string requestID = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearRequestID() {
      _builder.clearRequestID()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.reservemodule.ReserveMargin allocatedMargin = 2;`
     */
    public var allocatedMargin: openfmb.reservemodule.ReserveMargin
      @JvmName("getAllocatedMargin")
      get() = _builder.getAllocatedMargin()
      @JvmName("setAllocatedMargin")
      set(value) {
        _builder.setAllocatedMargin(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.reservemodule.ReserveMargin allocatedMargin = 2;`
     */
    public fun clearAllocatedMargin() {
      _builder.clearAllocatedMargin()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.reservemodule.ReserveMargin allocatedMargin = 2;`
     * @return Whether the allocatedMargin field is set.
     */
    public fun hasAllocatedMargin(): kotlin.Boolean {
      return _builder.hasAllocatedMargin()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.reservemodule.ReserveMargin allocatedStandbyMargin = 3;`
     */
    public var allocatedStandbyMargin: openfmb.reservemodule.ReserveMargin
      @JvmName("getAllocatedStandbyMargin")
      get() = _builder.getAllocatedStandbyMargin()
      @JvmName("setAllocatedStandbyMargin")
      set(value) {
        _builder.setAllocatedStandbyMargin(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.reservemodule.ReserveMargin allocatedStandbyMargin = 3;`
     */
    public fun clearAllocatedStandbyMargin() {
      _builder.clearAllocatedStandbyMargin()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.reservemodule.ReserveMargin allocatedStandbyMargin = 3;`
     * @return Whether the allocatedStandbyMargin field is set.
     */
    public fun hasAllocatedStandbyMargin(): kotlin.Boolean {
      return _builder.hasAllocatedStandbyMargin()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.reservemodule.AllocatedMargin.copy(block: openfmb.reservemodule.AllocatedMarginKt.Dsl.() -> kotlin.Unit): openfmb.reservemodule.AllocatedMargin =
  openfmb.reservemodule.AllocatedMarginKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.reservemodule.AllocatedMarginOrBuilder.allocatedMarginOrNull: openfmb.reservemodule.ReserveMargin?
  get() = if (hasAllocatedMargin()) getAllocatedMargin() else null

public val openfmb.reservemodule.AllocatedMarginOrBuilder.allocatedStandbyMarginOrNull: openfmb.reservemodule.ReserveMargin?
  get() = if (hasAllocatedStandbyMargin()) getAllocatedStandbyMargin() else null

