// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: solarmodule/solarmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.solarmodule;

@kotlin.jvm.JvmName("-initializesolarInverter")
public inline fun solarInverter(block: openfmb.solarmodule.SolarInverterKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarInverter =
  openfmb.solarmodule.SolarInverterKt.Dsl._create(openfmb.solarmodule.SolarInverter.newBuilder()).apply { block() }._build()
/**
 * ```
 * MISSING DOCUMENTATION!!!
 * ```
 *
 * Protobuf type `solarmodule.SolarInverter`
 */
public object SolarInverterKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.solarmodule.SolarInverter.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.solarmodule.SolarInverter.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.solarmodule.SolarInverter = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];`
     */
    public var conductingEquipment: openfmb.commonmodule.ConductingEquipment
      @kotlin.jvm.JvmName("getConductingEquipment")
        get() = _builder.conductingEquipment
      @kotlin.jvm.JvmName("setConductingEquipment")
        set(value) {
        _builder.conductingEquipment = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearConductingEquipment() {
      _builder.clearConductingEquipment()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the conductingEquipment field is set.
     */
    public fun hasConductingEquipment(): kotlin.Boolean {
      return _builder.hasConductingEquipment()
    }

    public val SolarInverterKt.Dsl.conductingEquipmentOrNull: openfmb.commonmodule.ConductingEquipment?
      get() = _builder.conductingEquipmentOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.solarmodule.SolarInverter.copy(block: `openfmb.solarmodule`.SolarInverterKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarInverter =
  `openfmb.solarmodule`.SolarInverterKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.solarmodule.SolarInverterOrBuilder.conductingEquipmentOrNull: openfmb.commonmodule.ConductingEquipment?
  get() = if (hasConductingEquipment()) getConductingEquipment() else null

