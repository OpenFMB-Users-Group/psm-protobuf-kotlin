//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: generationmodule/generationmodule.proto

package openfmb.generationmodule;

@kotlin.jvm.JvmName("-initializegenerationDiscreteControl")
public inline fun generationDiscreteControl(block: openfmb.generationmodule.GenerationDiscreteControlKt.Dsl.() -> kotlin.Unit): openfmb.generationmodule.GenerationDiscreteControl =
  openfmb.generationmodule.GenerationDiscreteControlKt.Dsl._create(openfmb.generationmodule.GenerationDiscreteControl.newBuilder()).apply { block() }._build()
public object GenerationDiscreteControlKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.generationmodule.GenerationDiscreteControl.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.generationmodule.GenerationDiscreteControl.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.generationmodule.GenerationDiscreteControl = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var controlValue: openfmb.commonmodule.ControlValue
      @JvmName("getControlValue")
      get() = _builder.getControlValue()
      @JvmName("setControlValue")
      set(value) {
        _builder.setControlValue(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearControlValue() {
      _builder.clearControlValue()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the controlValue field is set.
     */
    public fun hasControlValue(): kotlin.Boolean {
      return _builder.hasControlValue()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.CheckConditions check = 2;</code>
     */
    public var check: openfmb.commonmodule.CheckConditions
      @JvmName("getCheck")
      get() = _builder.getCheck()
      @JvmName("setCheck")
      set(value) {
        _builder.setCheck(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.CheckConditions check = 2;</code>
     */
    public fun clearCheck() {
      _builder.clearCheck()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.CheckConditions check = 2;</code>
     * @return Whether the check field is set.
     */
    public fun hasCheck(): kotlin.Boolean {
      return _builder.hasCheck()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.generationmodule.ReactivePowerControl ReactivePowerControl = 3;</code>
     */
    public var reactivePowerControl: openfmb.generationmodule.ReactivePowerControl
      @JvmName("getReactivePowerControl")
      get() = _builder.getReactivePowerControl()
      @JvmName("setReactivePowerControl")
      set(value) {
        _builder.setReactivePowerControl(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.generationmodule.ReactivePowerControl ReactivePowerControl = 3;</code>
     */
    public fun clearReactivePowerControl() {
      _builder.clearReactivePowerControl()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.generationmodule.ReactivePowerControl ReactivePowerControl = 3;</code>
     * @return Whether the reactivePowerControl field is set.
     */
    public fun hasReactivePowerControl(): kotlin.Boolean {
      return _builder.hasReactivePowerControl()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.generationmodule.RealPowerControl RealPowerControl = 4;</code>
     */
    public var realPowerControl: openfmb.generationmodule.RealPowerControl
      @JvmName("getRealPowerControl")
      get() = _builder.getRealPowerControl()
      @JvmName("setRealPowerControl")
      set(value) {
        _builder.setRealPowerControl(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.generationmodule.RealPowerControl RealPowerControl = 4;</code>
     */
    public fun clearRealPowerControl() {
      _builder.clearRealPowerControl()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.generationmodule.RealPowerControl RealPowerControl = 4;</code>
     * @return Whether the realPowerControl field is set.
     */
    public fun hasRealPowerControl(): kotlin.Boolean {
      return _builder.hasRealPowerControl()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.generationmodule.GenerationDiscreteControl.copy(block: openfmb.generationmodule.GenerationDiscreteControlKt.Dsl.() -> kotlin.Unit): openfmb.generationmodule.GenerationDiscreteControl =
  openfmb.generationmodule.GenerationDiscreteControlKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val openfmb.generationmodule.GenerationDiscreteControlOrBuilder.controlValueOrNull: openfmb.commonmodule.ControlValue?
  get() = if (hasControlValue()) getControlValue() else null

val openfmb.generationmodule.GenerationDiscreteControlOrBuilder.checkOrNull: openfmb.commonmodule.CheckConditions?
  get() = if (hasCheck()) getCheck() else null

val openfmb.generationmodule.GenerationDiscreteControlOrBuilder.reactivePowerControlOrNull: openfmb.generationmodule.ReactivePowerControl?
  get() = if (hasReactivePowerControl()) getReactivePowerControl() else null

val openfmb.generationmodule.GenerationDiscreteControlOrBuilder.realPowerControlOrNull: openfmb.generationmodule.RealPowerControl?
  get() = if (hasRealPowerControl()) getRealPowerControl() else null

