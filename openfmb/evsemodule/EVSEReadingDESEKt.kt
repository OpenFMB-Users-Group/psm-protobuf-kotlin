// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: evsemodule/evsemodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.evsemodule;

@kotlin.jvm.JvmName("-initializeeVSEReadingDESE")
public inline fun eVSEReadingDESE(block: openfmb.evsemodule.EVSEReadingDESEKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.EVSEReadingDESE =
  openfmb.evsemodule.EVSEReadingDESEKt.Dsl._create(openfmb.evsemodule.EVSEReadingDESE.newBuilder()).apply { block() }._build()
/**
 * ```
 * LN: E-Mobility supply equipment Name: DESE
 * ```
 *
 * Protobuf type `evsemodule.EVSEReadingDESE`
 */
public object EVSEReadingDESEKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.evsemodule.EVSEReadingDESE.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.evsemodule.EVSEReadingDESE.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.evsemodule.EVSEReadingDESE = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public var logicalNode: openfmb.commonmodule.LogicalNode
      @kotlin.jvm.JvmName("getLogicalNode")
        get() = _builder.logicalNode
      @kotlin.jvm.JvmName("setLogicalNode")
        set(value) {
        _builder.logicalNode = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearLogicalNode() {
      _builder.clearLogicalNode()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the logicalNode field is set.
     */
    public fun hasLogicalNode(): kotlin.Boolean {
      return _builder.hasLogicalNode()
    }

    public val EVSEReadingDESEKt.Dsl.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
      get() = _builder.logicalNodeOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.ReadingDEAO readingDEAO = 2;`
     */
    public var readingDEAO: openfmb.evsemodule.ReadingDEAO
      @kotlin.jvm.JvmName("getReadingDEAO")
        get() = _builder.readingDEAO
      @kotlin.jvm.JvmName("setReadingDEAO")
        set(value) {
        _builder.readingDEAO = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.ReadingDEAO readingDEAO = 2;`
     */
    public fun clearReadingDEAO() {
      _builder.clearReadingDEAO()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.ReadingDEAO readingDEAO = 2;`
     * @return Whether the readingDEAO field is set.
     */
    public fun hasReadingDEAO(): kotlin.Boolean {
      return _builder.hasReadingDEAO()
    }

    public val EVSEReadingDESEKt.Dsl.readingDEAOOrNull: openfmb.evsemodule.ReadingDEAO?
      get() = _builder.readingDEAOOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.ReadingDEDO readingDEDO = 3;`
     */
    public var readingDEDO: openfmb.evsemodule.ReadingDEDO
      @kotlin.jvm.JvmName("getReadingDEDO")
        get() = _builder.readingDEDO
      @kotlin.jvm.JvmName("setReadingDEDO")
        set(value) {
        _builder.readingDEDO = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.ReadingDEDO readingDEDO = 3;`
     */
    public fun clearReadingDEDO() {
      _builder.clearReadingDEDO()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.ReadingDEDO readingDEDO = 3;`
     * @return Whether the readingDEDO field is set.
     */
    public fun hasReadingDEDO(): kotlin.Boolean {
      return _builder.hasReadingDEDO()
    }

    public val EVSEReadingDESEKt.Dsl.readingDEDOOrNull: openfmb.evsemodule.ReadingDEDO?
      get() = _builder.readingDEDOOrNull

    /**
     * ```
     * Charging voltage  (AllOrNonePerGroup with ChaA)
     * ```
     *
     * `.commonmodule.MV ChaV = 4;`
     */
    public var chaV: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getChaV")
        get() = _builder.chaV
      @kotlin.jvm.JvmName("setChaV")
        set(value) {
        _builder.chaV = value
      }
    /**
     * ```
     * Charging voltage  (AllOrNonePerGroup with ChaA)
     * ```
     *
     * `.commonmodule.MV ChaV = 4;`
     */
    public fun clearChaV() {
      _builder.clearChaV()
    }
    /**
     * ```
     * Charging voltage  (AllOrNonePerGroup with ChaA)
     * ```
     *
     * `.commonmodule.MV ChaV = 4;`
     * @return Whether the chaV field is set.
     */
    public fun hasChaV(): kotlin.Boolean {
      return _builder.hasChaV()
    }

    public val EVSEReadingDESEKt.Dsl.chaVOrNull: openfmb.commonmodule.MV?
      get() = _builder.chaVOrNull

    /**
     * ```
     * Charging current (AllOrNonePerGroup with ChaV). actual current being drawn by the EV from the
     * charger.
     * ```
     *
     * `.commonmodule.MV ChaA = 5;`
     */
    public var chaA: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getChaA")
        get() = _builder.chaA
      @kotlin.jvm.JvmName("setChaA")
        set(value) {
        _builder.chaA = value
      }
    /**
     * ```
     * Charging current (AllOrNonePerGroup with ChaV). actual current being drawn by the EV from the
     * charger.
     * ```
     *
     * `.commonmodule.MV ChaA = 5;`
     */
    public fun clearChaA() {
      _builder.clearChaA()
    }
    /**
     * ```
     * Charging current (AllOrNonePerGroup with ChaV). actual current being drawn by the EV from the
     * charger.
     * ```
     *
     * `.commonmodule.MV ChaA = 5;`
     * @return Whether the chaA field is set.
     */
    public fun hasChaA(): kotlin.Boolean {
      return _builder.hasChaA()
    }

    public val EVSEReadingDESEKt.Dsl.chaAOrNull: openfmb.commonmodule.MV?
      get() = _builder.chaAOrNull

    /**
     * ```
     * Power Import
     * ```
     *
     * `.commonmodule.MV ChaW = 6;`
     */
    public var chaW: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getChaW")
        get() = _builder.chaW
      @kotlin.jvm.JvmName("setChaW")
        set(value) {
        _builder.chaW = value
      }
    /**
     * ```
     * Power Import
     * ```
     *
     * `.commonmodule.MV ChaW = 6;`
     */
    public fun clearChaW() {
      _builder.clearChaW()
    }
    /**
     * ```
     * Power Import
     * ```
     *
     * `.commonmodule.MV ChaW = 6;`
     * @return Whether the chaW field is set.
     */
    public fun hasChaW(): kotlin.Boolean {
      return _builder.hasChaW()
    }

    public val EVSEReadingDESEKt.Dsl.chaWOrNull: openfmb.commonmodule.MV?
      get() = _builder.chaWOrNull

    /**
     * ```
     * Energy Import
     * ```
     *
     * `.commonmodule.MV ChaWh = 7;`
     */
    public var chaWh: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getChaWh")
        get() = _builder.chaWh
      @kotlin.jvm.JvmName("setChaWh")
        set(value) {
        _builder.chaWh = value
      }
    /**
     * ```
     * Energy Import
     * ```
     *
     * `.commonmodule.MV ChaWh = 7;`
     */
    public fun clearChaWh() {
      _builder.clearChaWh()
    }
    /**
     * ```
     * Energy Import
     * ```
     *
     * `.commonmodule.MV ChaWh = 7;`
     * @return Whether the chaWh field is set.
     */
    public fun hasChaWh(): kotlin.Boolean {
      return _builder.hasChaWh()
    }

    public val EVSEReadingDESEKt.Dsl.chaWhOrNull: openfmb.commonmodule.MV?
      get() = _builder.chaWhOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.evsemodule.EVSEReadingDESE.copy(block: `openfmb.evsemodule`.EVSEReadingDESEKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.EVSEReadingDESE =
  `openfmb.evsemodule`.EVSEReadingDESEKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.evsemodule.EVSEReadingDESEOrBuilder.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
  get() = if (hasLogicalNode()) getLogicalNode() else null

public val openfmb.evsemodule.EVSEReadingDESEOrBuilder.readingDEAOOrNull: openfmb.evsemodule.ReadingDEAO?
  get() = if (hasReadingDEAO()) getReadingDEAO() else null

public val openfmb.evsemodule.EVSEReadingDESEOrBuilder.readingDEDOOrNull: openfmb.evsemodule.ReadingDEDO?
  get() = if (hasReadingDEDO()) getReadingDEDO() else null

public val openfmb.evsemodule.EVSEReadingDESEOrBuilder.chaVOrNull: openfmb.commonmodule.MV?
  get() = if (hasChaV()) getChaV() else null

public val openfmb.evsemodule.EVSEReadingDESEOrBuilder.chaAOrNull: openfmb.commonmodule.MV?
  get() = if (hasChaA()) getChaA() else null

public val openfmb.evsemodule.EVSEReadingDESEOrBuilder.chaWOrNull: openfmb.commonmodule.MV?
  get() = if (hasChaW()) getChaW() else null

public val openfmb.evsemodule.EVSEReadingDESEOrBuilder.chaWhOrNull: openfmb.commonmodule.MV?
  get() = if (hasChaWh()) getChaWh() else null

