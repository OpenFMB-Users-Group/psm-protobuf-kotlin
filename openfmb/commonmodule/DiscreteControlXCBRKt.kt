//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializediscreteControlXCBR")
public inline fun discreteControlXCBR(block: openfmb.commonmodule.DiscreteControlXCBRKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.DiscreteControlXCBR =
  openfmb.commonmodule.DiscreteControlXCBRKt.Dsl._create(openfmb.commonmodule.DiscreteControlXCBR.newBuilder()).apply { block() }._build()
public object DiscreteControlXCBRKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.DiscreteControlXCBR.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.DiscreteControlXCBR.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.DiscreteControlXCBR = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var logicalNodeForControl: openfmb.commonmodule.LogicalNodeForControl
      @JvmName("getLogicalNodeForControl")
      get() = _builder.getLogicalNodeForControl()
      @JvmName("setLogicalNodeForControl")
      set(value) {
        _builder.setLogicalNodeForControl(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearLogicalNodeForControl() {
      _builder.clearLogicalNodeForControl()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the logicalNodeForControl field is set.
     */
    public fun hasLogicalNodeForControl(): kotlin.Boolean {
      return _builder.hasLogicalNodeForControl()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.PhaseDPC Pos = 2;</code>
     */
    public var pos: openfmb.commonmodule.PhaseDPC
      @JvmName("getPos")
      get() = _builder.getPos()
      @JvmName("setPos")
      set(value) {
        _builder.setPos(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.PhaseDPC Pos = 2;</code>
     */
    public fun clearPos() {
      _builder.clearPos()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.PhaseDPC Pos = 2;</code>
     * @return Whether the pos field is set.
     */
    public fun hasPos(): kotlin.Boolean {
      return _builder.hasPos()
    }

    /**
     * <pre>
     * Protection mode such as a group setting or pre-defined curve profile. It is usually pre-defined
     * by a circuit segment service.
     * </pre>
     *
     * <code>.commonmodule.ControlINC ProtectionMode = 3;</code>
     */
    public var protectionMode: openfmb.commonmodule.ControlINC
      @JvmName("getProtectionMode")
      get() = _builder.getProtectionMode()
      @JvmName("setProtectionMode")
      set(value) {
        _builder.setProtectionMode(value)
      }
    /**
     * <pre>
     * Protection mode such as a group setting or pre-defined curve profile. It is usually pre-defined
     * by a circuit segment service.
     * </pre>
     *
     * <code>.commonmodule.ControlINC ProtectionMode = 3;</code>
     */
    public fun clearProtectionMode() {
      _builder.clearProtectionMode()
    }
    /**
     * <pre>
     * Protection mode such as a group setting or pre-defined curve profile. It is usually pre-defined
     * by a circuit segment service.
     * </pre>
     *
     * <code>.commonmodule.ControlINC ProtectionMode = 3;</code>
     * @return Whether the protectionMode field is set.
     */
    public fun hasProtectionMode(): kotlin.Boolean {
      return _builder.hasProtectionMode()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ControlSPC RecloseEnabled = 4;</code>
     */
    public var recloseEnabled: openfmb.commonmodule.ControlSPC
      @JvmName("getRecloseEnabled")
      get() = _builder.getRecloseEnabled()
      @JvmName("setRecloseEnabled")
      set(value) {
        _builder.setRecloseEnabled(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ControlSPC RecloseEnabled = 4;</code>
     */
    public fun clearRecloseEnabled() {
      _builder.clearRecloseEnabled()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ControlSPC RecloseEnabled = 4;</code>
     * @return Whether the recloseEnabled field is set.
     */
    public fun hasRecloseEnabled(): kotlin.Boolean {
      return _builder.hasRecloseEnabled()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ControlSPC ResetProtectionPickup = 5;</code>
     */
    public var resetProtectionPickup: openfmb.commonmodule.ControlSPC
      @JvmName("getResetProtectionPickup")
      get() = _builder.getResetProtectionPickup()
      @JvmName("setResetProtectionPickup")
      set(value) {
        _builder.setResetProtectionPickup(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ControlSPC ResetProtectionPickup = 5;</code>
     */
    public fun clearResetProtectionPickup() {
      _builder.clearResetProtectionPickup()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ControlSPC ResetProtectionPickup = 5;</code>
     * @return Whether the resetProtectionPickup field is set.
     */
    public fun hasResetProtectionPickup(): kotlin.Boolean {
      return _builder.hasResetProtectionPickup()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.DiscreteControlXCBR.copy(block: openfmb.commonmodule.DiscreteControlXCBRKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.DiscreteControlXCBR =
  openfmb.commonmodule.DiscreteControlXCBRKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val openfmb.commonmodule.DiscreteControlXCBROrBuilder.logicalNodeForControlOrNull: openfmb.commonmodule.LogicalNodeForControl?
  get() = if (hasLogicalNodeForControl()) getLogicalNodeForControl() else null

val openfmb.commonmodule.DiscreteControlXCBROrBuilder.posOrNull: openfmb.commonmodule.PhaseDPC?
  get() = if (hasPos()) getPos() else null

val openfmb.commonmodule.DiscreteControlXCBROrBuilder.protectionModeOrNull: openfmb.commonmodule.ControlINC?
  get() = if (hasProtectionMode()) getProtectionMode() else null

val openfmb.commonmodule.DiscreteControlXCBROrBuilder.recloseEnabledOrNull: openfmb.commonmodule.ControlSPC?
  get() = if (hasRecloseEnabled()) getRecloseEnabled() else null

val openfmb.commonmodule.DiscreteControlXCBROrBuilder.resetProtectionPickupOrNull: openfmb.commonmodule.ControlSPC?
  get() = if (hasResetProtectionPickup()) getResetProtectionPickup() else null

