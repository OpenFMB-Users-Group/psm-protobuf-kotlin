//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: capbankmodule/capbankmodule.proto

package openfmb.capbankmodule;

@kotlin.jvm.JvmName("-initializecapBankEventAndStatusYPSH")
public inline fun capBankEventAndStatusYPSH(block: openfmb.capbankmodule.CapBankEventAndStatusYPSHKt.Dsl.() -> kotlin.Unit): openfmb.capbankmodule.CapBankEventAndStatusYPSH =
  openfmb.capbankmodule.CapBankEventAndStatusYPSHKt.Dsl._create(openfmb.capbankmodule.CapBankEventAndStatusYPSH.newBuilder()).apply { block() }._build()
public object CapBankEventAndStatusYPSHKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.capbankmodule.CapBankEventAndStatusYPSH.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.capbankmodule.CapBankEventAndStatusYPSH.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.capbankmodule.CapBankEventAndStatusYPSH = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var logicalNodeForEventAndStatus: openfmb.commonmodule.LogicalNodeForEventAndStatus
      @JvmName("getLogicalNodeForEventAndStatus")
      get() = _builder.getLogicalNodeForEventAndStatus()
      @JvmName("setLogicalNodeForEventAndStatus")
      set(value) {
        _builder.setLogicalNodeForEventAndStatus(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearLogicalNodeForEventAndStatus() {
      _builder.clearLogicalNodeForEventAndStatus()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the logicalNodeForEventAndStatus field is set.
     */
    public fun hasLogicalNodeForEventAndStatus(): kotlin.Boolean {
      return _builder.hasLogicalNodeForEventAndStatus()
    }

    /**
     * <pre>
     * True if current limit (high, low, or both) are set
     * </pre>
     *
     * <code>.commonmodule.PhaseSPS AmpLmt = 2;</code>
     */
    public var ampLmt: openfmb.commonmodule.PhaseSPS
      @JvmName("getAmpLmt")
      get() = _builder.getAmpLmt()
      @JvmName("setAmpLmt")
      set(value) {
        _builder.setAmpLmt(value)
      }
    /**
     * <pre>
     * True if current limit (high, low, or both) are set
     * </pre>
     *
     * <code>.commonmodule.PhaseSPS AmpLmt = 2;</code>
     */
    public fun clearAmpLmt() {
      _builder.clearAmpLmt()
    }
    /**
     * <pre>
     * True if current limit (high, low, or both) are set
     * </pre>
     *
     * <code>.commonmodule.PhaseSPS AmpLmt = 2;</code>
     * @return Whether the ampLmt field is set.
     */
    public fun hasAmpLmt(): kotlin.Boolean {
      return _builder.hasAmpLmt()
    }

    /**
     * <pre>
     * Control mode
     * </pre>
     *
     * <code>.commonmodule.Optional_ControlModeKind CtlMode = 3;</code>
     */
    public var ctlMode: openfmb.commonmodule.Optional_ControlModeKind
      @JvmName("getCtlMode")
      get() = _builder.getCtlMode()
      @JvmName("setCtlMode")
      set(value) {
        _builder.setCtlMode(value)
      }
    /**
     * <pre>
     * Control mode
     * </pre>
     *
     * <code>.commonmodule.Optional_ControlModeKind CtlMode = 3;</code>
     */
    public fun clearCtlMode() {
      _builder.clearCtlMode()
    }
    /**
     * <pre>
     * Control mode
     * </pre>
     *
     * <code>.commonmodule.Optional_ControlModeKind CtlMode = 3;</code>
     * @return Whether the ctlMode field is set.
     */
    public fun hasCtlMode(): kotlin.Boolean {
      return _builder.hasCtlMode()
    }

    /**
     * <pre>
     * True if power flow is reversed
     * </pre>
     *
     * <code>.commonmodule.PhaseSPS DirRev = 4;</code>
     */
    public var dirRev: openfmb.commonmodule.PhaseSPS
      @JvmName("getDirRev")
      get() = _builder.getDirRev()
      @JvmName("setDirRev")
      set(value) {
        _builder.setDirRev(value)
      }
    /**
     * <pre>
     * True if power flow is reversed
     * </pre>
     *
     * <code>.commonmodule.PhaseSPS DirRev = 4;</code>
     */
    public fun clearDirRev() {
      _builder.clearDirRev()
    }
    /**
     * <pre>
     * True if power flow is reversed
     * </pre>
     *
     * <code>.commonmodule.PhaseSPS DirRev = 4;</code>
     * @return Whether the dirRev field is set.
     */
    public fun hasDirRev(): kotlin.Boolean {
      return _builder.hasDirRev()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ENS_DynamicTestKind DynamicTest = 5;</code>
     */
    public var dynamicTest: openfmb.commonmodule.ENS_DynamicTestKind
      @JvmName("getDynamicTest")
      get() = _builder.getDynamicTest()
      @JvmName("setDynamicTest")
      set(value) {
        _builder.setDynamicTest(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ENS_DynamicTestKind DynamicTest = 5;</code>
     */
    public fun clearDynamicTest() {
      _builder.clearDynamicTest()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ENS_DynamicTestKind DynamicTest = 5;</code>
     * @return Whether the dynamicTest field is set.
     */
    public fun hasDynamicTest(): kotlin.Boolean {
      return _builder.hasDynamicTest()
    }

    /**
     * <pre>
     * (controllable) Position of the switch of power shunt.
     * </pre>
     *
     * <code>.commonmodule.PhaseDPS Pos = 6;</code>
     */
    public var pos: openfmb.commonmodule.PhaseDPS
      @JvmName("getPos")
      get() = _builder.getPos()
      @JvmName("setPos")
      set(value) {
        _builder.setPos(value)
      }
    /**
     * <pre>
     * (controllable) Position of the switch of power shunt.
     * </pre>
     *
     * <code>.commonmodule.PhaseDPS Pos = 6;</code>
     */
    public fun clearPos() {
      _builder.clearPos()
    }
    /**
     * <pre>
     * (controllable) Position of the switch of power shunt.
     * </pre>
     *
     * <code>.commonmodule.PhaseDPS Pos = 6;</code>
     * @return Whether the pos field is set.
     */
    public fun hasPos(): kotlin.Boolean {
      return _builder.hasPos()
    }

    /**
     * <pre>
     * True if temperature limit (high, low, or both) are set
     * </pre>
     *
     * <code>.commonmodule.PhaseSPS TempLmt = 7;</code>
     */
    public var tempLmt: openfmb.commonmodule.PhaseSPS
      @JvmName("getTempLmt")
      get() = _builder.getTempLmt()
      @JvmName("setTempLmt")
      set(value) {
        _builder.setTempLmt(value)
      }
    /**
     * <pre>
     * True if temperature limit (high, low, or both) are set
     * </pre>
     *
     * <code>.commonmodule.PhaseSPS TempLmt = 7;</code>
     */
    public fun clearTempLmt() {
      _builder.clearTempLmt()
    }
    /**
     * <pre>
     * True if temperature limit (high, low, or both) are set
     * </pre>
     *
     * <code>.commonmodule.PhaseSPS TempLmt = 7;</code>
     * @return Whether the tempLmt field is set.
     */
    public fun hasTempLmt(): kotlin.Boolean {
      return _builder.hasTempLmt()
    }

    /**
     * <pre>
     * True if VAr limit (high, low, or both) are set
     * </pre>
     *
     * <code>.commonmodule.PhaseSPS VArLmt = 8;</code>
     */
    public var vArLmt: openfmb.commonmodule.PhaseSPS
      @JvmName("getVArLmt")
      get() = _builder.getVArLmt()
      @JvmName("setVArLmt")
      set(value) {
        _builder.setVArLmt(value)
      }
    /**
     * <pre>
     * True if VAr limit (high, low, or both) are set
     * </pre>
     *
     * <code>.commonmodule.PhaseSPS VArLmt = 8;</code>
     */
    public fun clearVArLmt() {
      _builder.clearVArLmt()
    }
    /**
     * <pre>
     * True if VAr limit (high, low, or both) are set
     * </pre>
     *
     * <code>.commonmodule.PhaseSPS VArLmt = 8;</code>
     * @return Whether the vArLmt field is set.
     */
    public fun hasVArLmt(): kotlin.Boolean {
      return _builder.hasVArLmt()
    }

    /**
     * <pre>
     * True if voltage limit (high, low, or both) are set
     * </pre>
     *
     * <code>.commonmodule.PhaseSPS VolLmt = 9;</code>
     */
    public var volLmt: openfmb.commonmodule.PhaseSPS
      @JvmName("getVolLmt")
      get() = _builder.getVolLmt()
      @JvmName("setVolLmt")
      set(value) {
        _builder.setVolLmt(value)
      }
    /**
     * <pre>
     * True if voltage limit (high, low, or both) are set
     * </pre>
     *
     * <code>.commonmodule.PhaseSPS VolLmt = 9;</code>
     */
    public fun clearVolLmt() {
      _builder.clearVolLmt()
    }
    /**
     * <pre>
     * True if voltage limit (high, low, or both) are set
     * </pre>
     *
     * <code>.commonmodule.PhaseSPS VolLmt = 9;</code>
     * @return Whether the volLmt field is set.
     */
    public fun hasVolLmt(): kotlin.Boolean {
      return _builder.hasVolLmt()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.capbankmodule.CapBankEventAndStatusYPSH.copy(block: openfmb.capbankmodule.CapBankEventAndStatusYPSHKt.Dsl.() -> kotlin.Unit): openfmb.capbankmodule.CapBankEventAndStatusYPSH =
  openfmb.capbankmodule.CapBankEventAndStatusYPSHKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.capbankmodule.CapBankEventAndStatusYPSHOrBuilder.logicalNodeForEventAndStatusOrNull: openfmb.commonmodule.LogicalNodeForEventAndStatus?
  get() = if (hasLogicalNodeForEventAndStatus()) getLogicalNodeForEventAndStatus() else null

public val openfmb.capbankmodule.CapBankEventAndStatusYPSHOrBuilder.ampLmtOrNull: openfmb.commonmodule.PhaseSPS?
  get() = if (hasAmpLmt()) getAmpLmt() else null

public val openfmb.capbankmodule.CapBankEventAndStatusYPSHOrBuilder.ctlModeOrNull: openfmb.commonmodule.Optional_ControlModeKind?
  get() = if (hasCtlMode()) getCtlMode() else null

public val openfmb.capbankmodule.CapBankEventAndStatusYPSHOrBuilder.dirRevOrNull: openfmb.commonmodule.PhaseSPS?
  get() = if (hasDirRev()) getDirRev() else null

public val openfmb.capbankmodule.CapBankEventAndStatusYPSHOrBuilder.dynamicTestOrNull: openfmb.commonmodule.ENS_DynamicTestKind?
  get() = if (hasDynamicTest()) getDynamicTest() else null

public val openfmb.capbankmodule.CapBankEventAndStatusYPSHOrBuilder.posOrNull: openfmb.commonmodule.PhaseDPS?
  get() = if (hasPos()) getPos() else null

public val openfmb.capbankmodule.CapBankEventAndStatusYPSHOrBuilder.tempLmtOrNull: openfmb.commonmodule.PhaseSPS?
  get() = if (hasTempLmt()) getTempLmt() else null

public val openfmb.capbankmodule.CapBankEventAndStatusYPSHOrBuilder.vArLmtOrNull: openfmb.commonmodule.PhaseSPS?
  get() = if (hasVArLmt()) getVArLmt() else null

public val openfmb.capbankmodule.CapBankEventAndStatusYPSHOrBuilder.volLmtOrNull: openfmb.commonmodule.PhaseSPS?
  get() = if (hasVolLmt()) getVolLmt() else null

