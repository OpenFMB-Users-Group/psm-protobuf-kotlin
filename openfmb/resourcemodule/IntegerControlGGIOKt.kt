// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: resourcemodule/resourcemodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.resourcemodule;

@kotlin.jvm.JvmName("-initializeintegerControlGGIO")
public inline fun integerControlGGIO(block: openfmb.resourcemodule.IntegerControlGGIOKt.Dsl.() -> kotlin.Unit): openfmb.resourcemodule.IntegerControlGGIO =
  openfmb.resourcemodule.IntegerControlGGIOKt.Dsl._create(openfmb.resourcemodule.IntegerControlGGIO.newBuilder()).apply { block() }._build()
/**
 * ```
 * Status expressed in integer based on IEC61850 GGIO.
 * ```
 *
 * Protobuf type `resourcemodule.IntegerControlGGIO`
 */
public object IntegerControlGGIOKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.resourcemodule.IntegerControlGGIO.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.resourcemodule.IntegerControlGGIO.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.resourcemodule.IntegerControlGGIO = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public var logicalNode: openfmb.commonmodule.LogicalNode
      @kotlin.jvm.JvmName("getLogicalNode")
        get() = _builder.logicalNode
      @kotlin.jvm.JvmName("setLogicalNode")
        set(value) {
        _builder.logicalNode = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearLogicalNode() {
      _builder.clearLogicalNode()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the logicalNode field is set.
     */
    public fun hasLogicalNode(): kotlin.Boolean {
      return _builder.hasLogicalNode()
    }

    public val IntegerControlGGIOKt.Dsl.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
      get() = _builder.logicalNodeOrNull

    /**
     * ```
     * (controllable) Generic integer controllable status output <i>n</i>.
     * ```
     *
     * `.commonmodule.ControlINC ISCSO = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var iSCSO: openfmb.commonmodule.ControlINC
      @kotlin.jvm.JvmName("getISCSO")
        get() = _builder.iscso
      @kotlin.jvm.JvmName("setISCSO")
        set(value) {
        _builder.iscso = value
      }
    /**
     * ```
     * (controllable) Generic integer controllable status output <i>n</i>.
     * ```
     *
     * `.commonmodule.ControlINC ISCSO = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearISCSO() {
      _builder.clearISCSO()
    }
    /**
     * ```
     * (controllable) Generic integer controllable status output <i>n</i>.
     * ```
     *
     * `.commonmodule.ControlINC ISCSO = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the iSCSO field is set.
     */
    public fun hasISCSO(): kotlin.Boolean {
      return _builder.hasISCSO()
    }

    public val IntegerControlGGIOKt.Dsl.iSCSOOrNull: openfmb.commonmodule.ControlINC?
      get() = _builder.iSCSOOrNull

    /**
     * ```
     * Phase code
     * ```
     *
     * `.commonmodule.Optional_PhaseCodeKind Phase = 3;`
     */
    public var phase: openfmb.commonmodule.Optional_PhaseCodeKind
      @kotlin.jvm.JvmName("getPhase")
        get() = _builder.phase
      @kotlin.jvm.JvmName("setPhase")
        set(value) {
        _builder.phase = value
      }
    /**
     * ```
     * Phase code
     * ```
     *
     * `.commonmodule.Optional_PhaseCodeKind Phase = 3;`
     */
    public fun clearPhase() {
      _builder.clearPhase()
    }
    /**
     * ```
     * Phase code
     * ```
     *
     * `.commonmodule.Optional_PhaseCodeKind Phase = 3;`
     * @return Whether the phase field is set.
     */
    public fun hasPhase(): kotlin.Boolean {
      return _builder.hasPhase()
    }

    public val IntegerControlGGIOKt.Dsl.phaseOrNull: openfmb.commonmodule.Optional_PhaseCodeKind?
      get() = _builder.phaseOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.resourcemodule.IntegerControlGGIO.copy(block: `openfmb.resourcemodule`.IntegerControlGGIOKt.Dsl.() -> kotlin.Unit): openfmb.resourcemodule.IntegerControlGGIO =
  `openfmb.resourcemodule`.IntegerControlGGIOKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.resourcemodule.IntegerControlGGIOOrBuilder.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
  get() = if (hasLogicalNode()) getLogicalNode() else null

public val openfmb.resourcemodule.IntegerControlGGIOOrBuilder.iSCSOOrNull: openfmb.commonmodule.ControlINC?
  get() = if (hasISCSO()) getISCSO() else null

public val openfmb.resourcemodule.IntegerControlGGIOOrBuilder.phaseOrNull: openfmb.commonmodule.Optional_PhaseCodeKind?
  get() = if (hasPhase()) getPhase() else null

