//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializeenergyConsumer")
public inline fun energyConsumer(block: openfmb.commonmodule.EnergyConsumerKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.EnergyConsumer =
  openfmb.commonmodule.EnergyConsumerKt.Dsl._create(openfmb.commonmodule.EnergyConsumer.newBuilder()).apply { block() }._build()
public object EnergyConsumerKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.EnergyConsumer.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.EnergyConsumer.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.EnergyConsumer = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var conductingEquipment: openfmb.commonmodule.ConductingEquipment
      @JvmName("getConductingEquipment")
      get() = _builder.getConductingEquipment()
      @JvmName("setConductingEquipment")
      set(value) {
        _builder.setConductingEquipment(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearConductingEquipment() {
      _builder.clearConductingEquipment()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the conductingEquipment field is set.
     */
    public fun hasConductingEquipment(): kotlin.Boolean {
      return _builder.hasConductingEquipment()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.google.protobuf.StringValue operatingLimit = 2;</code>
     */
    public var operatingLimit: com.google.protobuf.StringValue
      @JvmName("getOperatingLimit")
      get() = _builder.getOperatingLimit()
      @JvmName("setOperatingLimit")
      set(value) {
        _builder.setOperatingLimit(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.google.protobuf.StringValue operatingLimit = 2;</code>
     */
    public fun clearOperatingLimit() {
      _builder.clearOperatingLimit()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.google.protobuf.StringValue operatingLimit = 2;</code>
     * @return Whether the operatingLimit field is set.
     */
    public fun hasOperatingLimit(): kotlin.Boolean {
      return _builder.hasOperatingLimit()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.EnergyConsumer.copy(block: openfmb.commonmodule.EnergyConsumerKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.EnergyConsumer =
  openfmb.commonmodule.EnergyConsumerKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.EnergyConsumerOrBuilder.conductingEquipmentOrNull: openfmb.commonmodule.ConductingEquipment?
  get() = if (hasConductingEquipment()) getConductingEquipment() else null

public val openfmb.commonmodule.EnergyConsumerOrBuilder.operatingLimitOrNull: com.google.protobuf.StringValue?
  get() = if (hasOperatingLimit()) getOperatingLimit() else null

