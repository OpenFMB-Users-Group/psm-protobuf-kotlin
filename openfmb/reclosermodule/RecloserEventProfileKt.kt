// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: reclosermodule/reclosermodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.reclosermodule;

@kotlin.jvm.JvmName("-initializerecloserEventProfile")
public inline fun recloserEventProfile(block: openfmb.reclosermodule.RecloserEventProfileKt.Dsl.() -> kotlin.Unit): openfmb.reclosermodule.RecloserEventProfile =
  openfmb.reclosermodule.RecloserEventProfileKt.Dsl._create(openfmb.reclosermodule.RecloserEventProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Recloser event profile
 * ```
 *
 * Protobuf type `reclosermodule.RecloserEventProfile`
 */
public object RecloserEventProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.reclosermodule.RecloserEventProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.reclosermodule.RecloserEventProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.reclosermodule.RecloserEventProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var eventMessageInfo: openfmb.commonmodule.EventMessageInfo
      @kotlin.jvm.JvmName("getEventMessageInfo")
        get() = _builder.eventMessageInfo
      @kotlin.jvm.JvmName("setEventMessageInfo")
        set(value) {
        _builder.eventMessageInfo = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearEventMessageInfo() {
      _builder.clearEventMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the eventMessageInfo field is set.
     */
    public fun hasEventMessageInfo(): kotlin.Boolean {
      return _builder.hasEventMessageInfo()
    }

    public val RecloserEventProfileKt.Dsl.eventMessageInfoOrNull: openfmb.commonmodule.EventMessageInfo?
      get() = _builder.eventMessageInfoOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.reclosermodule.Recloser recloser = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var recloser: openfmb.reclosermodule.Recloser
      @kotlin.jvm.JvmName("getRecloser")
        get() = _builder.recloser
      @kotlin.jvm.JvmName("setRecloser")
        set(value) {
        _builder.recloser = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.reclosermodule.Recloser recloser = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearRecloser() {
      _builder.clearRecloser()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.reclosermodule.Recloser recloser = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the recloser field is set.
     */
    public fun hasRecloser(): kotlin.Boolean {
      return _builder.hasRecloser()
    }

    public val RecloserEventProfileKt.Dsl.recloserOrNull: openfmb.reclosermodule.Recloser?
      get() = _builder.recloserOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.reclosermodule.RecloserEvent recloserEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var recloserEvent: openfmb.reclosermodule.RecloserEvent
      @kotlin.jvm.JvmName("getRecloserEvent")
        get() = _builder.recloserEvent
      @kotlin.jvm.JvmName("setRecloserEvent")
        set(value) {
        _builder.recloserEvent = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.reclosermodule.RecloserEvent recloserEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearRecloserEvent() {
      _builder.clearRecloserEvent()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.reclosermodule.RecloserEvent recloserEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the recloserEvent field is set.
     */
    public fun hasRecloserEvent(): kotlin.Boolean {
      return _builder.hasRecloserEvent()
    }

    public val RecloserEventProfileKt.Dsl.recloserEventOrNull: openfmb.reclosermodule.RecloserEvent?
      get() = _builder.recloserEventOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.reclosermodule.RecloserEventProfile.copy(block: `openfmb.reclosermodule`.RecloserEventProfileKt.Dsl.() -> kotlin.Unit): openfmb.reclosermodule.RecloserEventProfile =
  `openfmb.reclosermodule`.RecloserEventProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.reclosermodule.RecloserEventProfileOrBuilder.eventMessageInfoOrNull: openfmb.commonmodule.EventMessageInfo?
  get() = if (hasEventMessageInfo()) getEventMessageInfo() else null

public val openfmb.reclosermodule.RecloserEventProfileOrBuilder.recloserOrNull: openfmb.reclosermodule.Recloser?
  get() = if (hasRecloser()) getRecloser() else null

public val openfmb.reclosermodule.RecloserEventProfileOrBuilder.recloserEventOrNull: openfmb.reclosermodule.RecloserEvent?
  get() = if (hasRecloserEvent()) getRecloserEvent() else null

