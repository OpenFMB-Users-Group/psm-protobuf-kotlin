//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializeactivePower")
public inline fun activePower(block: openfmb.commonmodule.ActivePowerKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ActivePower =
  openfmb.commonmodule.ActivePowerKt.Dsl._create(openfmb.commonmodule.ActivePower.newBuilder()).apply { block() }._build()
public object ActivePowerKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.ActivePower.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.ActivePower.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.ActivePower = _builder.build()

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.Optional_UnitMultiplierKind multiplier = 1;</code>
     */
    public var multiplier: openfmb.commonmodule.Optional_UnitMultiplierKind
      @JvmName("getMultiplier")
      get() = _builder.getMultiplier()
      @JvmName("setMultiplier")
      set(value) {
        _builder.setMultiplier(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.Optional_UnitMultiplierKind multiplier = 1;</code>
     */
    public fun clearMultiplier() {
      _builder.clearMultiplier()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.Optional_UnitMultiplierKind multiplier = 1;</code>
     * @return Whether the multiplier field is set.
     */
    public fun hasMultiplier(): kotlin.Boolean {
      return _builder.hasMultiplier()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.Optional_UnitSymbolKind unit = 2;</code>
     */
    public var unit: openfmb.commonmodule.Optional_UnitSymbolKind
      @JvmName("getUnit")
      get() = _builder.getUnit()
      @JvmName("setUnit")
      set(value) {
        _builder.setUnit(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.Optional_UnitSymbolKind unit = 2;</code>
     */
    public fun clearUnit() {
      _builder.clearUnit()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.Optional_UnitSymbolKind unit = 2;</code>
     * @return Whether the unit field is set.
     */
    public fun hasUnit(): kotlin.Boolean {
      return _builder.hasUnit()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.google.protobuf.FloatValue value = 3;</code>
     */
    public var value: com.google.protobuf.FloatValue
      @JvmName("getValue")
      get() = _builder.getValue()
      @JvmName("setValue")
      set(value) {
        _builder.setValue(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.google.protobuf.FloatValue value = 3;</code>
     */
    public fun clearValue() {
      _builder.clearValue()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.google.protobuf.FloatValue value = 3;</code>
     * @return Whether the value field is set.
     */
    public fun hasValue(): kotlin.Boolean {
      return _builder.hasValue()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.ActivePower.copy(block: openfmb.commonmodule.ActivePowerKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ActivePower =
  openfmb.commonmodule.ActivePowerKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val openfmb.commonmodule.ActivePowerOrBuilder.multiplierOrNull: openfmb.commonmodule.Optional_UnitMultiplierKind?
  get() = if (hasMultiplier()) getMultiplier() else null

val openfmb.commonmodule.ActivePowerOrBuilder.unitOrNull: openfmb.commonmodule.Optional_UnitSymbolKind?
  get() = if (hasUnit()) getUnit() else null

val openfmb.commonmodule.ActivePowerOrBuilder.valueOrNull: com.google.protobuf.FloatValue?
  get() = if (hasValue()) getValue() else null

