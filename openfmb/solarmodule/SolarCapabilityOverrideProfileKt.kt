//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: solarmodule/solarmodule.proto

package openfmb.solarmodule;

@kotlin.jvm.JvmName("-initializesolarCapabilityOverrideProfile")
public inline fun solarCapabilityOverrideProfile(block: openfmb.solarmodule.SolarCapabilityOverrideProfileKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarCapabilityOverrideProfile =
  openfmb.solarmodule.SolarCapabilityOverrideProfileKt.Dsl._create(openfmb.solarmodule.SolarCapabilityOverrideProfile.newBuilder()).apply { block() }._build()
public object SolarCapabilityOverrideProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.solarmodule.SolarCapabilityOverrideProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.solarmodule.SolarCapabilityOverrideProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.solarmodule.SolarCapabilityOverrideProfile = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.CapabilityOverrideMessageInfo capabilityOverrideMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var capabilityOverrideMessageInfo: openfmb.commonmodule.CapabilityOverrideMessageInfo
      @JvmName("getCapabilityOverrideMessageInfo")
      get() = _builder.getCapabilityOverrideMessageInfo()
      @JvmName("setCapabilityOverrideMessageInfo")
      set(value) {
        _builder.setCapabilityOverrideMessageInfo(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.CapabilityOverrideMessageInfo capabilityOverrideMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearCapabilityOverrideMessageInfo() {
      _builder.clearCapabilityOverrideMessageInfo()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.CapabilityOverrideMessageInfo capabilityOverrideMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the capabilityOverrideMessageInfo field is set.
     */
    public fun hasCapabilityOverrideMessageInfo(): kotlin.Boolean {
      return _builder.hasCapabilityOverrideMessageInfo()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.solarmodule.SolarCapabilityOverride solarCapabilityOverride = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var solarCapabilityOverride: openfmb.solarmodule.SolarCapabilityOverride
      @JvmName("getSolarCapabilityOverride")
      get() = _builder.getSolarCapabilityOverride()
      @JvmName("setSolarCapabilityOverride")
      set(value) {
        _builder.setSolarCapabilityOverride(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.solarmodule.SolarCapabilityOverride solarCapabilityOverride = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearSolarCapabilityOverride() {
      _builder.clearSolarCapabilityOverride()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.solarmodule.SolarCapabilityOverride solarCapabilityOverride = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @return Whether the solarCapabilityOverride field is set.
     */
    public fun hasSolarCapabilityOverride(): kotlin.Boolean {
      return _builder.hasSolarCapabilityOverride()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var solarInverter: openfmb.solarmodule.SolarInverter
      @JvmName("getSolarInverter")
      get() = _builder.getSolarInverter()
      @JvmName("setSolarInverter")
      set(value) {
        _builder.setSolarInverter(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearSolarInverter() {
      _builder.clearSolarInverter()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @return Whether the solarInverter field is set.
     */
    public fun hasSolarInverter(): kotlin.Boolean {
      return _builder.hasSolarInverter()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.solarmodule.SolarCapabilityOverrideProfile.copy(block: openfmb.solarmodule.SolarCapabilityOverrideProfileKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarCapabilityOverrideProfile =
  openfmb.solarmodule.SolarCapabilityOverrideProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val openfmb.solarmodule.SolarCapabilityOverrideProfileOrBuilder.capabilityOverrideMessageInfoOrNull: openfmb.commonmodule.CapabilityOverrideMessageInfo?
  get() = if (hasCapabilityOverrideMessageInfo()) getCapabilityOverrideMessageInfo() else null

val openfmb.solarmodule.SolarCapabilityOverrideProfileOrBuilder.solarCapabilityOverrideOrNull: openfmb.solarmodule.SolarCapabilityOverride?
  get() = if (hasSolarCapabilityOverride()) getSolarCapabilityOverride() else null

val openfmb.solarmodule.SolarCapabilityOverrideProfileOrBuilder.solarInverterOrNull: openfmb.solarmodule.SolarInverter?
  get() = if (hasSolarInverter()) getSolarInverter() else null

