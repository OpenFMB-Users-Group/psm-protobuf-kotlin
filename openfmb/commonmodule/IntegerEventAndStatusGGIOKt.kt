// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializeintegerEventAndStatusGGIO")
public inline fun integerEventAndStatusGGIO(block: openfmb.commonmodule.IntegerEventAndStatusGGIOKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.IntegerEventAndStatusGGIO =
  openfmb.commonmodule.IntegerEventAndStatusGGIOKt.Dsl._create(openfmb.commonmodule.IntegerEventAndStatusGGIO.newBuilder()).apply { block() }._build()
/**
 * ```
 * Status expressed in integer based on IEC61850 GGIO.
 * ```
 *
 * Protobuf type `commonmodule.IntegerEventAndStatusGGIO`
 */
public object IntegerEventAndStatusGGIOKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.IntegerEventAndStatusGGIO.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.IntegerEventAndStatusGGIO.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.IntegerEventAndStatusGGIO = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public var logicalNode: openfmb.commonmodule.LogicalNode
      @kotlin.jvm.JvmName("getLogicalNode")
        get() = _builder.logicalNode
      @kotlin.jvm.JvmName("setLogicalNode")
        set(value) {
        _builder.logicalNode = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearLogicalNode() {
      _builder.clearLogicalNode()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the logicalNode field is set.
     */
    public fun hasLogicalNode(): kotlin.Boolean {
      return _builder.hasLogicalNode()
    }

    public val IntegerEventAndStatusGGIOKt.Dsl.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
      get() = _builder.logicalNodeOrNull

    /**
     * ```
     * Generic integer status input <i>n</i>.
     * ```
     *
     * `.commonmodule.StatusINS IntIn = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var intIn: openfmb.commonmodule.StatusINS
      @kotlin.jvm.JvmName("getIntIn")
        get() = _builder.intIn
      @kotlin.jvm.JvmName("setIntIn")
        set(value) {
        _builder.intIn = value
      }
    /**
     * ```
     * Generic integer status input <i>n</i>.
     * ```
     *
     * `.commonmodule.StatusINS IntIn = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearIntIn() {
      _builder.clearIntIn()
    }
    /**
     * ```
     * Generic integer status input <i>n</i>.
     * ```
     *
     * `.commonmodule.StatusINS IntIn = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the intIn field is set.
     */
    public fun hasIntIn(): kotlin.Boolean {
      return _builder.hasIntIn()
    }

    public val IntegerEventAndStatusGGIOKt.Dsl.intInOrNull: openfmb.commonmodule.StatusINS?
      get() = _builder.intInOrNull

    /**
     * ```
     * Phase code
     * ```
     *
     * `.commonmodule.Optional_PhaseCodeKind Phase = 3;`
     */
    public var phase: openfmb.commonmodule.Optional_PhaseCodeKind
      @kotlin.jvm.JvmName("getPhase")
        get() = _builder.phase
      @kotlin.jvm.JvmName("setPhase")
        set(value) {
        _builder.phase = value
      }
    /**
     * ```
     * Phase code
     * ```
     *
     * `.commonmodule.Optional_PhaseCodeKind Phase = 3;`
     */
    public fun clearPhase() {
      _builder.clearPhase()
    }
    /**
     * ```
     * Phase code
     * ```
     *
     * `.commonmodule.Optional_PhaseCodeKind Phase = 3;`
     * @return Whether the phase field is set.
     */
    public fun hasPhase(): kotlin.Boolean {
      return _builder.hasPhase()
    }

    public val IntegerEventAndStatusGGIOKt.Dsl.phaseOrNull: openfmb.commonmodule.Optional_PhaseCodeKind?
      get() = _builder.phaseOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.IntegerEventAndStatusGGIO.copy(block: `openfmb.commonmodule`.IntegerEventAndStatusGGIOKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.IntegerEventAndStatusGGIO =
  `openfmb.commonmodule`.IntegerEventAndStatusGGIOKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.IntegerEventAndStatusGGIOOrBuilder.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
  get() = if (hasLogicalNode()) getLogicalNode() else null

public val openfmb.commonmodule.IntegerEventAndStatusGGIOOrBuilder.intInOrNull: openfmb.commonmodule.StatusINS?
  get() = if (hasIntIn()) getIntIn() else null

public val openfmb.commonmodule.IntegerEventAndStatusGGIOOrBuilder.phaseOrNull: openfmb.commonmodule.Optional_PhaseCodeKind?
  get() = if (hasPhase()) getPhase() else null

