// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializecapacityFirming")
public inline fun capacityFirming(block: openfmb.commonmodule.CapacityFirmingKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.CapacityFirming =
  openfmb.commonmodule.CapacityFirmingKt.Dsl._create(openfmb.commonmodule.CapacityFirming.newBuilder()).apply { block() }._build()
/**
 * ```
 * ESS inverter high level function to reduce (smooth) charging or discharging rate of change.
 * ```
 *
 * Protobuf type `commonmodule.CapacityFirming`
 */
public object CapacityFirmingKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.CapacityFirming.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.CapacityFirming.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.CapacityFirming = _builder.build()

    /**
     * ```
     * Control value (TRUE or FALSE)
     * ```
     *
     * `.google.protobuf.BoolValue capacityFirmingCtl = 1;`
     */
    public var capacityFirmingCtl: com.google.protobuf.BoolValue
      @kotlin.jvm.JvmName("getCapacityFirmingCtl")
        get() = _builder.capacityFirmingCtl
      @kotlin.jvm.JvmName("setCapacityFirmingCtl")
        set(value) {
        _builder.capacityFirmingCtl = value
      }
    /**
     * ```
     * Control value (TRUE or FALSE)
     * ```
     *
     * `.google.protobuf.BoolValue capacityFirmingCtl = 1;`
     */
    public fun clearCapacityFirmingCtl() {
      _builder.clearCapacityFirmingCtl()
    }
    /**
     * ```
     * Control value (TRUE or FALSE)
     * ```
     *
     * `.google.protobuf.BoolValue capacityFirmingCtl = 1;`
     * @return Whether the capacityFirmingCtl field is set.
     */
    public fun hasCapacityFirmingCtl(): kotlin.Boolean {
      return _builder.hasCapacityFirmingCtl()
    }

    public val CapacityFirmingKt.Dsl.capacityFirmingCtlOrNull: com.google.protobuf.BoolValue?
      get() = _builder.capacityFirmingCtlOrNull

    /**
     * ```
     * uint/1kW/min  If the supervised power increases at a rate higher that the rate defined by these
     * limits, the ESS will discharge/charge at an opposite dp/dt to reduce (smooth) the rate of change at
     * the PCC
     * ```
     *
     * `.google.protobuf.FloatValue limitNegative_dp_dt = 2;`
     */
    public var limitNegativeDpDt: com.google.protobuf.FloatValue
      @kotlin.jvm.JvmName("getLimitNegativeDpDt")
        get() = _builder.limitNegativeDpDt
      @kotlin.jvm.JvmName("setLimitNegativeDpDt")
        set(value) {
        _builder.limitNegativeDpDt = value
      }
    /**
     * ```
     * uint/1kW/min  If the supervised power increases at a rate higher that the rate defined by these
     * limits, the ESS will discharge/charge at an opposite dp/dt to reduce (smooth) the rate of change at
     * the PCC
     * ```
     *
     * `.google.protobuf.FloatValue limitNegative_dp_dt = 2;`
     */
    public fun clearLimitNegativeDpDt() {
      _builder.clearLimitNegativeDpDt()
    }
    /**
     * ```
     * uint/1kW/min  If the supervised power increases at a rate higher that the rate defined by these
     * limits, the ESS will discharge/charge at an opposite dp/dt to reduce (smooth) the rate of change at
     * the PCC
     * ```
     *
     * `.google.protobuf.FloatValue limitNegative_dp_dt = 2;`
     * @return Whether the limitNegativeDpDt field is set.
     */
    public fun hasLimitNegativeDpDt(): kotlin.Boolean {
      return _builder.hasLimitNegativeDpDt()
    }

    public val CapacityFirmingKt.Dsl.limitNegativeDpDtOrNull: com.google.protobuf.FloatValue?
      get() = _builder.limitNegativeDpDtOrNull

    /**
     * ```
     * uint/1kW/min  If the supervised power increases at a rate higher that the rate defined by these
     * limits, the ESS will discharge/charge at an opposite dp/dt to reduce (smooth) the rate of change at
     * the PCC
     * ```
     *
     * `.google.protobuf.FloatValue limitPositive_dp_dt = 3;`
     */
    public var limitPositiveDpDt: com.google.protobuf.FloatValue
      @kotlin.jvm.JvmName("getLimitPositiveDpDt")
        get() = _builder.limitPositiveDpDt
      @kotlin.jvm.JvmName("setLimitPositiveDpDt")
        set(value) {
        _builder.limitPositiveDpDt = value
      }
    /**
     * ```
     * uint/1kW/min  If the supervised power increases at a rate higher that the rate defined by these
     * limits, the ESS will discharge/charge at an opposite dp/dt to reduce (smooth) the rate of change at
     * the PCC
     * ```
     *
     * `.google.protobuf.FloatValue limitPositive_dp_dt = 3;`
     */
    public fun clearLimitPositiveDpDt() {
      _builder.clearLimitPositiveDpDt()
    }
    /**
     * ```
     * uint/1kW/min  If the supervised power increases at a rate higher that the rate defined by these
     * limits, the ESS will discharge/charge at an opposite dp/dt to reduce (smooth) the rate of change at
     * the PCC
     * ```
     *
     * `.google.protobuf.FloatValue limitPositive_dp_dt = 3;`
     * @return Whether the limitPositiveDpDt field is set.
     */
    public fun hasLimitPositiveDpDt(): kotlin.Boolean {
      return _builder.hasLimitPositiveDpDt()
    }

    public val CapacityFirmingKt.Dsl.limitPositiveDpDtOrNull: com.google.protobuf.FloatValue?
      get() = _builder.limitPositiveDpDtOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.CapacityFirming.copy(block: `openfmb.commonmodule`.CapacityFirmingKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.CapacityFirming =
  `openfmb.commonmodule`.CapacityFirmingKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.CapacityFirmingOrBuilder.capacityFirmingCtlOrNull: com.google.protobuf.BoolValue?
  get() = if (hasCapacityFirmingCtl()) getCapacityFirmingCtl() else null

public val openfmb.commonmodule.CapacityFirmingOrBuilder.limitNegativeDpDtOrNull: com.google.protobuf.FloatValue?
  get() = if (hasLimitNegativeDpDt()) getLimitNegativeDpDt() else null

public val openfmb.commonmodule.CapacityFirmingOrBuilder.limitPositiveDpDtOrNull: com.google.protobuf.FloatValue?
  get() = if (hasLimitPositiveDpDt()) getLimitPositiveDpDt() else null

