// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: solarmodule/solarmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.solarmodule;

@kotlin.jvm.JvmName("-initializesolarDiscreteControlProfile")
public inline fun solarDiscreteControlProfile(block: openfmb.solarmodule.SolarDiscreteControlProfileKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarDiscreteControlProfile =
  openfmb.solarmodule.SolarDiscreteControlProfileKt.Dsl._create(openfmb.solarmodule.SolarDiscreteControlProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Cap bank discrete control profile.  Instructs an end device (or an end device group) to perform
 * a specified action.
 * ```
 *
 * Protobuf type `solarmodule.SolarDiscreteControlProfile`
 */
public object SolarDiscreteControlProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.solarmodule.SolarDiscreteControlProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.solarmodule.SolarDiscreteControlProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.solarmodule.SolarDiscreteControlProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var controlMessageInfo: openfmb.commonmodule.ControlMessageInfo
      @JvmName("getControlMessageInfo")
      get() = _builder.getControlMessageInfo()
      @JvmName("setControlMessageInfo")
      set(value) {
        _builder.setControlMessageInfo(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearControlMessageInfo() {
      _builder.clearControlMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the controlMessageInfo field is set.
     */
    public fun hasControlMessageInfo(): kotlin.Boolean {
      return _builder.hasControlMessageInfo()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarDiscreteControl solarDiscreteControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var solarDiscreteControl: openfmb.solarmodule.SolarDiscreteControl
      @JvmName("getSolarDiscreteControl")
      get() = _builder.getSolarDiscreteControl()
      @JvmName("setSolarDiscreteControl")
      set(value) {
        _builder.setSolarDiscreteControl(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarDiscreteControl solarDiscreteControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearSolarDiscreteControl() {
      _builder.clearSolarDiscreteControl()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarDiscreteControl solarDiscreteControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the solarDiscreteControl field is set.
     */
    public fun hasSolarDiscreteControl(): kotlin.Boolean {
      return _builder.hasSolarDiscreteControl()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var solarInverter: openfmb.solarmodule.SolarInverter
      @JvmName("getSolarInverter")
      get() = _builder.getSolarInverter()
      @JvmName("setSolarInverter")
      set(value) {
        _builder.setSolarInverter(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearSolarInverter() {
      _builder.clearSolarInverter()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the solarInverter field is set.
     */
    public fun hasSolarInverter(): kotlin.Boolean {
      return _builder.hasSolarInverter()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.solarmodule.SolarDiscreteControlProfile.copy(block: openfmb.solarmodule.SolarDiscreteControlProfileKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarDiscreteControlProfile =
  openfmb.solarmodule.SolarDiscreteControlProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.solarmodule.SolarDiscreteControlProfileOrBuilder.controlMessageInfoOrNull: openfmb.commonmodule.ControlMessageInfo?
  get() = if (hasControlMessageInfo()) getControlMessageInfo() else null

public val openfmb.solarmodule.SolarDiscreteControlProfileOrBuilder.solarDiscreteControlOrNull: openfmb.solarmodule.SolarDiscreteControl?
  get() = if (hasSolarDiscreteControl()) getSolarDiscreteControl() else null

public val openfmb.solarmodule.SolarDiscreteControlProfileOrBuilder.solarInverterOrNull: openfmb.solarmodule.SolarInverter?
  get() = if (hasSolarInverter()) getSolarInverter() else null

