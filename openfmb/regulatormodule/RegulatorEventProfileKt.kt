//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: regulatormodule/regulatormodule.proto

package openfmb.regulatormodule;

@kotlin.jvm.JvmName("-initializeregulatorEventProfile")
public inline fun regulatorEventProfile(block: openfmb.regulatormodule.RegulatorEventProfileKt.Dsl.() -> kotlin.Unit): openfmb.regulatormodule.RegulatorEventProfile =
  openfmb.regulatormodule.RegulatorEventProfileKt.Dsl._create(openfmb.regulatormodule.RegulatorEventProfile.newBuilder()).apply { block() }._build()
public object RegulatorEventProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.regulatormodule.RegulatorEventProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.regulatormodule.RegulatorEventProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.regulatormodule.RegulatorEventProfile = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var eventMessageInfo: openfmb.commonmodule.EventMessageInfo
      @JvmName("getEventMessageInfo")
      get() = _builder.getEventMessageInfo()
      @JvmName("setEventMessageInfo")
      set(value) {
        _builder.setEventMessageInfo(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearEventMessageInfo() {
      _builder.clearEventMessageInfo()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the eventMessageInfo field is set.
     */
    public fun hasEventMessageInfo(): kotlin.Boolean {
      return _builder.hasEventMessageInfo()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.regulatormodule.RegulatorEvent regulatorEvent = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var regulatorEvent: openfmb.regulatormodule.RegulatorEvent
      @JvmName("getRegulatorEvent")
      get() = _builder.getRegulatorEvent()
      @JvmName("setRegulatorEvent")
      set(value) {
        _builder.setRegulatorEvent(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.regulatormodule.RegulatorEvent regulatorEvent = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearRegulatorEvent() {
      _builder.clearRegulatorEvent()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.regulatormodule.RegulatorEvent regulatorEvent = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @return Whether the regulatorEvent field is set.
     */
    public fun hasRegulatorEvent(): kotlin.Boolean {
      return _builder.hasRegulatorEvent()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var regulatorSystem: openfmb.regulatormodule.RegulatorSystem
      @JvmName("getRegulatorSystem")
      get() = _builder.getRegulatorSystem()
      @JvmName("setRegulatorSystem")
      set(value) {
        _builder.setRegulatorSystem(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearRegulatorSystem() {
      _builder.clearRegulatorSystem()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @return Whether the regulatorSystem field is set.
     */
    public fun hasRegulatorSystem(): kotlin.Boolean {
      return _builder.hasRegulatorSystem()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.regulatormodule.RegulatorEventProfile.copy(block: openfmb.regulatormodule.RegulatorEventProfileKt.Dsl.() -> kotlin.Unit): openfmb.regulatormodule.RegulatorEventProfile =
  openfmb.regulatormodule.RegulatorEventProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val openfmb.regulatormodule.RegulatorEventProfileOrBuilder.eventMessageInfoOrNull: openfmb.commonmodule.EventMessageInfo?
  get() = if (hasEventMessageInfo()) getEventMessageInfo() else null

val openfmb.regulatormodule.RegulatorEventProfileOrBuilder.regulatorEventOrNull: openfmb.regulatormodule.RegulatorEvent?
  get() = if (hasRegulatorEvent()) getRegulatorEvent() else null

val openfmb.regulatormodule.RegulatorEventProfileOrBuilder.regulatorSystemOrNull: openfmb.regulatormodule.RegulatorSystem?
  get() = if (hasRegulatorSystem()) getRegulatorSystem() else null

