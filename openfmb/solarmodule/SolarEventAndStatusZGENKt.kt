//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: solarmodule/solarmodule.proto

package openfmb.solarmodule;

@kotlin.jvm.JvmName("-initializesolarEventAndStatusZGEN")
public inline fun solarEventAndStatusZGEN(block: openfmb.solarmodule.SolarEventAndStatusZGENKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarEventAndStatusZGEN =
  openfmb.solarmodule.SolarEventAndStatusZGENKt.Dsl._create(openfmb.solarmodule.SolarEventAndStatusZGEN.newBuilder()).apply { block() }._build()
public object SolarEventAndStatusZGENKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.solarmodule.SolarEventAndStatusZGEN.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.solarmodule.SolarEventAndStatusZGEN.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.solarmodule.SolarEventAndStatusZGEN = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var logicalNodeForEventAndStatus: openfmb.commonmodule.LogicalNodeForEventAndStatus
      @JvmName("getLogicalNodeForEventAndStatus")
      get() = _builder.getLogicalNodeForEventAndStatus()
      @JvmName("setLogicalNodeForEventAndStatus")
      set(value) {
        _builder.setLogicalNodeForEventAndStatus(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearLogicalNodeForEventAndStatus() {
      _builder.clearLogicalNodeForEventAndStatus()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the logicalNodeForEventAndStatus field is set.
     */
    public fun hasLogicalNodeForEventAndStatus(): kotlin.Boolean {
      return _builder.hasLogicalNodeForEventAndStatus()
    }

    /**
     * <pre>
     * DC Power On/Off Status; True = DC power on
     * </pre>
     *
     * <code>.commonmodule.StatusSPS AuxPwrSt = 2;</code>
     */
    public var auxPwrSt: openfmb.commonmodule.StatusSPS
      @JvmName("getAuxPwrSt")
      get() = _builder.getAuxPwrSt()
      @JvmName("setAuxPwrSt")
      set(value) {
        _builder.setAuxPwrSt(value)
      }
    /**
     * <pre>
     * DC Power On/Off Status; True = DC power on
     * </pre>
     *
     * <code>.commonmodule.StatusSPS AuxPwrSt = 2;</code>
     */
    public fun clearAuxPwrSt() {
      _builder.clearAuxPwrSt()
    }
    /**
     * <pre>
     * DC Power On/Off Status; True = DC power on
     * </pre>
     *
     * <code>.commonmodule.StatusSPS AuxPwrSt = 2;</code>
     * @return Whether the auxPwrSt field is set.
     */
    public fun hasAuxPwrSt(): kotlin.Boolean {
      return _builder.hasAuxPwrSt()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ENS_DynamicTestKind DynamicTest = 3;</code>
     */
    public var dynamicTest: openfmb.commonmodule.ENS_DynamicTestKind
      @JvmName("getDynamicTest")
      get() = _builder.getDynamicTest()
      @JvmName("setDynamicTest")
      set(value) {
        _builder.setDynamicTest(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ENS_DynamicTestKind DynamicTest = 3;</code>
     */
    public fun clearDynamicTest() {
      _builder.clearDynamicTest()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ENS_DynamicTestKind DynamicTest = 3;</code>
     * @return Whether the dynamicTest field is set.
     */
    public fun hasDynamicTest(): kotlin.Boolean {
      return _builder.hasDynamicTest()
    }

    /**
     * <pre>
     * Emergency stop
     * </pre>
     *
     * <code>.commonmodule.StatusSPS EmgStop = 4;</code>
     */
    public var emgStop: openfmb.commonmodule.StatusSPS
      @JvmName("getEmgStop")
      get() = _builder.getEmgStop()
      @JvmName("setEmgStop")
      set(value) {
        _builder.setEmgStop(value)
      }
    /**
     * <pre>
     * Emergency stop
     * </pre>
     *
     * <code>.commonmodule.StatusSPS EmgStop = 4;</code>
     */
    public fun clearEmgStop() {
      _builder.clearEmgStop()
    }
    /**
     * <pre>
     * Emergency stop
     * </pre>
     *
     * <code>.commonmodule.StatusSPS EmgStop = 4;</code>
     * @return Whether the emgStop field is set.
     */
    public fun hasEmgStop(): kotlin.Boolean {
      return _builder.hasEmgStop()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.solarmodule.SolarPointStatus PointStatus = 5;</code>
     */
    public var pointStatus: openfmb.solarmodule.SolarPointStatus
      @JvmName("getPointStatus")
      get() = _builder.getPointStatus()
      @JvmName("setPointStatus")
      set(value) {
        _builder.setPointStatus(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.solarmodule.SolarPointStatus PointStatus = 5;</code>
     */
    public fun clearPointStatus() {
      _builder.clearPointStatus()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.solarmodule.SolarPointStatus PointStatus = 5;</code>
     * @return Whether the pointStatus field is set.
     */
    public fun hasPointStatus(): kotlin.Boolean {
      return _builder.hasPointStatus()
    }

    /**
     * <pre>
     * DC Power On/Off Status; True = DC power on
     * </pre>
     *
     * <code>.commonmodule.Optional_AlrmKind Alrm = 6;</code>
     */
    public var alrm: openfmb.commonmodule.Optional_AlrmKind
      @JvmName("getAlrm")
      get() = _builder.getAlrm()
      @JvmName("setAlrm")
      set(value) {
        _builder.setAlrm(value)
      }
    /**
     * <pre>
     * DC Power On/Off Status; True = DC power on
     * </pre>
     *
     * <code>.commonmodule.Optional_AlrmKind Alrm = 6;</code>
     */
    public fun clearAlrm() {
      _builder.clearAlrm()
    }
    /**
     * <pre>
     * DC Power On/Off Status; True = DC power on
     * </pre>
     *
     * <code>.commonmodule.Optional_AlrmKind Alrm = 6;</code>
     * @return Whether the alrm field is set.
     */
    public fun hasAlrm(): kotlin.Boolean {
      return _builder.hasAlrm()
    }

    /**
     * <pre>
     * Emergency stop
     * </pre>
     *
     * <code>.commonmodule.StatusSPS GnSynSt = 7;</code>
     */
    public var gnSynSt: openfmb.commonmodule.StatusSPS
      @JvmName("getGnSynSt")
      get() = _builder.getGnSynSt()
      @JvmName("setGnSynSt")
      set(value) {
        _builder.setGnSynSt(value)
      }
    /**
     * <pre>
     * Emergency stop
     * </pre>
     *
     * <code>.commonmodule.StatusSPS GnSynSt = 7;</code>
     */
    public fun clearGnSynSt() {
      _builder.clearGnSynSt()
    }
    /**
     * <pre>
     * Emergency stop
     * </pre>
     *
     * <code>.commonmodule.StatusSPS GnSynSt = 7;</code>
     * @return Whether the gnSynSt field is set.
     */
    public fun hasGnSynSt(): kotlin.Boolean {
      return _builder.hasGnSynSt()
    }

    /**
     * <pre>
     * DC Power On/Off Status; True = DC power on
     * </pre>
     *
     * <code>.commonmodule.Optional_GridConnectionStateKind GridConnectionState = 8;</code>
     */
    public var gridConnectionState: openfmb.commonmodule.Optional_GridConnectionStateKind
      @JvmName("getGridConnectionState")
      get() = _builder.getGridConnectionState()
      @JvmName("setGridConnectionState")
      set(value) {
        _builder.setGridConnectionState(value)
      }
    /**
     * <pre>
     * DC Power On/Off Status; True = DC power on
     * </pre>
     *
     * <code>.commonmodule.Optional_GridConnectionStateKind GridConnectionState = 8;</code>
     */
    public fun clearGridConnectionState() {
      _builder.clearGridConnectionState()
    }
    /**
     * <pre>
     * DC Power On/Off Status; True = DC power on
     * </pre>
     *
     * <code>.commonmodule.Optional_GridConnectionStateKind GridConnectionState = 8;</code>
     * @return Whether the gridConnectionState field is set.
     */
    public fun hasGridConnectionState(): kotlin.Boolean {
      return _builder.hasGridConnectionState()
    }

    /**
     * <pre>
     * DC Power On/Off Status; True = DC power on
     * </pre>
     *
     * <code>.google.protobuf.StringValue ManAlrmInfo = 9;</code>
     */
    public var manAlrmInfo: com.google.protobuf.StringValue
      @JvmName("getManAlrmInfo")
      get() = _builder.getManAlrmInfo()
      @JvmName("setManAlrmInfo")
      set(value) {
        _builder.setManAlrmInfo(value)
      }
    /**
     * <pre>
     * DC Power On/Off Status; True = DC power on
     * </pre>
     *
     * <code>.google.protobuf.StringValue ManAlrmInfo = 9;</code>
     */
    public fun clearManAlrmInfo() {
      _builder.clearManAlrmInfo()
    }
    /**
     * <pre>
     * DC Power On/Off Status; True = DC power on
     * </pre>
     *
     * <code>.google.protobuf.StringValue ManAlrmInfo = 9;</code>
     * @return Whether the manAlrmInfo field is set.
     */
    public fun hasManAlrmInfo(): kotlin.Boolean {
      return _builder.hasManAlrmInfo()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.Optional_OperatingStateKind OperatingState = 10;</code>
     */
    public var operatingState: openfmb.commonmodule.Optional_OperatingStateKind
      @JvmName("getOperatingState")
      get() = _builder.getOperatingState()
      @JvmName("setOperatingState")
      set(value) {
        _builder.setOperatingState(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.Optional_OperatingStateKind OperatingState = 10;</code>
     */
    public fun clearOperatingState() {
      _builder.clearOperatingState()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.Optional_OperatingStateKind OperatingState = 10;</code>
     * @return Whether the operatingState field is set.
     */
    public fun hasOperatingState(): kotlin.Boolean {
      return _builder.hasOperatingState()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.solarmodule.SolarEventAndStatusZGEN.copy(block: openfmb.solarmodule.SolarEventAndStatusZGENKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarEventAndStatusZGEN =
  openfmb.solarmodule.SolarEventAndStatusZGENKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.solarmodule.SolarEventAndStatusZGENOrBuilder.logicalNodeForEventAndStatusOrNull: openfmb.commonmodule.LogicalNodeForEventAndStatus?
  get() = if (hasLogicalNodeForEventAndStatus()) getLogicalNodeForEventAndStatus() else null

public val openfmb.solarmodule.SolarEventAndStatusZGENOrBuilder.auxPwrStOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasAuxPwrSt()) getAuxPwrSt() else null

public val openfmb.solarmodule.SolarEventAndStatusZGENOrBuilder.dynamicTestOrNull: openfmb.commonmodule.ENS_DynamicTestKind?
  get() = if (hasDynamicTest()) getDynamicTest() else null

public val openfmb.solarmodule.SolarEventAndStatusZGENOrBuilder.emgStopOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasEmgStop()) getEmgStop() else null

public val openfmb.solarmodule.SolarEventAndStatusZGENOrBuilder.pointStatusOrNull: openfmb.solarmodule.SolarPointStatus?
  get() = if (hasPointStatus()) getPointStatus() else null

public val openfmb.solarmodule.SolarEventAndStatusZGENOrBuilder.alrmOrNull: openfmb.commonmodule.Optional_AlrmKind?
  get() = if (hasAlrm()) getAlrm() else null

public val openfmb.solarmodule.SolarEventAndStatusZGENOrBuilder.gnSynStOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasGnSynSt()) getGnSynSt() else null

public val openfmb.solarmodule.SolarEventAndStatusZGENOrBuilder.gridConnectionStateOrNull: openfmb.commonmodule.Optional_GridConnectionStateKind?
  get() = if (hasGridConnectionState()) getGridConnectionState() else null

public val openfmb.solarmodule.SolarEventAndStatusZGENOrBuilder.manAlrmInfoOrNull: com.google.protobuf.StringValue?
  get() = if (hasManAlrmInfo()) getManAlrmInfo() else null

public val openfmb.solarmodule.SolarEventAndStatusZGENOrBuilder.operatingStateOrNull: openfmb.commonmodule.Optional_OperatingStateKind?
  get() = if (hasOperatingState()) getOperatingState() else null

