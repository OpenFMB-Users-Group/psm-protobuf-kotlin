//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializeaCD")
public inline fun aCD(block: openfmb.commonmodule.ACDKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ACD =
  openfmb.commonmodule.ACDKt.Dsl._create(openfmb.commonmodule.ACD.newBuilder()).apply { block() }._build()
public object ACDKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.ACD.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.ACD.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.ACD = _builder.build()

    /**
     * <pre>
     * General direction of the fault. If the faults of individual phases have different directions,
     * this attribute shall be set to 'dirGeneral'='both'.
     * </pre>
     *
     * <code>.commonmodule.FaultDirectionKind dirGeneral = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var dirGeneral: openfmb.commonmodule.FaultDirectionKind
      @JvmName("getDirGeneral")
      get() = _builder.getDirGeneral()
      @JvmName("setDirGeneral")
      set(value) {
        _builder.setDirGeneral(value)
      }
    /**
     * <pre>
     * General direction of the fault. If the faults of individual phases have different directions,
     * this attribute shall be set to 'dirGeneral'='both'.
     * </pre>
     *
     * <code>.commonmodule.FaultDirectionKind dirGeneral = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearDirGeneral() {
      _builder.clearDirGeneral()
    }

    /**
     * <pre>
     * Direction of the fault for earth current.
     * </pre>
     *
     * <code>.commonmodule.Optional_PhaseFaultDirectionKind dirNeut = 2;</code>
     */
    public var dirNeut: openfmb.commonmodule.Optional_PhaseFaultDirectionKind
      @JvmName("getDirNeut")
      get() = _builder.getDirNeut()
      @JvmName("setDirNeut")
      set(value) {
        _builder.setDirNeut(value)
      }
    /**
     * <pre>
     * Direction of the fault for earth current.
     * </pre>
     *
     * <code>.commonmodule.Optional_PhaseFaultDirectionKind dirNeut = 2;</code>
     */
    public fun clearDirNeut() {
      _builder.clearDirNeut()
    }
    /**
     * <pre>
     * Direction of the fault for earth current.
     * </pre>
     *
     * <code>.commonmodule.Optional_PhaseFaultDirectionKind dirNeut = 2;</code>
     * @return Whether the dirNeut field is set.
     */
    public fun hasDirNeut(): kotlin.Boolean {
      return _builder.hasDirNeut()
    }

    /**
     * <pre>
     * Direction of the fault for phase A.
     * </pre>
     *
     * <code>.commonmodule.Optional_PhaseFaultDirectionKind dirPhsA = 3;</code>
     */
    public var dirPhsA: openfmb.commonmodule.Optional_PhaseFaultDirectionKind
      @JvmName("getDirPhsA")
      get() = _builder.getDirPhsA()
      @JvmName("setDirPhsA")
      set(value) {
        _builder.setDirPhsA(value)
      }
    /**
     * <pre>
     * Direction of the fault for phase A.
     * </pre>
     *
     * <code>.commonmodule.Optional_PhaseFaultDirectionKind dirPhsA = 3;</code>
     */
    public fun clearDirPhsA() {
      _builder.clearDirPhsA()
    }
    /**
     * <pre>
     * Direction of the fault for phase A.
     * </pre>
     *
     * <code>.commonmodule.Optional_PhaseFaultDirectionKind dirPhsA = 3;</code>
     * @return Whether the dirPhsA field is set.
     */
    public fun hasDirPhsA(): kotlin.Boolean {
      return _builder.hasDirPhsA()
    }

    /**
     * <pre>
     * Direction of the fault for phase B.
     * </pre>
     *
     * <code>.commonmodule.Optional_PhaseFaultDirectionKind dirPhsB = 4;</code>
     */
    public var dirPhsB: openfmb.commonmodule.Optional_PhaseFaultDirectionKind
      @JvmName("getDirPhsB")
      get() = _builder.getDirPhsB()
      @JvmName("setDirPhsB")
      set(value) {
        _builder.setDirPhsB(value)
      }
    /**
     * <pre>
     * Direction of the fault for phase B.
     * </pre>
     *
     * <code>.commonmodule.Optional_PhaseFaultDirectionKind dirPhsB = 4;</code>
     */
    public fun clearDirPhsB() {
      _builder.clearDirPhsB()
    }
    /**
     * <pre>
     * Direction of the fault for phase B.
     * </pre>
     *
     * <code>.commonmodule.Optional_PhaseFaultDirectionKind dirPhsB = 4;</code>
     * @return Whether the dirPhsB field is set.
     */
    public fun hasDirPhsB(): kotlin.Boolean {
      return _builder.hasDirPhsB()
    }

    /**
     * <pre>
     * Direction of the fault for phase C.
     * </pre>
     *
     * <code>.commonmodule.Optional_PhaseFaultDirectionKind dirPhsC = 5;</code>
     */
    public var dirPhsC: openfmb.commonmodule.Optional_PhaseFaultDirectionKind
      @JvmName("getDirPhsC")
      get() = _builder.getDirPhsC()
      @JvmName("setDirPhsC")
      set(value) {
        _builder.setDirPhsC(value)
      }
    /**
     * <pre>
     * Direction of the fault for phase C.
     * </pre>
     *
     * <code>.commonmodule.Optional_PhaseFaultDirectionKind dirPhsC = 5;</code>
     */
    public fun clearDirPhsC() {
      _builder.clearDirPhsC()
    }
    /**
     * <pre>
     * Direction of the fault for phase C.
     * </pre>
     *
     * <code>.commonmodule.Optional_PhaseFaultDirectionKind dirPhsC = 5;</code>
     * @return Whether the dirPhsC field is set.
     */
    public fun hasDirPhsC(): kotlin.Boolean {
      return _builder.hasDirPhsC()
    }

    /**
     * <pre>
     * General indication of a protection activation (e.g. by the fault). Depending on the function,
     * 'general' may or may not be resulting from the phase attributes (phsA', 'phsB', 'phsC', 'neut').
     * </pre>
     *
     * <code>bool general = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var general: kotlin.Boolean
      @JvmName("getGeneral")
      get() = _builder.getGeneral()
      @JvmName("setGeneral")
      set(value) {
        _builder.setGeneral(value)
      }
    /**
     * <pre>
     * General indication of a protection activation (e.g. by the fault). Depending on the function,
     * 'general' may or may not be resulting from the phase attributes (phsA', 'phsB', 'phsC', 'neut').
     * </pre>
     *
     * <code>bool general = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearGeneral() {
      _builder.clearGeneral()
    }

    /**
     * <pre>
     * See 'ACT.neut'.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue neut = 7;</code>
     */
    public var neut: com.google.protobuf.BoolValue
      @JvmName("getNeut")
      get() = _builder.getNeut()
      @JvmName("setNeut")
      set(value) {
        _builder.setNeut(value)
      }
    /**
     * <pre>
     * See 'ACT.neut'.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue neut = 7;</code>
     */
    public fun clearNeut() {
      _builder.clearNeut()
    }
    /**
     * <pre>
     * See 'ACT.neut'.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue neut = 7;</code>
     * @return Whether the neut field is set.
     */
    public fun hasNeut(): kotlin.Boolean {
      return _builder.hasNeut()
    }

    /**
     * <pre>
     * Value true indicates a trip or a start event of phase A.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue phsA = 8;</code>
     */
    public var phsA: com.google.protobuf.BoolValue
      @JvmName("getPhsA")
      get() = _builder.getPhsA()
      @JvmName("setPhsA")
      set(value) {
        _builder.setPhsA(value)
      }
    /**
     * <pre>
     * Value true indicates a trip or a start event of phase A.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue phsA = 8;</code>
     */
    public fun clearPhsA() {
      _builder.clearPhsA()
    }
    /**
     * <pre>
     * Value true indicates a trip or a start event of phase A.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue phsA = 8;</code>
     * @return Whether the phsA field is set.
     */
    public fun hasPhsA(): kotlin.Boolean {
      return _builder.hasPhsA()
    }

    /**
     * <pre>
     * Value true indicates a trip or a start event of phase B.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue phsB = 9;</code>
     */
    public var phsB: com.google.protobuf.BoolValue
      @JvmName("getPhsB")
      get() = _builder.getPhsB()
      @JvmName("setPhsB")
      set(value) {
        _builder.setPhsB(value)
      }
    /**
     * <pre>
     * Value true indicates a trip or a start event of phase B.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue phsB = 9;</code>
     */
    public fun clearPhsB() {
      _builder.clearPhsB()
    }
    /**
     * <pre>
     * Value true indicates a trip or a start event of phase B.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue phsB = 9;</code>
     * @return Whether the phsB field is set.
     */
    public fun hasPhsB(): kotlin.Boolean {
      return _builder.hasPhsB()
    }

    /**
     * <pre>
     * Value true indicates a trip or a start event of phase C.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue phsC = 10;</code>
     */
    public var phsC: com.google.protobuf.BoolValue
      @JvmName("getPhsC")
      get() = _builder.getPhsC()
      @JvmName("setPhsC")
      set(value) {
        _builder.setPhsC(value)
      }
    /**
     * <pre>
     * Value true indicates a trip or a start event of phase C.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue phsC = 10;</code>
     */
    public fun clearPhsC() {
      _builder.clearPhsC()
    }
    /**
     * <pre>
     * Value true indicates a trip or a start event of phase C.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue phsC = 10;</code>
     * @return Whether the phsC field is set.
     */
    public fun hasPhsC(): kotlin.Boolean {
      return _builder.hasPhsC()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.ACD.copy(block: openfmb.commonmodule.ACDKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ACD =
  openfmb.commonmodule.ACDKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.ACDOrBuilder.dirNeutOrNull: openfmb.commonmodule.Optional_PhaseFaultDirectionKind?
  get() = if (hasDirNeut()) getDirNeut() else null

public val openfmb.commonmodule.ACDOrBuilder.dirPhsAOrNull: openfmb.commonmodule.Optional_PhaseFaultDirectionKind?
  get() = if (hasDirPhsA()) getDirPhsA() else null

public val openfmb.commonmodule.ACDOrBuilder.dirPhsBOrNull: openfmb.commonmodule.Optional_PhaseFaultDirectionKind?
  get() = if (hasDirPhsB()) getDirPhsB() else null

public val openfmb.commonmodule.ACDOrBuilder.dirPhsCOrNull: openfmb.commonmodule.Optional_PhaseFaultDirectionKind?
  get() = if (hasDirPhsC()) getDirPhsC() else null

public val openfmb.commonmodule.ACDOrBuilder.neutOrNull: com.google.protobuf.BoolValue?
  get() = if (hasNeut()) getNeut() else null

public val openfmb.commonmodule.ACDOrBuilder.phsAOrNull: com.google.protobuf.BoolValue?
  get() = if (hasPhsA()) getPhsA() else null

public val openfmb.commonmodule.ACDOrBuilder.phsBOrNull: com.google.protobuf.BoolValue?
  get() = if (hasPhsB()) getPhsB() else null

public val openfmb.commonmodule.ACDOrBuilder.phsCOrNull: com.google.protobuf.BoolValue?
  get() = if (hasPhsC()) getPhsC() else null

