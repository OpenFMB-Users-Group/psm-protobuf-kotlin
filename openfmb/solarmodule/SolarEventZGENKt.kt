// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: solarmodule/solarmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.solarmodule;

@kotlin.jvm.JvmName("-initializesolarEventZGEN")
public inline fun solarEventZGEN(block: openfmb.solarmodule.SolarEventZGENKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarEventZGEN =
  openfmb.solarmodule.SolarEventZGENKt.Dsl._create(openfmb.solarmodule.SolarEventZGEN.newBuilder()).apply { block() }._build()
/**
 * ```
 * Specialized 61850 ZGEN class
 * ```
 *
 * Protobuf type `solarmodule.SolarEventZGEN`
 */
public object SolarEventZGENKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.solarmodule.SolarEventZGEN.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.solarmodule.SolarEventZGEN.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.solarmodule.SolarEventZGEN = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];`
     */
    public var solarEventAndStatusZGEN: openfmb.solarmodule.SolarEventAndStatusZGEN
      @JvmName("getSolarEventAndStatusZGEN")
      get() = _builder.getSolarEventAndStatusZGEN()
      @JvmName("setSolarEventAndStatusZGEN")
      set(value) {
        _builder.setSolarEventAndStatusZGEN(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearSolarEventAndStatusZGEN() {
      _builder.clearSolarEventAndStatusZGEN()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the solarEventAndStatusZGEN field is set.
     */
    public fun hasSolarEventAndStatusZGEN(): kotlin.Boolean {
      return _builder.hasSolarEventAndStatusZGEN()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ENG_GridConnectModeKind GriMod = 2;`
     */
    public var griMod: openfmb.commonmodule.ENG_GridConnectModeKind
      @JvmName("getGriMod")
      get() = _builder.getGriMod()
      @JvmName("setGriMod")
      set(value) {
        _builder.setGriMod(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ENG_GridConnectModeKind GriMod = 2;`
     */
    public fun clearGriMod() {
      _builder.clearGriMod()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ENG_GridConnectModeKind GriMod = 2;`
     * @return Whether the griMod field is set.
     */
    public fun hasGriMod(): kotlin.Boolean {
      return _builder.hasGriMod()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.solarmodule.SolarEventZGEN.copy(block: openfmb.solarmodule.SolarEventZGENKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarEventZGEN =
  openfmb.solarmodule.SolarEventZGENKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.solarmodule.SolarEventZGENOrBuilder.solarEventAndStatusZGENOrNull: openfmb.solarmodule.SolarEventAndStatusZGEN?
  get() = if (hasSolarEventAndStatusZGEN()) getSolarEventAndStatusZGEN() else null

public val openfmb.solarmodule.SolarEventZGENOrBuilder.griModOrNull: openfmb.commonmodule.ENG_GridConnectModeKind?
  get() = if (hasGriMod()) getGriMod() else null

