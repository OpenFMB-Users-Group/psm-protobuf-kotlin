// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializesourceCapabilityRatings")
public inline fun sourceCapabilityRatings(block: openfmb.commonmodule.SourceCapabilityRatingsKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.SourceCapabilityRatings =
  openfmb.commonmodule.SourceCapabilityRatingsKt.Dsl._create(openfmb.commonmodule.SourceCapabilityRatings.newBuilder()).apply { block() }._build()
/**
 * ```
 * Source capability ratings
 * ```
 *
 * Protobuf type `commonmodule.SourceCapabilityRatings`
 */
public object SourceCapabilityRatingsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.SourceCapabilityRatings.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.SourceCapabilityRatings.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.SourceCapabilityRatings = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public var logicalNode: openfmb.commonmodule.LogicalNode
      @kotlin.jvm.JvmName("getLogicalNode")
        get() = _builder.logicalNode
      @kotlin.jvm.JvmName("setLogicalNode")
        set(value) {
        _builder.logicalNode = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearLogicalNode() {
      _builder.clearLogicalNode()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the logicalNode field is set.
     */
    public fun hasLogicalNode(): kotlin.Boolean {
      return _builder.hasLogicalNode()
    }

    public val SourceCapabilityRatingsKt.Dsl.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
      get() = _builder.logicalNodeOrNull

    /**
     * ```
     * Abnormal Operating Performance Category  Text stating: “IEEE 1547:2018 Either “I”, “II”, or
     * “III” is stated for the Abnormal Category
     * ```
     *
     * `.commonmodule.AbnOpCatKind AbnOpCatRtg = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var abnOpCatRtg: openfmb.commonmodule.AbnOpCatKind
      @kotlin.jvm.JvmName("getAbnOpCatRtg")
        get() = _builder.abnOpCatRtg
      @kotlin.jvm.JvmName("setAbnOpCatRtg")
        set(value) {
        _builder.abnOpCatRtg = value
      }
    public var abnOpCatRtgValue: kotlin.Int
      @kotlin.jvm.JvmName("getAbnOpCatRtgValue")
        get() = _builder.abnOpCatRtgValue
      @kotlin.jvm.JvmName("setAbnOpCatRtgValue")
        set(value) {
        _builder.abnOpCatRtgValue = value
      }
    /**
     * ```
     * Abnormal Operating Performance Category  Text stating: “IEEE 1547:2018 Either “I”, “II”, or
     * “III” is stated for the Abnormal Category
     * ```
     *
     * `.commonmodule.AbnOpCatKind AbnOpCatRtg = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearAbnOpCatRtg() {
      _builder.clearAbnOpCatRtg()
    }

    /**
     * ```
     * Amp Maximum Rating  SunSpec has this field but not in IEEE1547
     * ```
     *
     * `.commonmodule.ASG AMaxRtg = 3;`
     */
    public var aMaxRtg: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getAMaxRtg")
        get() = _builder.aMaxRtg
      @kotlin.jvm.JvmName("setAMaxRtg")
        set(value) {
        _builder.aMaxRtg = value
      }
    /**
     * ```
     * Amp Maximum Rating  SunSpec has this field but not in IEEE1547
     * ```
     *
     * `.commonmodule.ASG AMaxRtg = 3;`
     */
    public fun clearAMaxRtg() {
      _builder.clearAMaxRtg()
    }
    /**
     * ```
     * Amp Maximum Rating  SunSpec has this field but not in IEEE1547
     * ```
     *
     * `.commonmodule.ASG AMaxRtg = 3;`
     * @return Whether the aMaxRtg field is set.
     */
    public fun hasAMaxRtg(): kotlin.Boolean {
      return _builder.hasAMaxRtg()
    }

    public val SourceCapabilityRatingsKt.Dsl.aMaxRtgOrNull: openfmb.commonmodule.ASG?
      get() = _builder.aMaxRtgOrNull

    /**
     * ```
     * Frequency nominal rating, default to 60 hz if not provide and cannot be configured.
     * ```
     *
     * `.commonmodule.ASG FreqNomRtg = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var freqNomRtg: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getFreqNomRtg")
        get() = _builder.freqNomRtg
      @kotlin.jvm.JvmName("setFreqNomRtg")
        set(value) {
        _builder.freqNomRtg = value
      }
    /**
     * ```
     * Frequency nominal rating, default to 60 hz if not provide and cannot be configured.
     * ```
     *
     * `.commonmodule.ASG FreqNomRtg = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearFreqNomRtg() {
      _builder.clearFreqNomRtg()
    }
    /**
     * ```
     * Frequency nominal rating, default to 60 hz if not provide and cannot be configured.
     * ```
     *
     * `.commonmodule.ASG FreqNomRtg = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the freqNomRtg field is set.
     */
    public fun hasFreqNomRtg(): kotlin.Boolean {
      return _builder.hasFreqNomRtg()
    }

    public val SourceCapabilityRatingsKt.Dsl.freqNomRtgOrNull: openfmb.commonmodule.ASG?
      get() = _builder.freqNomRtgOrNull

    /**
     * ```
     * Normal operating performance category
     * ```
     *
     * `.commonmodule.NorOpCatKind NorOpCatRtg = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var norOpCatRtg: openfmb.commonmodule.NorOpCatKind
      @kotlin.jvm.JvmName("getNorOpCatRtg")
        get() = _builder.norOpCatRtg
      @kotlin.jvm.JvmName("setNorOpCatRtg")
        set(value) {
        _builder.norOpCatRtg = value
      }
    public var norOpCatRtgValue: kotlin.Int
      @kotlin.jvm.JvmName("getNorOpCatRtgValue")
        get() = _builder.norOpCatRtgValue
      @kotlin.jvm.JvmName("setNorOpCatRtgValue")
        set(value) {
        _builder.norOpCatRtgValue = value
      }
    /**
     * ```
     * Normal operating performance category
     * ```
     *
     * `.commonmodule.NorOpCatKind NorOpCatRtg = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearNorOpCatRtg() {
      _builder.clearNorOpCatRtg()
    }

    /**
     * ```
     * Reactive susceptance that remains connected to the Area EPS in the cease to energize and trip state
     * ```
     *
     * `.commonmodule.ASG ReactSusceptRtg = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var reactSusceptRtg: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getReactSusceptRtg")
        get() = _builder.reactSusceptRtg
      @kotlin.jvm.JvmName("setReactSusceptRtg")
        set(value) {
        _builder.reactSusceptRtg = value
      }
    /**
     * ```
     * Reactive susceptance that remains connected to the Area EPS in the cease to energize and trip state
     * ```
     *
     * `.commonmodule.ASG ReactSusceptRtg = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearReactSusceptRtg() {
      _builder.clearReactSusceptRtg()
    }
    /**
     * ```
     * Reactive susceptance that remains connected to the Area EPS in the cease to energize and trip state
     * ```
     *
     * `.commonmodule.ASG ReactSusceptRtg = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the reactSusceptRtg field is set.
     */
    public fun hasReactSusceptRtg(): kotlin.Boolean {
      return _builder.hasReactSusceptRtg()
    }

    public val SourceCapabilityRatingsKt.Dsl.reactSusceptRtgOrNull: openfmb.commonmodule.ASG?
      get() = _builder.reactSusceptRtgOrNull

    /**
     * ```
     * Apparent Power Maximum Rating
     * ```
     *
     * `.commonmodule.ASG VAMaxRtg = 7 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var vAMaxRtg: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getVAMaxRtg")
        get() = _builder.vaMaxRtg
      @kotlin.jvm.JvmName("setVAMaxRtg")
        set(value) {
        _builder.vaMaxRtg = value
      }
    /**
     * ```
     * Apparent Power Maximum Rating
     * ```
     *
     * `.commonmodule.ASG VAMaxRtg = 7 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearVAMaxRtg() {
      _builder.clearVAMaxRtg()
    }
    /**
     * ```
     * Apparent Power Maximum Rating
     * ```
     *
     * `.commonmodule.ASG VAMaxRtg = 7 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the vAMaxRtg field is set.
     */
    public fun hasVAMaxRtg(): kotlin.Boolean {
      return _builder.hasVAMaxRtg()
    }

    public val SourceCapabilityRatingsKt.Dsl.vAMaxRtgOrNull: openfmb.commonmodule.ASG?
      get() = _builder.vAMaxRtgOrNull

    /**
     * ```
     * Reactive Power Absorbed Maximum Rating
     * ```
     *
     * `.commonmodule.ASG VarMaxAbsRtg = 8 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var varMaxAbsRtg: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getVarMaxAbsRtg")
        get() = _builder.varMaxAbsRtg
      @kotlin.jvm.JvmName("setVarMaxAbsRtg")
        set(value) {
        _builder.varMaxAbsRtg = value
      }
    /**
     * ```
     * Reactive Power Absorbed Maximum Rating
     * ```
     *
     * `.commonmodule.ASG VarMaxAbsRtg = 8 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearVarMaxAbsRtg() {
      _builder.clearVarMaxAbsRtg()
    }
    /**
     * ```
     * Reactive Power Absorbed Maximum Rating
     * ```
     *
     * `.commonmodule.ASG VarMaxAbsRtg = 8 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the varMaxAbsRtg field is set.
     */
    public fun hasVarMaxAbsRtg(): kotlin.Boolean {
      return _builder.hasVarMaxAbsRtg()
    }

    public val SourceCapabilityRatingsKt.Dsl.varMaxAbsRtgOrNull: openfmb.commonmodule.ASG?
      get() = _builder.varMaxAbsRtgOrNull

    /**
     * ```
     * Reactive Power Injected Maximum Rating
     * ```
     *
     * `.commonmodule.ASG VarMaxInjRtg = 9 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var varMaxInjRtg: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getVarMaxInjRtg")
        get() = _builder.varMaxInjRtg
      @kotlin.jvm.JvmName("setVarMaxInjRtg")
        set(value) {
        _builder.varMaxInjRtg = value
      }
    /**
     * ```
     * Reactive Power Injected Maximum Rating
     * ```
     *
     * `.commonmodule.ASG VarMaxInjRtg = 9 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearVarMaxInjRtg() {
      _builder.clearVarMaxInjRtg()
    }
    /**
     * ```
     * Reactive Power Injected Maximum Rating
     * ```
     *
     * `.commonmodule.ASG VarMaxInjRtg = 9 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the varMaxInjRtg field is set.
     */
    public fun hasVarMaxInjRtg(): kotlin.Boolean {
      return _builder.hasVarMaxInjRtg()
    }

    public val SourceCapabilityRatingsKt.Dsl.varMaxInjRtgOrNull: openfmb.commonmodule.ASG?
      get() = _builder.varMaxInjRtgOrNull

    /**
     * ```
     * AC voltage maximum rating
     * ```
     *
     * `.commonmodule.ASG VMaxRtg = 10 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var vMaxRtg: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getVMaxRtg")
        get() = _builder.vMaxRtg
      @kotlin.jvm.JvmName("setVMaxRtg")
        set(value) {
        _builder.vMaxRtg = value
      }
    /**
     * ```
     * AC voltage maximum rating
     * ```
     *
     * `.commonmodule.ASG VMaxRtg = 10 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearVMaxRtg() {
      _builder.clearVMaxRtg()
    }
    /**
     * ```
     * AC voltage maximum rating
     * ```
     *
     * `.commonmodule.ASG VMaxRtg = 10 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the vMaxRtg field is set.
     */
    public fun hasVMaxRtg(): kotlin.Boolean {
      return _builder.hasVMaxRtg()
    }

    public val SourceCapabilityRatingsKt.Dsl.vMaxRtgOrNull: openfmb.commonmodule.ASG?
      get() = _builder.vMaxRtgOrNull

    /**
     * ```
     * AC voltage minimum rating
     * ```
     *
     * `.commonmodule.ASG VMinRtg = 11 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var vMinRtg: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getVMinRtg")
        get() = _builder.vMinRtg
      @kotlin.jvm.JvmName("setVMinRtg")
        set(value) {
        _builder.vMinRtg = value
      }
    /**
     * ```
     * AC voltage minimum rating
     * ```
     *
     * `.commonmodule.ASG VMinRtg = 11 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearVMinRtg() {
      _builder.clearVMinRtg()
    }
    /**
     * ```
     * AC voltage minimum rating
     * ```
     *
     * `.commonmodule.ASG VMinRtg = 11 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the vMinRtg field is set.
     */
    public fun hasVMinRtg(): kotlin.Boolean {
      return _builder.hasVMinRtg()
    }

    public val SourceCapabilityRatingsKt.Dsl.vMinRtgOrNull: openfmb.commonmodule.ASG?
      get() = _builder.vMinRtgOrNull

    /**
     * ```
     * AC voltage nominal rating
     * ```
     *
     * `.commonmodule.ASG VNomRtg = 12 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var vNomRtg: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getVNomRtg")
        get() = _builder.vNomRtg
      @kotlin.jvm.JvmName("setVNomRtg")
        set(value) {
        _builder.vNomRtg = value
      }
    /**
     * ```
     * AC voltage nominal rating
     * ```
     *
     * `.commonmodule.ASG VNomRtg = 12 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearVNomRtg() {
      _builder.clearVNomRtg()
    }
    /**
     * ```
     * AC voltage nominal rating
     * ```
     *
     * `.commonmodule.ASG VNomRtg = 12 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the vNomRtg field is set.
     */
    public fun hasVNomRtg(): kotlin.Boolean {
      return _builder.hasVNomRtg()
    }

    public val SourceCapabilityRatingsKt.Dsl.vNomRtgOrNull: openfmb.commonmodule.ASG?
      get() = _builder.vNomRtgOrNull

    /**
     * ```
     * Active Power Max Rating
     * ```
     *
     * `.commonmodule.ASG WMaxRtg = 13 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var wMaxRtg: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getWMaxRtg")
        get() = _builder.wMaxRtg
      @kotlin.jvm.JvmName("setWMaxRtg")
        set(value) {
        _builder.wMaxRtg = value
      }
    /**
     * ```
     * Active Power Max Rating
     * ```
     *
     * `.commonmodule.ASG WMaxRtg = 13 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearWMaxRtg() {
      _builder.clearWMaxRtg()
    }
    /**
     * ```
     * Active Power Max Rating
     * ```
     *
     * `.commonmodule.ASG WMaxRtg = 13 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the wMaxRtg field is set.
     */
    public fun hasWMaxRtg(): kotlin.Boolean {
      return _builder.hasWMaxRtg()
    }

    public val SourceCapabilityRatingsKt.Dsl.wMaxRtgOrNull: openfmb.commonmodule.ASG?
      get() = _builder.wMaxRtgOrNull

    /**
     * ```
     * Active Power (Over-Excited) Rating
     * ```
     *
     * `.commonmodule.ASG WOvrExtRtg = 14 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var wOvrExtRtg: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getWOvrExtRtg")
        get() = _builder.wOvrExtRtg
      @kotlin.jvm.JvmName("setWOvrExtRtg")
        set(value) {
        _builder.wOvrExtRtg = value
      }
    /**
     * ```
     * Active Power (Over-Excited) Rating
     * ```
     *
     * `.commonmodule.ASG WOvrExtRtg = 14 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearWOvrExtRtg() {
      _builder.clearWOvrExtRtg()
    }
    /**
     * ```
     * Active Power (Over-Excited) Rating
     * ```
     *
     * `.commonmodule.ASG WOvrExtRtg = 14 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the wOvrExtRtg field is set.
     */
    public fun hasWOvrExtRtg(): kotlin.Boolean {
      return _builder.hasWOvrExtRtg()
    }

    public val SourceCapabilityRatingsKt.Dsl.wOvrExtRtgOrNull: openfmb.commonmodule.ASG?
      get() = _builder.wOvrExtRtgOrNull

    /**
     * ```
     * Active power rating at specified over-excited power factor
     * ```
     *
     * `.commonmodule.ASG WOvrExtRtgPF = 15 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var wOvrExtRtgPF: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getWOvrExtRtgPF")
        get() = _builder.wOvrExtRtgPF
      @kotlin.jvm.JvmName("setWOvrExtRtgPF")
        set(value) {
        _builder.wOvrExtRtgPF = value
      }
    /**
     * ```
     * Active power rating at specified over-excited power factor
     * ```
     *
     * `.commonmodule.ASG WOvrExtRtgPF = 15 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearWOvrExtRtgPF() {
      _builder.clearWOvrExtRtgPF()
    }
    /**
     * ```
     * Active power rating at specified over-excited power factor
     * ```
     *
     * `.commonmodule.ASG WOvrExtRtgPF = 15 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the wOvrExtRtgPF field is set.
     */
    public fun hasWOvrExtRtgPF(): kotlin.Boolean {
      return _builder.hasWOvrExtRtgPF()
    }

    public val SourceCapabilityRatingsKt.Dsl.wOvrExtRtgPFOrNull: openfmb.commonmodule.ASG?
      get() = _builder.wOvrExtRtgPFOrNull

    /**
     * ```
     * Active Power (Under-Excited) Rating
     * ```
     *
     * `.commonmodule.ASG WUndExtRtg = 16 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var wUndExtRtg: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getWUndExtRtg")
        get() = _builder.wUndExtRtg
      @kotlin.jvm.JvmName("setWUndExtRtg")
        set(value) {
        _builder.wUndExtRtg = value
      }
    /**
     * ```
     * Active Power (Under-Excited) Rating
     * ```
     *
     * `.commonmodule.ASG WUndExtRtg = 16 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearWUndExtRtg() {
      _builder.clearWUndExtRtg()
    }
    /**
     * ```
     * Active Power (Under-Excited) Rating
     * ```
     *
     * `.commonmodule.ASG WUndExtRtg = 16 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the wUndExtRtg field is set.
     */
    public fun hasWUndExtRtg(): kotlin.Boolean {
      return _builder.hasWUndExtRtg()
    }

    public val SourceCapabilityRatingsKt.Dsl.wUndExtRtgOrNull: openfmb.commonmodule.ASG?
      get() = _builder.wUndExtRtgOrNull

    /**
     * ```
     * Active power rating at specified under-excited power factor
     * ```
     *
     * `.commonmodule.ASG WUndExtRtgPF = 17 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var wUndExtRtgPF: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getWUndExtRtgPF")
        get() = _builder.wUndExtRtgPF
      @kotlin.jvm.JvmName("setWUndExtRtgPF")
        set(value) {
        _builder.wUndExtRtgPF = value
      }
    /**
     * ```
     * Active power rating at specified under-excited power factor
     * ```
     *
     * `.commonmodule.ASG WUndExtRtgPF = 17 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearWUndExtRtgPF() {
      _builder.clearWUndExtRtgPF()
    }
    /**
     * ```
     * Active power rating at specified under-excited power factor
     * ```
     *
     * `.commonmodule.ASG WUndExtRtgPF = 17 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the wUndExtRtgPF field is set.
     */
    public fun hasWUndExtRtgPF(): kotlin.Boolean {
      return _builder.hasWUndExtRtgPF()
    }

    public val SourceCapabilityRatingsKt.Dsl.wUndExtRtgPFOrNull: openfmb.commonmodule.ASG?
      get() = _builder.wUndExtRtgPFOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.SourceCapabilityRatings.copy(block: `openfmb.commonmodule`.SourceCapabilityRatingsKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.SourceCapabilityRatings =
  `openfmb.commonmodule`.SourceCapabilityRatingsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.SourceCapabilityRatingsOrBuilder.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
  get() = if (hasLogicalNode()) getLogicalNode() else null

public val openfmb.commonmodule.SourceCapabilityRatingsOrBuilder.aMaxRtgOrNull: openfmb.commonmodule.ASG?
  get() = if (hasAMaxRtg()) getAMaxRtg() else null

public val openfmb.commonmodule.SourceCapabilityRatingsOrBuilder.freqNomRtgOrNull: openfmb.commonmodule.ASG?
  get() = if (hasFreqNomRtg()) getFreqNomRtg() else null

public val openfmb.commonmodule.SourceCapabilityRatingsOrBuilder.reactSusceptRtgOrNull: openfmb.commonmodule.ASG?
  get() = if (hasReactSusceptRtg()) getReactSusceptRtg() else null

public val openfmb.commonmodule.SourceCapabilityRatingsOrBuilder.vAMaxRtgOrNull: openfmb.commonmodule.ASG?
  get() = if (hasVAMaxRtg()) getVAMaxRtg() else null

public val openfmb.commonmodule.SourceCapabilityRatingsOrBuilder.varMaxAbsRtgOrNull: openfmb.commonmodule.ASG?
  get() = if (hasVarMaxAbsRtg()) getVarMaxAbsRtg() else null

public val openfmb.commonmodule.SourceCapabilityRatingsOrBuilder.varMaxInjRtgOrNull: openfmb.commonmodule.ASG?
  get() = if (hasVarMaxInjRtg()) getVarMaxInjRtg() else null

public val openfmb.commonmodule.SourceCapabilityRatingsOrBuilder.vMaxRtgOrNull: openfmb.commonmodule.ASG?
  get() = if (hasVMaxRtg()) getVMaxRtg() else null

public val openfmb.commonmodule.SourceCapabilityRatingsOrBuilder.vMinRtgOrNull: openfmb.commonmodule.ASG?
  get() = if (hasVMinRtg()) getVMinRtg() else null

public val openfmb.commonmodule.SourceCapabilityRatingsOrBuilder.vNomRtgOrNull: openfmb.commonmodule.ASG?
  get() = if (hasVNomRtg()) getVNomRtg() else null

public val openfmb.commonmodule.SourceCapabilityRatingsOrBuilder.wMaxRtgOrNull: openfmb.commonmodule.ASG?
  get() = if (hasWMaxRtg()) getWMaxRtg() else null

public val openfmb.commonmodule.SourceCapabilityRatingsOrBuilder.wOvrExtRtgOrNull: openfmb.commonmodule.ASG?
  get() = if (hasWOvrExtRtg()) getWOvrExtRtg() else null

public val openfmb.commonmodule.SourceCapabilityRatingsOrBuilder.wOvrExtRtgPFOrNull: openfmb.commonmodule.ASG?
  get() = if (hasWOvrExtRtgPF()) getWOvrExtRtgPF() else null

public val openfmb.commonmodule.SourceCapabilityRatingsOrBuilder.wUndExtRtgOrNull: openfmb.commonmodule.ASG?
  get() = if (hasWUndExtRtg()) getWUndExtRtg() else null

public val openfmb.commonmodule.SourceCapabilityRatingsOrBuilder.wUndExtRtgPFOrNull: openfmb.commonmodule.ASG?
  get() = if (hasWUndExtRtgPF()) getWUndExtRtgPF() else null

