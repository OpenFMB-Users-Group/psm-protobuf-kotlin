//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializecontrolFSCC")
public inline fun controlFSCC(block: openfmb.commonmodule.ControlFSCCKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ControlFSCC =
  openfmb.commonmodule.ControlFSCCKt.Dsl._create(openfmb.commonmodule.ControlFSCC.newBuilder()).apply { block() }._build()
public object ControlFSCCKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.ControlFSCC.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.ControlFSCC.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.ControlFSCC = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var logicalNodeForControl: openfmb.commonmodule.LogicalNodeForControl
      @JvmName("getLogicalNodeForControl")
      get() = _builder.getLogicalNodeForControl()
      @JvmName("setLogicalNodeForControl")
      set(value) {
        _builder.setLogicalNodeForControl(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearLogicalNodeForControl() {
      _builder.clearLogicalNodeForControl()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the logicalNodeForControl field is set.
     */
    public fun hasLogicalNodeForControl(): kotlin.Boolean {
      return _builder.hasLogicalNodeForControl()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ControlScheduleFSCH controlScheduleFSCH = 2;</code>
     */
    public var controlScheduleFSCH: openfmb.commonmodule.ControlScheduleFSCH
      @JvmName("getControlScheduleFSCH")
      get() = _builder.getControlScheduleFSCH()
      @JvmName("setControlScheduleFSCH")
      set(value) {
        _builder.setControlScheduleFSCH(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ControlScheduleFSCH controlScheduleFSCH = 2;</code>
     */
    public fun clearControlScheduleFSCH() {
      _builder.clearControlScheduleFSCH()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ControlScheduleFSCH controlScheduleFSCH = 2;</code>
     * @return Whether the controlScheduleFSCH field is set.
     */
    public fun hasControlScheduleFSCH(): kotlin.Boolean {
      return _builder.hasControlScheduleFSCH()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ControlScheduleFSCH islandControlScheduleFSCH = 3;</code>
     */
    public var islandControlScheduleFSCH: openfmb.commonmodule.ControlScheduleFSCH
      @JvmName("getIslandControlScheduleFSCH")
      get() = _builder.getIslandControlScheduleFSCH()
      @JvmName("setIslandControlScheduleFSCH")
      set(value) {
        _builder.setIslandControlScheduleFSCH(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ControlScheduleFSCH islandControlScheduleFSCH = 3;</code>
     */
    public fun clearIslandControlScheduleFSCH() {
      _builder.clearIslandControlScheduleFSCH()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ControlScheduleFSCH islandControlScheduleFSCH = 3;</code>
     * @return Whether the islandControlScheduleFSCH field is set.
     */
    public fun hasIslandControlScheduleFSCH(): kotlin.Boolean {
      return _builder.hasIslandControlScheduleFSCH()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.ControlFSCC.copy(block: openfmb.commonmodule.ControlFSCCKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ControlFSCC =
  openfmb.commonmodule.ControlFSCCKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.ControlFSCCOrBuilder.logicalNodeForControlOrNull: openfmb.commonmodule.LogicalNodeForControl?
  get() = if (hasLogicalNodeForControl()) getLogicalNodeForControl() else null

public val openfmb.commonmodule.ControlFSCCOrBuilder.controlScheduleFSCHOrNull: openfmb.commonmodule.ControlScheduleFSCH?
  get() = if (hasControlScheduleFSCH()) getControlScheduleFSCH() else null

public val openfmb.commonmodule.ControlFSCCOrBuilder.islandControlScheduleFSCHOrNull: openfmb.commonmodule.ControlScheduleFSCH?
  get() = if (hasIslandControlScheduleFSCH()) getIslandControlScheduleFSCH() else null

