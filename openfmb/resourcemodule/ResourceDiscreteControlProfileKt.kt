// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: resourcemodule/resourcemodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.resourcemodule;

@kotlin.jvm.JvmName("-initializeresourceDiscreteControlProfile")
public inline fun resourceDiscreteControlProfile(block: openfmb.resourcemodule.ResourceDiscreteControlProfileKt.Dsl.() -> kotlin.Unit): openfmb.resourcemodule.ResourceDiscreteControlProfile =
  openfmb.resourcemodule.ResourceDiscreteControlProfileKt.Dsl._create(openfmb.resourcemodule.ResourceDiscreteControlProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Instructs a resource to perform a specified action.
 * ```
 *
 * Protobuf type `resourcemodule.ResourceDiscreteControlProfile`
 */
public object ResourceDiscreteControlProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.resourcemodule.ResourceDiscreteControlProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.resourcemodule.ResourceDiscreteControlProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.resourcemodule.ResourceDiscreteControlProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var controlMessageInfo: openfmb.commonmodule.ControlMessageInfo
      @kotlin.jvm.JvmName("getControlMessageInfo")
        get() = _builder.controlMessageInfo
      @kotlin.jvm.JvmName("setControlMessageInfo")
        set(value) {
        _builder.controlMessageInfo = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearControlMessageInfo() {
      _builder.clearControlMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the controlMessageInfo field is set.
     */
    public fun hasControlMessageInfo(): kotlin.Boolean {
      return _builder.hasControlMessageInfo()
    }

    public val ResourceDiscreteControlProfileKt.Dsl.controlMessageInfoOrNull: openfmb.commonmodule.ControlMessageInfo?
      get() = _builder.controlMessageInfoOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ConductingEquipment conductingEquipment = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var conductingEquipment: openfmb.commonmodule.ConductingEquipment
      @kotlin.jvm.JvmName("getConductingEquipment")
        get() = _builder.conductingEquipment
      @kotlin.jvm.JvmName("setConductingEquipment")
        set(value) {
        _builder.conductingEquipment = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ConductingEquipment conductingEquipment = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearConductingEquipment() {
      _builder.clearConductingEquipment()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ConductingEquipment conductingEquipment = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the conductingEquipment field is set.
     */
    public fun hasConductingEquipment(): kotlin.Boolean {
      return _builder.hasConductingEquipment()
    }

    public val ResourceDiscreteControlProfileKt.Dsl.conductingEquipmentOrNull: openfmb.commonmodule.ConductingEquipment?
      get() = _builder.conductingEquipmentOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.resourcemodule.ResourceDiscreteControl resourceDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var resourceDiscreteControl: openfmb.resourcemodule.ResourceDiscreteControl
      @kotlin.jvm.JvmName("getResourceDiscreteControl")
        get() = _builder.resourceDiscreteControl
      @kotlin.jvm.JvmName("setResourceDiscreteControl")
        set(value) {
        _builder.resourceDiscreteControl = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.resourcemodule.ResourceDiscreteControl resourceDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearResourceDiscreteControl() {
      _builder.clearResourceDiscreteControl()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.resourcemodule.ResourceDiscreteControl resourceDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the resourceDiscreteControl field is set.
     */
    public fun hasResourceDiscreteControl(): kotlin.Boolean {
      return _builder.hasResourceDiscreteControl()
    }

    public val ResourceDiscreteControlProfileKt.Dsl.resourceDiscreteControlOrNull: openfmb.resourcemodule.ResourceDiscreteControl?
      get() = _builder.resourceDiscreteControlOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.resourcemodule.ResourceDiscreteControlProfile.copy(block: `openfmb.resourcemodule`.ResourceDiscreteControlProfileKt.Dsl.() -> kotlin.Unit): openfmb.resourcemodule.ResourceDiscreteControlProfile =
  `openfmb.resourcemodule`.ResourceDiscreteControlProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.resourcemodule.ResourceDiscreteControlProfileOrBuilder.controlMessageInfoOrNull: openfmb.commonmodule.ControlMessageInfo?
  get() = if (hasControlMessageInfo()) getControlMessageInfo() else null

public val openfmb.resourcemodule.ResourceDiscreteControlProfileOrBuilder.conductingEquipmentOrNull: openfmb.commonmodule.ConductingEquipment?
  get() = if (hasConductingEquipment()) getConductingEquipment() else null

public val openfmb.resourcemodule.ResourceDiscreteControlProfileOrBuilder.resourceDiscreteControlOrNull: openfmb.resourcemodule.ResourceDiscreteControl?
  get() = if (hasResourceDiscreteControl()) getResourceDiscreteControl() else null

