// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: generationmodule/generationmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.generationmodule;

@kotlin.jvm.JvmName("-initializereactivePowerControl")
public inline fun reactivePowerControl(block: openfmb.generationmodule.ReactivePowerControlKt.Dsl.() -> kotlin.Unit): openfmb.generationmodule.ReactivePowerControl =
  openfmb.generationmodule.ReactivePowerControlKt.Dsl._create(openfmb.generationmodule.ReactivePowerControl.newBuilder()).apply { block() }._build()
/**
 * ```
 * Generation real power control
 * ```
 *
 * Protobuf type `generationmodule.ReactivePowerControl`
 */
public object ReactivePowerControlKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.generationmodule.ReactivePowerControl.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.generationmodule.ReactivePowerControl.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.generationmodule.ReactivePowerControl = _builder.build()

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.generationmodule.DroopParameter droopSetpoint = 1;`
     */
    public var droopSetpoint: openfmb.generationmodule.DroopParameter
      @JvmName("getDroopSetpoint")
      get() = _builder.getDroopSetpoint()
      @JvmName("setDroopSetpoint")
      set(value) {
        _builder.setDroopSetpoint(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.generationmodule.DroopParameter droopSetpoint = 1;`
     */
    public fun clearDroopSetpoint() {
      _builder.clearDroopSetpoint()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.generationmodule.DroopParameter droopSetpoint = 1;`
     * @return Whether the droopSetpoint field is set.
     */
    public fun hasDroopSetpoint(): kotlin.Boolean {
      return _builder.hasDroopSetpoint()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.FloatValue powerFactorSetpoint = 2;`
     */
    public var powerFactorSetpoint: com.google.protobuf.FloatValue
      @JvmName("getPowerFactorSetpoint")
      get() = _builder.getPowerFactorSetpoint()
      @JvmName("setPowerFactorSetpoint")
      set(value) {
        _builder.setPowerFactorSetpoint(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.FloatValue powerFactorSetpoint = 2;`
     */
    public fun clearPowerFactorSetpoint() {
      _builder.clearPowerFactorSetpoint()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.FloatValue powerFactorSetpoint = 2;`
     * @return Whether the powerFactorSetpoint field is set.
     */
    public fun hasPowerFactorSetpoint(): kotlin.Boolean {
      return _builder.hasPowerFactorSetpoint()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.Optional_ReactivePowerControlKind reactivePowerControlMode = 3;`
     */
    public var reactivePowerControlMode: openfmb.commonmodule.Optional_ReactivePowerControlKind
      @JvmName("getReactivePowerControlMode")
      get() = _builder.getReactivePowerControlMode()
      @JvmName("setReactivePowerControlMode")
      set(value) {
        _builder.setReactivePowerControlMode(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.Optional_ReactivePowerControlKind reactivePowerControlMode = 3;`
     */
    public fun clearReactivePowerControlMode() {
      _builder.clearReactivePowerControlMode()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.Optional_ReactivePowerControlKind reactivePowerControlMode = 3;`
     * @return Whether the reactivePowerControlMode field is set.
     */
    public fun hasReactivePowerControlMode(): kotlin.Boolean {
      return _builder.hasReactivePowerControlMode()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.FloatValue reactivePowerSetpoint = 4;`
     */
    public var reactivePowerSetpoint: com.google.protobuf.FloatValue
      @JvmName("getReactivePowerSetpoint")
      get() = _builder.getReactivePowerSetpoint()
      @JvmName("setReactivePowerSetpoint")
      set(value) {
        _builder.setReactivePowerSetpoint(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.FloatValue reactivePowerSetpoint = 4;`
     */
    public fun clearReactivePowerSetpoint() {
      _builder.clearReactivePowerSetpoint()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.FloatValue reactivePowerSetpoint = 4;`
     * @return Whether the reactivePowerSetpoint field is set.
     */
    public fun hasReactivePowerSetpoint(): kotlin.Boolean {
      return _builder.hasReactivePowerSetpoint()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.FloatValue voltageSetpoint = 5;`
     */
    public var voltageSetpoint: com.google.protobuf.FloatValue
      @JvmName("getVoltageSetpoint")
      get() = _builder.getVoltageSetpoint()
      @JvmName("setVoltageSetpoint")
      set(value) {
        _builder.setVoltageSetpoint(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.FloatValue voltageSetpoint = 5;`
     */
    public fun clearVoltageSetpoint() {
      _builder.clearVoltageSetpoint()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.FloatValue voltageSetpoint = 5;`
     * @return Whether the voltageSetpoint field is set.
     */
    public fun hasVoltageSetpoint(): kotlin.Boolean {
      return _builder.hasVoltageSetpoint()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.generationmodule.ReactivePowerControl.copy(block: openfmb.generationmodule.ReactivePowerControlKt.Dsl.() -> kotlin.Unit): openfmb.generationmodule.ReactivePowerControl =
  openfmb.generationmodule.ReactivePowerControlKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.generationmodule.ReactivePowerControlOrBuilder.droopSetpointOrNull: openfmb.generationmodule.DroopParameter?
  get() = if (hasDroopSetpoint()) getDroopSetpoint() else null

public val openfmb.generationmodule.ReactivePowerControlOrBuilder.powerFactorSetpointOrNull: com.google.protobuf.FloatValue?
  get() = if (hasPowerFactorSetpoint()) getPowerFactorSetpoint() else null

public val openfmb.generationmodule.ReactivePowerControlOrBuilder.reactivePowerControlModeOrNull: openfmb.commonmodule.Optional_ReactivePowerControlKind?
  get() = if (hasReactivePowerControlMode()) getReactivePowerControlMode() else null

public val openfmb.generationmodule.ReactivePowerControlOrBuilder.reactivePowerSetpointOrNull: com.google.protobuf.FloatValue?
  get() = if (hasReactivePowerSetpoint()) getReactivePowerSetpoint() else null

public val openfmb.generationmodule.ReactivePowerControlOrBuilder.voltageSetpointOrNull: com.google.protobuf.FloatValue?
  get() = if (hasVoltageSetpoint()) getVoltageSetpoint() else null

