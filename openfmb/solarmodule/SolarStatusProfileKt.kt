// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: solarmodule/solarmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.solarmodule;

@kotlin.jvm.JvmName("-initializesolarStatusProfile")
public inline fun solarStatusProfile(block: openfmb.solarmodule.SolarStatusProfileKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarStatusProfile =
  openfmb.solarmodule.SolarStatusProfileKt.Dsl._create(openfmb.solarmodule.SolarStatusProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Solar status profile
 * ```
 *
 * Protobuf type `solarmodule.SolarStatusProfile`
 */
public object SolarStatusProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.solarmodule.SolarStatusProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.solarmodule.SolarStatusProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.solarmodule.SolarStatusProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var statusMessageInfo: openfmb.commonmodule.StatusMessageInfo
      @kotlin.jvm.JvmName("getStatusMessageInfo")
        get() = _builder.statusMessageInfo
      @kotlin.jvm.JvmName("setStatusMessageInfo")
        set(value) {
        _builder.statusMessageInfo = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearStatusMessageInfo() {
      _builder.clearStatusMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the statusMessageInfo field is set.
     */
    public fun hasStatusMessageInfo(): kotlin.Boolean {
      return _builder.hasStatusMessageInfo()
    }

    public val SolarStatusProfileKt.Dsl.statusMessageInfoOrNull: openfmb.commonmodule.StatusMessageInfo?
      get() = _builder.statusMessageInfoOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var solarInverter: openfmb.solarmodule.SolarInverter
      @kotlin.jvm.JvmName("getSolarInverter")
        get() = _builder.solarInverter
      @kotlin.jvm.JvmName("setSolarInverter")
        set(value) {
        _builder.solarInverter = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearSolarInverter() {
      _builder.clearSolarInverter()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the solarInverter field is set.
     */
    public fun hasSolarInverter(): kotlin.Boolean {
      return _builder.hasSolarInverter()
    }

    public val SolarStatusProfileKt.Dsl.solarInverterOrNull: openfmb.solarmodule.SolarInverter?
      get() = _builder.solarInverterOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarStatus solarStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var solarStatus: openfmb.solarmodule.SolarStatus
      @kotlin.jvm.JvmName("getSolarStatus")
        get() = _builder.solarStatus
      @kotlin.jvm.JvmName("setSolarStatus")
        set(value) {
        _builder.solarStatus = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarStatus solarStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearSolarStatus() {
      _builder.clearSolarStatus()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarStatus solarStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the solarStatus field is set.
     */
    public fun hasSolarStatus(): kotlin.Boolean {
      return _builder.hasSolarStatus()
    }

    public val SolarStatusProfileKt.Dsl.solarStatusOrNull: openfmb.solarmodule.SolarStatus?
      get() = _builder.solarStatusOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.solarmodule.SolarStatusProfile.copy(block: `openfmb.solarmodule`.SolarStatusProfileKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarStatusProfile =
  `openfmb.solarmodule`.SolarStatusProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.solarmodule.SolarStatusProfileOrBuilder.statusMessageInfoOrNull: openfmb.commonmodule.StatusMessageInfo?
  get() = if (hasStatusMessageInfo()) getStatusMessageInfo() else null

public val openfmb.solarmodule.SolarStatusProfileOrBuilder.solarInverterOrNull: openfmb.solarmodule.SolarInverter?
  get() = if (hasSolarInverter()) getSolarInverter() else null

public val openfmb.solarmodule.SolarStatusProfileOrBuilder.solarStatusOrNull: openfmb.solarmodule.SolarStatus?
  get() = if (hasSolarStatus()) getSolarStatus() else null

