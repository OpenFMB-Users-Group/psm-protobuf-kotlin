//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializedEL")
public inline fun dEL(block: openfmb.commonmodule.DELKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.DEL =
  openfmb.commonmodule.DELKt.Dsl._create(openfmb.commonmodule.DEL.newBuilder()).apply { block() }._build()
public object DELKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.DEL.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.DEL.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.DEL = _builder.build()

    /**
     * <pre>
     * Value of phase A to phase B measurement.
     * </pre>
     *
     * <code>.commonmodule.CMV phsAB = 1;</code>
     */
    public var phsAB: openfmb.commonmodule.CMV
      @JvmName("getPhsAB")
      get() = _builder.getPhsAB()
      @JvmName("setPhsAB")
      set(value) {
        _builder.setPhsAB(value)
      }
    /**
     * <pre>
     * Value of phase A to phase B measurement.
     * </pre>
     *
     * <code>.commonmodule.CMV phsAB = 1;</code>
     */
    public fun clearPhsAB() {
      _builder.clearPhsAB()
    }
    /**
     * <pre>
     * Value of phase A to phase B measurement.
     * </pre>
     *
     * <code>.commonmodule.CMV phsAB = 1;</code>
     * @return Whether the phsAB field is set.
     */
    public fun hasPhsAB(): kotlin.Boolean {
      return _builder.hasPhsAB()
    }

    /**
     * <pre>
     * Value of phase B to phase C measurement.
     * </pre>
     *
     * <code>.commonmodule.CMV phsBC = 2;</code>
     */
    public var phsBC: openfmb.commonmodule.CMV
      @JvmName("getPhsBC")
      get() = _builder.getPhsBC()
      @JvmName("setPhsBC")
      set(value) {
        _builder.setPhsBC(value)
      }
    /**
     * <pre>
     * Value of phase B to phase C measurement.
     * </pre>
     *
     * <code>.commonmodule.CMV phsBC = 2;</code>
     */
    public fun clearPhsBC() {
      _builder.clearPhsBC()
    }
    /**
     * <pre>
     * Value of phase B to phase C measurement.
     * </pre>
     *
     * <code>.commonmodule.CMV phsBC = 2;</code>
     * @return Whether the phsBC field is set.
     */
    public fun hasPhsBC(): kotlin.Boolean {
      return _builder.hasPhsBC()
    }

    /**
     * <pre>
     * Value of phase C to phase A measurement.
     * </pre>
     *
     * <code>.commonmodule.CMV phsCA = 3;</code>
     */
    public var phsCA: openfmb.commonmodule.CMV
      @JvmName("getPhsCA")
      get() = _builder.getPhsCA()
      @JvmName("setPhsCA")
      set(value) {
        _builder.setPhsCA(value)
      }
    /**
     * <pre>
     * Value of phase C to phase A measurement.
     * </pre>
     *
     * <code>.commonmodule.CMV phsCA = 3;</code>
     */
    public fun clearPhsCA() {
      _builder.clearPhsCA()
    }
    /**
     * <pre>
     * Value of phase C to phase A measurement.
     * </pre>
     *
     * <code>.commonmodule.CMV phsCA = 3;</code>
     * @return Whether the phsCA field is set.
     */
    public fun hasPhsCA(): kotlin.Boolean {
      return _builder.hasPhsCA()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.DEL.copy(block: openfmb.commonmodule.DELKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.DEL =
  openfmb.commonmodule.DELKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.DELOrBuilder.phsABOrNull: openfmb.commonmodule.CMV?
  get() = if (hasPhsAB()) getPhsAB() else null

public val openfmb.commonmodule.DELOrBuilder.phsBCOrNull: openfmb.commonmodule.CMV?
  get() = if (hasPhsBC()) getPhsBC() else null

public val openfmb.commonmodule.DELOrBuilder.phsCAOrNull: openfmb.commonmodule.CMV?
  get() = if (hasPhsCA()) getPhsCA() else null

