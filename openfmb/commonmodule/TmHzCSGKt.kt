//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializetmHzCSG")
public inline fun tmHzCSG(block: openfmb.commonmodule.TmHzCSGKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.TmHzCSG =
  openfmb.commonmodule.TmHzCSGKt.Dsl._create(openfmb.commonmodule.TmHzCSG.newBuilder()).apply { block() }._build()
public object TmHzCSGKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.TmHzCSG.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.TmHzCSG.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.TmHzCSG = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class OverCrvPtsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * HF Trip Curve Points
     * </pre>
     *
     * <code>repeated .commonmodule.TmHzPoint overCrvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
     public val overCrvPts: com.google.protobuf.kotlin.DslList<openfmb.commonmodule.TmHzPoint, OverCrvPtsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getOverCrvPtsList()
      )
    /**
     * <pre>
     * HF Trip Curve Points
     * </pre>
     *
     * <code>repeated .commonmodule.TmHzPoint overCrvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @param value The overCrvPts to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addOverCrvPts")
    public fun com.google.protobuf.kotlin.DslList<openfmb.commonmodule.TmHzPoint, OverCrvPtsProxy>.add(value: openfmb.commonmodule.TmHzPoint) {
      _builder.addOverCrvPts(value)
    }
    /**
     * <pre>
     * HF Trip Curve Points
     * </pre>
     *
     * <code>repeated .commonmodule.TmHzPoint overCrvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @param value The overCrvPts to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignOverCrvPts")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<openfmb.commonmodule.TmHzPoint, OverCrvPtsProxy>.plusAssign(value: openfmb.commonmodule.TmHzPoint) {
      add(value)
    }
    /**
     * <pre>
     * HF Trip Curve Points
     * </pre>
     *
     * <code>repeated .commonmodule.TmHzPoint overCrvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @param values The overCrvPts to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllOverCrvPts")
    public fun com.google.protobuf.kotlin.DslList<openfmb.commonmodule.TmHzPoint, OverCrvPtsProxy>.addAll(values: kotlin.collections.Iterable<openfmb.commonmodule.TmHzPoint>) {
      _builder.addAllOverCrvPts(values)
    }
    /**
     * <pre>
     * HF Trip Curve Points
     * </pre>
     *
     * <code>repeated .commonmodule.TmHzPoint overCrvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @param values The overCrvPts to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllOverCrvPts")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<openfmb.commonmodule.TmHzPoint, OverCrvPtsProxy>.plusAssign(values: kotlin.collections.Iterable<openfmb.commonmodule.TmHzPoint>) {
      addAll(values)
    }
    /**
     * <pre>
     * HF Trip Curve Points
     * </pre>
     *
     * <code>repeated .commonmodule.TmHzPoint overCrvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @param index The index to set the value at.
     * @param value The overCrvPts to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setOverCrvPts")
    public operator fun com.google.protobuf.kotlin.DslList<openfmb.commonmodule.TmHzPoint, OverCrvPtsProxy>.set(index: kotlin.Int, value: openfmb.commonmodule.TmHzPoint) {
      _builder.setOverCrvPts(index, value)
    }
    /**
     * <pre>
     * HF Trip Curve Points
     * </pre>
     *
     * <code>repeated .commonmodule.TmHzPoint overCrvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearOverCrvPts")
    public fun com.google.protobuf.kotlin.DslList<openfmb.commonmodule.TmHzPoint, OverCrvPtsProxy>.clear() {
      _builder.clearOverCrvPts()
    }


    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class UnderCrvPtsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * LF Trip Curve Points
     * </pre>
     *
     * <code>repeated .commonmodule.TmHzPoint underCrvPts = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
     public val underCrvPts: com.google.protobuf.kotlin.DslList<openfmb.commonmodule.TmHzPoint, UnderCrvPtsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getUnderCrvPtsList()
      )
    /**
     * <pre>
     * LF Trip Curve Points
     * </pre>
     *
     * <code>repeated .commonmodule.TmHzPoint underCrvPts = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @param value The underCrvPts to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addUnderCrvPts")
    public fun com.google.protobuf.kotlin.DslList<openfmb.commonmodule.TmHzPoint, UnderCrvPtsProxy>.add(value: openfmb.commonmodule.TmHzPoint) {
      _builder.addUnderCrvPts(value)
    }
    /**
     * <pre>
     * LF Trip Curve Points
     * </pre>
     *
     * <code>repeated .commonmodule.TmHzPoint underCrvPts = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @param value The underCrvPts to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignUnderCrvPts")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<openfmb.commonmodule.TmHzPoint, UnderCrvPtsProxy>.plusAssign(value: openfmb.commonmodule.TmHzPoint) {
      add(value)
    }
    /**
     * <pre>
     * LF Trip Curve Points
     * </pre>
     *
     * <code>repeated .commonmodule.TmHzPoint underCrvPts = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @param values The underCrvPts to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllUnderCrvPts")
    public fun com.google.protobuf.kotlin.DslList<openfmb.commonmodule.TmHzPoint, UnderCrvPtsProxy>.addAll(values: kotlin.collections.Iterable<openfmb.commonmodule.TmHzPoint>) {
      _builder.addAllUnderCrvPts(values)
    }
    /**
     * <pre>
     * LF Trip Curve Points
     * </pre>
     *
     * <code>repeated .commonmodule.TmHzPoint underCrvPts = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @param values The underCrvPts to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllUnderCrvPts")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<openfmb.commonmodule.TmHzPoint, UnderCrvPtsProxy>.plusAssign(values: kotlin.collections.Iterable<openfmb.commonmodule.TmHzPoint>) {
      addAll(values)
    }
    /**
     * <pre>
     * LF Trip Curve Points
     * </pre>
     *
     * <code>repeated .commonmodule.TmHzPoint underCrvPts = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @param index The index to set the value at.
     * @param value The underCrvPts to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setUnderCrvPts")
    public operator fun com.google.protobuf.kotlin.DslList<openfmb.commonmodule.TmHzPoint, UnderCrvPtsProxy>.set(index: kotlin.Int, value: openfmb.commonmodule.TmHzPoint) {
      _builder.setUnderCrvPts(index, value)
    }
    /**
     * <pre>
     * LF Trip Curve Points
     * </pre>
     *
     * <code>repeated .commonmodule.TmHzPoint underCrvPts = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearUnderCrvPts")
    public fun com.google.protobuf.kotlin.DslList<openfmb.commonmodule.TmHzPoint, UnderCrvPtsProxy>.clear() {
      _builder.clearUnderCrvPts()
    }

  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.TmHzCSG.copy(block: openfmb.commonmodule.TmHzCSGKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.TmHzCSG =
  openfmb.commonmodule.TmHzCSGKt.Dsl._create(this.toBuilder()).apply { block() }._build()

