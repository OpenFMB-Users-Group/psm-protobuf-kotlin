// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: environmentmodule/environmentmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.environmentmodule;

@kotlin.jvm.JvmName("-initializeenvironmentReadingProfile")
public inline fun environmentReadingProfile(block: openfmb.environmentmodule.EnvironmentReadingProfileKt.Dsl.() -> kotlin.Unit): openfmb.environmentmodule.EnvironmentReadingProfile =
  openfmb.environmentmodule.EnvironmentReadingProfileKt.Dsl._create(openfmb.environmentmodule.EnvironmentReadingProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Environment reading profile
 * ```
 *
 * Protobuf type `environmentmodule.EnvironmentReadingProfile`
 */
public object EnvironmentReadingProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.environmentmodule.EnvironmentReadingProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.environmentmodule.EnvironmentReadingProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.environmentmodule.EnvironmentReadingProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var readingMessageInfo: openfmb.commonmodule.ReadingMessageInfo
      @kotlin.jvm.JvmName("getReadingMessageInfo")
        get() = _builder.readingMessageInfo
      @kotlin.jvm.JvmName("setReadingMessageInfo")
        set(value) {
        _builder.readingMessageInfo = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearReadingMessageInfo() {
      _builder.clearReadingMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the readingMessageInfo field is set.
     */
    public fun hasReadingMessageInfo(): kotlin.Boolean {
      return _builder.hasReadingMessageInfo()
    }

    public val EnvironmentReadingProfileKt.Dsl.readingMessageInfoOrNull: openfmb.commonmodule.ReadingMessageInfo?
      get() = _builder.readingMessageInfoOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.Sensor sensor = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var sensor: openfmb.commonmodule.Sensor
      @kotlin.jvm.JvmName("getSensor")
        get() = _builder.sensor
      @kotlin.jvm.JvmName("setSensor")
        set(value) {
        _builder.sensor = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.Sensor sensor = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearSensor() {
      _builder.clearSensor()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.Sensor sensor = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the sensor field is set.
     */
    public fun hasSensor(): kotlin.Boolean {
      return _builder.hasSensor()
    }

    public val EnvironmentReadingProfileKt.Dsl.sensorOrNull: openfmb.commonmodule.Sensor?
      get() = _builder.sensorOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.environmentmodule.EnvironmentReading environmentReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var environmentReading: openfmb.environmentmodule.EnvironmentReading
      @kotlin.jvm.JvmName("getEnvironmentReading")
        get() = _builder.environmentReading
      @kotlin.jvm.JvmName("setEnvironmentReading")
        set(value) {
        _builder.environmentReading = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.environmentmodule.EnvironmentReading environmentReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearEnvironmentReading() {
      _builder.clearEnvironmentReading()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.environmentmodule.EnvironmentReading environmentReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the environmentReading field is set.
     */
    public fun hasEnvironmentReading(): kotlin.Boolean {
      return _builder.hasEnvironmentReading()
    }

    public val EnvironmentReadingProfileKt.Dsl.environmentReadingOrNull: openfmb.environmentmodule.EnvironmentReading?
      get() = _builder.environmentReadingOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.environmentmodule.EnvironmentReadingProfile.copy(block: `openfmb.environmentmodule`.EnvironmentReadingProfileKt.Dsl.() -> kotlin.Unit): openfmb.environmentmodule.EnvironmentReadingProfile =
  `openfmb.environmentmodule`.EnvironmentReadingProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.environmentmodule.EnvironmentReadingProfileOrBuilder.readingMessageInfoOrNull: openfmb.commonmodule.ReadingMessageInfo?
  get() = if (hasReadingMessageInfo()) getReadingMessageInfo() else null

public val openfmb.environmentmodule.EnvironmentReadingProfileOrBuilder.sensorOrNull: openfmb.commonmodule.Sensor?
  get() = if (hasSensor()) getSensor() else null

public val openfmb.environmentmodule.EnvironmentReadingProfileOrBuilder.environmentReadingOrNull: openfmb.environmentmodule.EnvironmentReading?
  get() = if (hasEnvironmentReading()) getEnvironmentReading() else null

