//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: regulatormodule/regulatormodule.proto

package openfmb.regulatormodule;

@kotlin.jvm.JvmName("-initializeregulatorEvent")
public inline fun regulatorEvent(block: openfmb.regulatormodule.RegulatorEventKt.Dsl.() -> kotlin.Unit): openfmb.regulatormodule.RegulatorEvent =
  openfmb.regulatormodule.RegulatorEventKt.Dsl._create(openfmb.regulatormodule.RegulatorEvent.newBuilder()).apply { block() }._build()
public object RegulatorEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.regulatormodule.RegulatorEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.regulatormodule.RegulatorEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.regulatormodule.RegulatorEvent = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var eventValue: openfmb.commonmodule.EventValue
      @JvmName("getEventValue")
      get() = _builder.getEventValue()
      @JvmName("setEventValue")
      set(value) {
        _builder.setEventValue(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearEventValue() {
      _builder.clearEventValue()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the eventValue field is set.
     */
    public fun hasEventValue(): kotlin.Boolean {
      return _builder.hasEventValue()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.regulatormodule.RegulatorEventAndStatusANCR regulatorEventAndStatusANCR = 2;</code>
     */
    public var regulatorEventAndStatusANCR: openfmb.regulatormodule.RegulatorEventAndStatusANCR
      @JvmName("getRegulatorEventAndStatusANCR")
      get() = _builder.getRegulatorEventAndStatusANCR()
      @JvmName("setRegulatorEventAndStatusANCR")
      set(value) {
        _builder.setRegulatorEventAndStatusANCR(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.regulatormodule.RegulatorEventAndStatusANCR regulatorEventAndStatusANCR = 2;</code>
     */
    public fun clearRegulatorEventAndStatusANCR() {
      _builder.clearRegulatorEventAndStatusANCR()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.regulatormodule.RegulatorEventAndStatusANCR regulatorEventAndStatusANCR = 2;</code>
     * @return Whether the regulatorEventAndStatusANCR field is set.
     */
    public fun hasRegulatorEventAndStatusANCR(): kotlin.Boolean {
      return _builder.hasRegulatorEventAndStatusANCR()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.regulatormodule.RegulatorEvent.copy(block: openfmb.regulatormodule.RegulatorEventKt.Dsl.() -> kotlin.Unit): openfmb.regulatormodule.RegulatorEvent =
  openfmb.regulatormodule.RegulatorEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.regulatormodule.RegulatorEventOrBuilder.eventValueOrNull: openfmb.commonmodule.EventValue?
  get() = if (hasEventValue()) getEventValue() else null

public val openfmb.regulatormodule.RegulatorEventOrBuilder.regulatorEventAndStatusANCROrNull: openfmb.regulatormodule.RegulatorEventAndStatusANCR?
  get() = if (hasRegulatorEventAndStatusANCR()) getRegulatorEventAndStatusANCR() else null

