// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializeeventMessageInfo")
public inline fun eventMessageInfo(block: openfmb.commonmodule.EventMessageInfoKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.EventMessageInfo =
  openfmb.commonmodule.EventMessageInfoKt.Dsl._create(openfmb.commonmodule.EventMessageInfo.newBuilder()).apply { block() }._build()
/**
 * ```
 * Generic event message information
 * ```
 *
 * Protobuf type `commonmodule.EventMessageInfo`
 */
public object EventMessageInfoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.EventMessageInfo.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.EventMessageInfo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.EventMessageInfo = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var messageInfo: openfmb.commonmodule.MessageInfo
      @JvmName("getMessageInfo")
      get() = _builder.getMessageInfo()
      @JvmName("setMessageInfo")
      set(value) {
        _builder.setMessageInfo(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearMessageInfo() {
      _builder.clearMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.MessageInfo messageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the messageInfo field is set.
     */
    public fun hasMessageInfo(): kotlin.Boolean {
      return _builder.hasMessageInfo()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.EventMessageInfo.copy(block: openfmb.commonmodule.EventMessageInfoKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.EventMessageInfo =
  openfmb.commonmodule.EventMessageInfoKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.EventMessageInfoOrBuilder.messageInfoOrNull: openfmb.commonmodule.MessageInfo?
  get() = if (hasMessageInfo()) getMessageInfo() else null

