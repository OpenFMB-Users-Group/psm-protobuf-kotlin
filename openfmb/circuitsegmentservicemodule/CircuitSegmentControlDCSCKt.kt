//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: circuitsegmentservicemodule/circuitsegmentservicemodule.proto

package openfmb.circuitsegmentservicemodule;

@kotlin.jvm.JvmName("-initializecircuitSegmentControlDCSC")
public inline fun circuitSegmentControlDCSC(block: openfmb.circuitsegmentservicemodule.CircuitSegmentControlDCSCKt.Dsl.() -> kotlin.Unit): openfmb.circuitsegmentservicemodule.CircuitSegmentControlDCSC =
  openfmb.circuitsegmentservicemodule.CircuitSegmentControlDCSCKt.Dsl._create(openfmb.circuitsegmentservicemodule.CircuitSegmentControlDCSC.newBuilder()).apply { block() }._build()
public object CircuitSegmentControlDCSCKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.circuitsegmentservicemodule.CircuitSegmentControlDCSC.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.circuitsegmentservicemodule.CircuitSegmentControlDCSC.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.circuitsegmentservicemodule.CircuitSegmentControlDCSC = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var logicalNodeForControl: openfmb.commonmodule.LogicalNodeForControl
      @JvmName("getLogicalNodeForControl")
      get() = _builder.getLogicalNodeForControl()
      @JvmName("setLogicalNodeForControl")
      set(value) {
        _builder.setLogicalNodeForControl(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearLogicalNodeForControl() {
      _builder.clearLogicalNodeForControl()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the logicalNodeForControl field is set.
     */
    public fun hasLogicalNodeForControl(): kotlin.Boolean {
      return _builder.hasLogicalNodeForControl()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.circuitsegmentservicemodule.ENG_CircuitSegmentServiceModeKind CircuitSegmentServiceMode = 2;</code>
     */
    public var circuitSegmentServiceMode: openfmb.circuitsegmentservicemodule.ENG_CircuitSegmentServiceModeKind
      @JvmName("getCircuitSegmentServiceMode")
      get() = _builder.getCircuitSegmentServiceMode()
      @JvmName("setCircuitSegmentServiceMode")
      set(value) {
        _builder.setCircuitSegmentServiceMode(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.circuitsegmentservicemodule.ENG_CircuitSegmentServiceModeKind CircuitSegmentServiceMode = 2;</code>
     */
    public fun clearCircuitSegmentServiceMode() {
      _builder.clearCircuitSegmentServiceMode()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.circuitsegmentservicemodule.ENG_CircuitSegmentServiceModeKind CircuitSegmentServiceMode = 2;</code>
     * @return Whether the circuitSegmentServiceMode field is set.
     */
    public fun hasCircuitSegmentServiceMode(): kotlin.Boolean {
      return _builder.hasCircuitSegmentServiceMode()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ControlDPC Island = 3;</code>
     */
    public var island: openfmb.commonmodule.ControlDPC
      @JvmName("getIsland")
      get() = _builder.getIsland()
      @JvmName("setIsland")
      set(value) {
        _builder.setIsland(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ControlDPC Island = 3;</code>
     */
    public fun clearIsland() {
      _builder.clearIsland()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ControlDPC Island = 3;</code>
     * @return Whether the island field is set.
     */
    public fun hasIsland(): kotlin.Boolean {
      return _builder.hasIsland()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.circuitsegmentservicemodule.CircuitSegmentControlDCSC.copy(block: openfmb.circuitsegmentservicemodule.CircuitSegmentControlDCSCKt.Dsl.() -> kotlin.Unit): openfmb.circuitsegmentservicemodule.CircuitSegmentControlDCSC =
  openfmb.circuitsegmentservicemodule.CircuitSegmentControlDCSCKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val openfmb.circuitsegmentservicemodule.CircuitSegmentControlDCSCOrBuilder.logicalNodeForControlOrNull: openfmb.commonmodule.LogicalNodeForControl?
  get() = if (hasLogicalNodeForControl()) getLogicalNodeForControl() else null

val openfmb.circuitsegmentservicemodule.CircuitSegmentControlDCSCOrBuilder.circuitSegmentServiceModeOrNull: openfmb.circuitsegmentservicemodule.ENG_CircuitSegmentServiceModeKind?
  get() = if (hasCircuitSegmentServiceMode()) getCircuitSegmentServiceMode() else null

val openfmb.circuitsegmentservicemodule.CircuitSegmentControlDCSCOrBuilder.islandOrNull: openfmb.commonmodule.ControlDPC?
  get() = if (hasIsland()) getIsland() else null

