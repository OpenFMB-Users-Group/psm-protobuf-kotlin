// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: solarmodule/solarmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.solarmodule;

@kotlin.jvm.JvmName("-initializesolarCapabilityOverrideProfile")
public inline fun solarCapabilityOverrideProfile(block: openfmb.solarmodule.SolarCapabilityOverrideProfileKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarCapabilityOverrideProfile =
  openfmb.solarmodule.SolarCapabilityOverrideProfileKt.Dsl._create(openfmb.solarmodule.SolarCapabilityOverrideProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Generation capability profile
 * ```
 *
 * Protobuf type `solarmodule.SolarCapabilityOverrideProfile`
 */
public object SolarCapabilityOverrideProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.solarmodule.SolarCapabilityOverrideProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.solarmodule.SolarCapabilityOverrideProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.solarmodule.SolarCapabilityOverrideProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.CapabilityMessageInfo capabilityMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var capabilityMessageInfo: openfmb.commonmodule.CapabilityMessageInfo
      @JvmName("getCapabilityMessageInfo")
      get() = _builder.getCapabilityMessageInfo()
      @JvmName("setCapabilityMessageInfo")
      set(value) {
        _builder.setCapabilityMessageInfo(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.CapabilityMessageInfo capabilityMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearCapabilityMessageInfo() {
      _builder.clearCapabilityMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.CapabilityMessageInfo capabilityMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the capabilityMessageInfo field is set.
     */
    public fun hasCapabilityMessageInfo(): kotlin.Boolean {
      return _builder.hasCapabilityMessageInfo()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarCapabilityOverride solarCapabilityOverride = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var solarCapabilityOverride: openfmb.solarmodule.SolarCapabilityOverride
      @JvmName("getSolarCapabilityOverride")
      get() = _builder.getSolarCapabilityOverride()
      @JvmName("setSolarCapabilityOverride")
      set(value) {
        _builder.setSolarCapabilityOverride(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarCapabilityOverride solarCapabilityOverride = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearSolarCapabilityOverride() {
      _builder.clearSolarCapabilityOverride()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarCapabilityOverride solarCapabilityOverride = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the solarCapabilityOverride field is set.
     */
    public fun hasSolarCapabilityOverride(): kotlin.Boolean {
      return _builder.hasSolarCapabilityOverride()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var solarInverter: openfmb.solarmodule.SolarInverter
      @JvmName("getSolarInverter")
      get() = _builder.getSolarInverter()
      @JvmName("setSolarInverter")
      set(value) {
        _builder.setSolarInverter(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearSolarInverter() {
      _builder.clearSolarInverter()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the solarInverter field is set.
     */
    public fun hasSolarInverter(): kotlin.Boolean {
      return _builder.hasSolarInverter()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun openfmb.solarmodule.SolarCapabilityOverrideProfile.copy(block: openfmb.solarmodule.SolarCapabilityOverrideProfileKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarCapabilityOverrideProfile =
  openfmb.solarmodule.SolarCapabilityOverrideProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.solarmodule.SolarCapabilityOverrideProfileOrBuilder.capabilityMessageInfoOrNull: openfmb.commonmodule.CapabilityMessageInfo?
  get() = if (hasCapabilityMessageInfo()) getCapabilityMessageInfo() else null

public val openfmb.solarmodule.SolarCapabilityOverrideProfileOrBuilder.solarCapabilityOverrideOrNull: openfmb.solarmodule.SolarCapabilityOverride?
  get() = if (hasSolarCapabilityOverride()) getSolarCapabilityOverride() else null

public val openfmb.solarmodule.SolarCapabilityOverrideProfileOrBuilder.solarInverterOrNull: openfmb.solarmodule.SolarInverter?
  get() = if (hasSolarInverter()) getSolarInverter() else null

