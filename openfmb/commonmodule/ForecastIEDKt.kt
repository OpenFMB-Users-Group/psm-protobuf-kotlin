// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializeforecastIED")
public inline fun forecastIED(block: openfmb.commonmodule.ForecastIEDKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ForecastIED =
  openfmb.commonmodule.ForecastIEDKt.Dsl._create(openfmb.commonmodule.ForecastIED.newBuilder()).apply { block() }._build()
/**
 * ```
 * Intelligent Electronic Device is a device with a microprocessor that can contain one or more
 * (IEC61850) SERVERs. In the context of IEC61850, IED could be an electronic protection device, a
 * controller or even a laptop/desktop computer. <b>Modelling note</b>: This class is not explicitly
 * defined in IEC61850-7-2 (but only in SCL: IEC61850-6). However, it is an important concept that
 * deserves its place in the meta-model. When the meta-model gets instantiated from a direct link to an
 * IED with an IEC61850 SERVER, we typically create an instance of the meta-model IED per connection.
 * When the meta-model gets instantiated from an SCL file, there is the full description of IED and its
 * functions.
 * ```
 *
 * Protobuf type `commonmodule.ForecastIED`
 */
public object ForecastIEDKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.ForecastIED.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.ForecastIED.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.ForecastIED = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ForecastValueSource forecastValueSource = 1 [(.uml.option_parent_message) = true];`
     */
    public var forecastValueSource: openfmb.commonmodule.ForecastValueSource
      @JvmName("getForecastValueSource")
      get() = _builder.getForecastValueSource()
      @JvmName("setForecastValueSource")
      set(value) {
        _builder.setForecastValueSource(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ForecastValueSource forecastValueSource = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearForecastValueSource() {
      _builder.clearForecastValueSource()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ForecastValueSource forecastValueSource = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the forecastValueSource field is set.
     */
    public fun hasForecastValueSource(): kotlin.Boolean {
      return _builder.hasForecastValueSource()
    }

    /**
     * ```
     * For control, this is an application ID, unique within communication system, and if the message
     * is transformed between gateway the original source application ID should be kept.
     * ```
     *
     * `string sourceApplicationID = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var sourceApplicationID: kotlin.String
      @JvmName("getSourceApplicationID")
      get() = _builder.getSourceApplicationID()
      @JvmName("setSourceApplicationID")
      set(value) {
        _builder.setSourceApplicationID(value)
      }
    /**
     * ```
     * For control, this is an application ID, unique within communication system, and if the message
     * is transformed between gateway the original source application ID should be kept.
     * ```
     *
     * `string sourceApplicationID = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearSourceApplicationID() {
      _builder.clearSourceApplicationID()
    }

    /**
     * ```
     * Message publication date time
     * ```
     *
     * `int64 sourceDateTime = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var sourceDateTime: kotlin.Long
      @JvmName("getSourceDateTime")
      get() = _builder.getSourceDateTime()
      @JvmName("setSourceDateTime")
      set(value) {
        _builder.setSourceDateTime(value)
      }
    /**
     * ```
     * Message publication date time
     * ```
     *
     * `int64 sourceDateTime = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearSourceDateTime() {
      _builder.clearSourceDateTime()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.ForecastIED.copy(block: openfmb.commonmodule.ForecastIEDKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ForecastIED =
  openfmb.commonmodule.ForecastIEDKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.ForecastIEDOrBuilder.forecastValueSourceOrNull: openfmb.commonmodule.ForecastValueSource?
  get() = if (hasForecastValueSource()) getForecastValueSource() else null

