// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: reclosermodule/reclosermodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.reclosermodule;

@kotlin.jvm.JvmName("-initializerecloserEvent")
public inline fun recloserEvent(block: openfmb.reclosermodule.RecloserEventKt.Dsl.() -> kotlin.Unit): openfmb.reclosermodule.RecloserEvent =
  openfmb.reclosermodule.RecloserEventKt.Dsl._create(openfmb.reclosermodule.RecloserEvent.newBuilder()).apply { block() }._build()
/**
 * ```
 * Recloser event
 * ```
 *
 * Protobuf type `reclosermodule.RecloserEvent`
 */
public object RecloserEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.reclosermodule.RecloserEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.reclosermodule.RecloserEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.reclosermodule.RecloserEvent = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];`
     */
    public var eventValue: openfmb.commonmodule.EventValue
      @JvmName("getEventValue")
      get() = _builder.getEventValue()
      @JvmName("setEventValue")
      set(value) {
        _builder.setEventValue(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearEventValue() {
      _builder.clearEventValue()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the eventValue field is set.
     */
    public fun hasEventValue(): kotlin.Boolean {
      return _builder.hasEventValue()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusAndEventXCBR statusAndEventXCBR = 2;`
     */
    public var statusAndEventXCBR: openfmb.commonmodule.StatusAndEventXCBR
      @JvmName("getStatusAndEventXCBR")
      get() = _builder.getStatusAndEventXCBR()
      @JvmName("setStatusAndEventXCBR")
      set(value) {
        _builder.setStatusAndEventXCBR(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusAndEventXCBR statusAndEventXCBR = 2;`
     */
    public fun clearStatusAndEventXCBR() {
      _builder.clearStatusAndEventXCBR()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusAndEventXCBR statusAndEventXCBR = 2;`
     * @return Whether the statusAndEventXCBR field is set.
     */
    public fun hasStatusAndEventXCBR(): kotlin.Boolean {
      return _builder.hasStatusAndEventXCBR()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.reclosermodule.RecloserEvent.copy(block: openfmb.reclosermodule.RecloserEventKt.Dsl.() -> kotlin.Unit): openfmb.reclosermodule.RecloserEvent =
  openfmb.reclosermodule.RecloserEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.reclosermodule.RecloserEventOrBuilder.eventValueOrNull: openfmb.commonmodule.EventValue?
  get() = if (hasEventValue()) getEventValue() else null

public val openfmb.reclosermodule.RecloserEventOrBuilder.statusAndEventXCBROrNull: openfmb.commonmodule.StatusAndEventXCBR?
  get() = if (hasStatusAndEventXCBR()) getStatusAndEventXCBR() else null

