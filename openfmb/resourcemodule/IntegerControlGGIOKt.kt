//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: resourcemodule/resourcemodule.proto

package openfmb.resourcemodule;

@kotlin.jvm.JvmName("-initializeintegerControlGGIO")
public inline fun integerControlGGIO(block: openfmb.resourcemodule.IntegerControlGGIOKt.Dsl.() -> kotlin.Unit): openfmb.resourcemodule.IntegerControlGGIO =
  openfmb.resourcemodule.IntegerControlGGIOKt.Dsl._create(openfmb.resourcemodule.IntegerControlGGIO.newBuilder()).apply { block() }._build()
public object IntegerControlGGIOKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.resourcemodule.IntegerControlGGIO.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.resourcemodule.IntegerControlGGIO.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.resourcemodule.IntegerControlGGIO = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var logicalNode: openfmb.commonmodule.LogicalNode
      @JvmName("getLogicalNode")
      get() = _builder.getLogicalNode()
      @JvmName("setLogicalNode")
      set(value) {
        _builder.setLogicalNode(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearLogicalNode() {
      _builder.clearLogicalNode()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the logicalNode field is set.
     */
    public fun hasLogicalNode(): kotlin.Boolean {
      return _builder.hasLogicalNode()
    }

    /**
     * <pre>
     * (controllable) Generic integer controllable status output &lt;i&gt;n&lt;/i&gt;.
     * </pre>
     *
     * <code>.commonmodule.ControlINC ISCSO = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var iSCSO: openfmb.commonmodule.ControlINC
      @JvmName("getISCSO")
      get() = _builder.getISCSO()
      @JvmName("setISCSO")
      set(value) {
        _builder.setISCSO(value)
      }
    /**
     * <pre>
     * (controllable) Generic integer controllable status output &lt;i&gt;n&lt;/i&gt;.
     * </pre>
     *
     * <code>.commonmodule.ControlINC ISCSO = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearISCSO() {
      _builder.clearISCSO()
    }
    /**
     * <pre>
     * (controllable) Generic integer controllable status output &lt;i&gt;n&lt;/i&gt;.
     * </pre>
     *
     * <code>.commonmodule.ControlINC ISCSO = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @return Whether the iSCSO field is set.
     */
    public fun hasISCSO(): kotlin.Boolean {
      return _builder.hasISCSO()
    }

    /**
     * <pre>
     * Phase code
     * </pre>
     *
     * <code>.commonmodule.Optional_PhaseCodeKind Phase = 3;</code>
     */
    public var phase: openfmb.commonmodule.Optional_PhaseCodeKind
      @JvmName("getPhase")
      get() = _builder.getPhase()
      @JvmName("setPhase")
      set(value) {
        _builder.setPhase(value)
      }
    /**
     * <pre>
     * Phase code
     * </pre>
     *
     * <code>.commonmodule.Optional_PhaseCodeKind Phase = 3;</code>
     */
    public fun clearPhase() {
      _builder.clearPhase()
    }
    /**
     * <pre>
     * Phase code
     * </pre>
     *
     * <code>.commonmodule.Optional_PhaseCodeKind Phase = 3;</code>
     * @return Whether the phase field is set.
     */
    public fun hasPhase(): kotlin.Boolean {
      return _builder.hasPhase()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.resourcemodule.IntegerControlGGIO.copy(block: openfmb.resourcemodule.IntegerControlGGIOKt.Dsl.() -> kotlin.Unit): openfmb.resourcemodule.IntegerControlGGIO =
  openfmb.resourcemodule.IntegerControlGGIOKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.resourcemodule.IntegerControlGGIOOrBuilder.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
  get() = if (hasLogicalNode()) getLogicalNode() else null

public val openfmb.resourcemodule.IntegerControlGGIOOrBuilder.iSCSOOrNull: openfmb.commonmodule.ControlINC?
  get() = if (hasISCSO()) getISCSO() else null

public val openfmb.resourcemodule.IntegerControlGGIOOrBuilder.phaseOrNull: openfmb.commonmodule.Optional_PhaseCodeKind?
  get() = if (hasPhase()) getPhase() else null

