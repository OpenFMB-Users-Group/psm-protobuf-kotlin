// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: breakermodule/breakermodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.breakermodule;

@kotlin.jvm.JvmName("-initializebreakerEvent")
public inline fun breakerEvent(block: openfmb.breakermodule.BreakerEventKt.Dsl.() -> kotlin.Unit): openfmb.breakermodule.BreakerEvent =
  openfmb.breakermodule.BreakerEventKt.Dsl._create(openfmb.breakermodule.BreakerEvent.newBuilder()).apply { block() }._build()
/**
 * ```
 * Breaker event class
 * ```
 *
 * Protobuf type `breakermodule.BreakerEvent`
 */
public object BreakerEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.breakermodule.BreakerEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.breakermodule.BreakerEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.breakermodule.BreakerEvent = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];`
     */
    public var eventValue: openfmb.commonmodule.EventValue
      @kotlin.jvm.JvmName("getEventValue")
        get() = _builder.eventValue
      @kotlin.jvm.JvmName("setEventValue")
        set(value) {
        _builder.eventValue = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearEventValue() {
      _builder.clearEventValue()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the eventValue field is set.
     */
    public fun hasEventValue(): kotlin.Boolean {
      return _builder.hasEventValue()
    }

    public val BreakerEventKt.Dsl.eventValueOrNull: openfmb.commonmodule.EventValue?
      get() = _builder.eventValueOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusAndEventXCBR statusAndEventXCBR = 2;`
     */
    public var statusAndEventXCBR: openfmb.commonmodule.StatusAndEventXCBR
      @kotlin.jvm.JvmName("getStatusAndEventXCBR")
        get() = _builder.statusAndEventXCBR
      @kotlin.jvm.JvmName("setStatusAndEventXCBR")
        set(value) {
        _builder.statusAndEventXCBR = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusAndEventXCBR statusAndEventXCBR = 2;`
     */
    public fun clearStatusAndEventXCBR() {
      _builder.clearStatusAndEventXCBR()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.StatusAndEventXCBR statusAndEventXCBR = 2;`
     * @return Whether the statusAndEventXCBR field is set.
     */
    public fun hasStatusAndEventXCBR(): kotlin.Boolean {
      return _builder.hasStatusAndEventXCBR()
    }

    public val BreakerEventKt.Dsl.statusAndEventXCBROrNull: openfmb.commonmodule.StatusAndEventXCBR?
      get() = _builder.statusAndEventXCBROrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.breakermodule.BreakerEvent.copy(block: `openfmb.breakermodule`.BreakerEventKt.Dsl.() -> kotlin.Unit): openfmb.breakermodule.BreakerEvent =
  `openfmb.breakermodule`.BreakerEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.breakermodule.BreakerEventOrBuilder.eventValueOrNull: openfmb.commonmodule.EventValue?
  get() = if (hasEventValue()) getEventValue() else null

public val openfmb.breakermodule.BreakerEventOrBuilder.statusAndEventXCBROrNull: openfmb.commonmodule.StatusAndEventXCBR?
  get() = if (hasStatusAndEventXCBR()) getStatusAndEventXCBR() else null

