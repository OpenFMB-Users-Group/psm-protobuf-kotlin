// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: switchmodule/switchmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.switchmodule;

@kotlin.jvm.JvmName("-initializeswitchEventProfile")
public inline fun switchEventProfile(block: openfmb.switchmodule.SwitchEventProfileKt.Dsl.() -> kotlin.Unit): openfmb.switchmodule.SwitchEventProfile =
  openfmb.switchmodule.SwitchEventProfileKt.Dsl._create(openfmb.switchmodule.SwitchEventProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Switch event profile
 * ```
 *
 * Protobuf type `switchmodule.SwitchEventProfile`
 */
public object SwitchEventProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.switchmodule.SwitchEventProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.switchmodule.SwitchEventProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.switchmodule.SwitchEventProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var eventMessageInfo: openfmb.commonmodule.EventMessageInfo
      @kotlin.jvm.JvmName("getEventMessageInfo")
        get() = _builder.eventMessageInfo
      @kotlin.jvm.JvmName("setEventMessageInfo")
        set(value) {
        _builder.eventMessageInfo = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearEventMessageInfo() {
      _builder.clearEventMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the eventMessageInfo field is set.
     */
    public fun hasEventMessageInfo(): kotlin.Boolean {
      return _builder.hasEventMessageInfo()
    }

    public val SwitchEventProfileKt.Dsl.eventMessageInfoOrNull: openfmb.commonmodule.EventMessageInfo?
      get() = _builder.eventMessageInfoOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.switchmodule.ProtectedSwitch protectedSwitch = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var protectedSwitch: openfmb.switchmodule.ProtectedSwitch
      @kotlin.jvm.JvmName("getProtectedSwitch")
        get() = _builder.protectedSwitch
      @kotlin.jvm.JvmName("setProtectedSwitch")
        set(value) {
        _builder.protectedSwitch = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.switchmodule.ProtectedSwitch protectedSwitch = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearProtectedSwitch() {
      _builder.clearProtectedSwitch()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.switchmodule.ProtectedSwitch protectedSwitch = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the protectedSwitch field is set.
     */
    public fun hasProtectedSwitch(): kotlin.Boolean {
      return _builder.hasProtectedSwitch()
    }

    public val SwitchEventProfileKt.Dsl.protectedSwitchOrNull: openfmb.switchmodule.ProtectedSwitch?
      get() = _builder.protectedSwitchOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.switchmodule.SwitchEvent switchEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var switchEvent: openfmb.switchmodule.SwitchEvent
      @kotlin.jvm.JvmName("getSwitchEvent")
        get() = _builder.switchEvent
      @kotlin.jvm.JvmName("setSwitchEvent")
        set(value) {
        _builder.switchEvent = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.switchmodule.SwitchEvent switchEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearSwitchEvent() {
      _builder.clearSwitchEvent()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.switchmodule.SwitchEvent switchEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the switchEvent field is set.
     */
    public fun hasSwitchEvent(): kotlin.Boolean {
      return _builder.hasSwitchEvent()
    }

    public val SwitchEventProfileKt.Dsl.switchEventOrNull: openfmb.switchmodule.SwitchEvent?
      get() = _builder.switchEventOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.switchmodule.SwitchEventProfile.copy(block: `openfmb.switchmodule`.SwitchEventProfileKt.Dsl.() -> kotlin.Unit): openfmb.switchmodule.SwitchEventProfile =
  `openfmb.switchmodule`.SwitchEventProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.switchmodule.SwitchEventProfileOrBuilder.eventMessageInfoOrNull: openfmb.commonmodule.EventMessageInfo?
  get() = if (hasEventMessageInfo()) getEventMessageInfo() else null

public val openfmb.switchmodule.SwitchEventProfileOrBuilder.protectedSwitchOrNull: openfmb.switchmodule.ProtectedSwitch?
  get() = if (hasProtectedSwitch()) getProtectedSwitch() else null

public val openfmb.switchmodule.SwitchEventProfileOrBuilder.switchEventOrNull: openfmb.switchmodule.SwitchEvent?
  get() = if (hasSwitchEvent()) getSwitchEvent() else null

