// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializeenergyConsumer")
public inline fun energyConsumer(block: openfmb.commonmodule.EnergyConsumerKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.EnergyConsumer =
  openfmb.commonmodule.EnergyConsumerKt.Dsl._create(openfmb.commonmodule.EnergyConsumer.newBuilder()).apply { block() }._build()
/**
 * ```
 * Generic user of energy - a  point of consumption on the power system model.
 * ```
 *
 * Protobuf type `commonmodule.EnergyConsumer`
 */
public object EnergyConsumerKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.EnergyConsumer.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.EnergyConsumer.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.EnergyConsumer = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];`
     */
    public var conductingEquipment: openfmb.commonmodule.ConductingEquipment
      @kotlin.jvm.JvmName("getConductingEquipment")
        get() = _builder.conductingEquipment
      @kotlin.jvm.JvmName("setConductingEquipment")
        set(value) {
        _builder.conductingEquipment = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearConductingEquipment() {
      _builder.clearConductingEquipment()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the conductingEquipment field is set.
     */
    public fun hasConductingEquipment(): kotlin.Boolean {
      return _builder.hasConductingEquipment()
    }

    public val EnergyConsumerKt.Dsl.conductingEquipmentOrNull: openfmb.commonmodule.ConductingEquipment?
      get() = _builder.conductingEquipmentOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.StringValue operatingLimit = 2;`
     */
    public var operatingLimit: com.google.protobuf.StringValue
      @kotlin.jvm.JvmName("getOperatingLimit")
        get() = _builder.operatingLimit
      @kotlin.jvm.JvmName("setOperatingLimit")
        set(value) {
        _builder.operatingLimit = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.StringValue operatingLimit = 2;`
     */
    public fun clearOperatingLimit() {
      _builder.clearOperatingLimit()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.StringValue operatingLimit = 2;`
     * @return Whether the operatingLimit field is set.
     */
    public fun hasOperatingLimit(): kotlin.Boolean {
      return _builder.hasOperatingLimit()
    }

    public val EnergyConsumerKt.Dsl.operatingLimitOrNull: com.google.protobuf.StringValue?
      get() = _builder.operatingLimitOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.EnergyConsumer.copy(block: `openfmb.commonmodule`.EnergyConsumerKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.EnergyConsumer =
  `openfmb.commonmodule`.EnergyConsumerKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.EnergyConsumerOrBuilder.conductingEquipmentOrNull: openfmb.commonmodule.ConductingEquipment?
  get() = if (hasConductingEquipment()) getConductingEquipment() else null

public val openfmb.commonmodule.EnergyConsumerOrBuilder.operatingLimitOrNull: com.google.protobuf.StringValue?
  get() = if (hasOperatingLimit()) getOperatingLimit() else null

