// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializecontrolValue")
public inline fun controlValue(block: openfmb.commonmodule.ControlValueKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ControlValue =
  openfmb.commonmodule.ControlValueKt.Dsl._create(openfmb.commonmodule.ControlValue.newBuilder()).apply { block() }._build()
/**
 * ```
 * The value of a control command which could either be a setpoint or a control schedule in curve. 
 * The attribute modBlk is used to tag out a device. if it is TRUE, any setpoints and control schedule
 * in a message payload should be ignored.   It should also be presented in a status profile.  Any
 * modBlk value change (i.e. TRUE to FALSE and vice versa) should trigger an event.
 * ```
 *
 * Protobuf type `commonmodule.ControlValue`
 */
public object ControlValueKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.ControlValue.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.ControlValue.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.ControlValue = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];`
     */
    public var identifiedObject: openfmb.commonmodule.IdentifiedObject
      @JvmName("getIdentifiedObject")
      get() = _builder.getIdentifiedObject()
      @JvmName("setIdentifiedObject")
      set(value) {
        _builder.setIdentifiedObject(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearIdentifiedObject() {
      _builder.clearIdentifiedObject()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the identifiedObject field is set.
     */
    public fun hasIdentifiedObject(): kotlin.Boolean {
      return _builder.hasIdentifiedObject()
    }

    /**
     * ```
     * The attribute modBlk is used to tag out a device. If it is TRUE, any setpoints and control in a
     * message payload should be ignored.   It should also be presented in a status profile.  Any modBlk
     * value change (i.e. TRUE to FALSE and vice versa) should trigger an event.
     * ```
     *
     * `.google.protobuf.BoolValue modBlk = 3;`
     */
    public var modBlk: com.google.protobuf.BoolValue
      @JvmName("getModBlk")
      get() = _builder.getModBlk()
      @JvmName("setModBlk")
      set(value) {
        _builder.setModBlk(value)
      }
    /**
     * ```
     * The attribute modBlk is used to tag out a device. If it is TRUE, any setpoints and control in a
     * message payload should be ignored.   It should also be presented in a status profile.  Any modBlk
     * value change (i.e. TRUE to FALSE and vice versa) should trigger an event.
     * ```
     *
     * `.google.protobuf.BoolValue modBlk = 3;`
     */
    public fun clearModBlk() {
      _builder.clearModBlk()
    }
    /**
     * ```
     * The attribute modBlk is used to tag out a device. If it is TRUE, any setpoints and control in a
     * message payload should be ignored.   It should also be presented in a status profile.  Any modBlk
     * value change (i.e. TRUE to FALSE and vice versa) should trigger an event.
     * ```
     *
     * `.google.protobuf.BoolValue modBlk = 3;`
     * @return Whether the modBlk field is set.
     */
    public fun hasModBlk(): kotlin.Boolean {
      return _builder.hasModBlk()
    }

    /**
     * ```
     * If true, reset the device before executing any other controls.
     * ```
     *
     * `.google.protobuf.BoolValue reset = 4;`
     */
    public var reset: com.google.protobuf.BoolValue
      @JvmName("getReset")
      get() = _builder.getReset()
      @JvmName("setReset")
      set(value) {
        _builder.setReset(value)
      }
    /**
     * ```
     * If true, reset the device before executing any other controls.
     * ```
     *
     * `.google.protobuf.BoolValue reset = 4;`
     */
    public fun clearReset() {
      _builder.clearReset()
    }
    /**
     * ```
     * If true, reset the device before executing any other controls.
     * ```
     *
     * `.google.protobuf.BoolValue reset = 4;`
     * @return Whether the reset field is set.
     */
    public fun hasReset(): kotlin.Boolean {
      return _builder.hasReset()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun openfmb.commonmodule.ControlValue.copy(block: openfmb.commonmodule.ControlValueKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ControlValue =
  openfmb.commonmodule.ControlValueKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.ControlValueOrBuilder.identifiedObjectOrNull: openfmb.commonmodule.IdentifiedObject?
  get() = if (hasIdentifiedObject()) getIdentifiedObject() else null

public val openfmb.commonmodule.ControlValueOrBuilder.modBlkOrNull: com.google.protobuf.BoolValue?
  get() = if (hasModBlk()) getModBlk() else null

public val openfmb.commonmodule.ControlValueOrBuilder.resetOrNull: com.google.protobuf.BoolValue?
  get() = if (hasReset()) getReset() else null

