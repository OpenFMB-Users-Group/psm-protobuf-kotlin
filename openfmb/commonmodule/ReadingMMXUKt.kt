//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializereadingMMXU")
public inline fun readingMMXU(block: openfmb.commonmodule.ReadingMMXUKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ReadingMMXU =
  openfmb.commonmodule.ReadingMMXUKt.Dsl._create(openfmb.commonmodule.ReadingMMXU.newBuilder()).apply { block() }._build()
public object ReadingMMXUKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.ReadingMMXU.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.ReadingMMXU.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.ReadingMMXU = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var logicalNode: openfmb.commonmodule.LogicalNode
      @JvmName("getLogicalNode")
      get() = _builder.getLogicalNode()
      @JvmName("setLogicalNode")
      set(value) {
        _builder.setLogicalNode(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearLogicalNode() {
      _builder.clearLogicalNode()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the logicalNode field is set.
     */
    public fun hasLogicalNode(): kotlin.Boolean {
      return _builder.hasLogicalNode()
    }

    /**
     * <pre>
     * Phase to ground/phase to neutral three phase currents.
     * </pre>
     *
     * <code>.commonmodule.WYE A = 2;</code>
     */
    public var a: openfmb.commonmodule.WYE
      @JvmName("getA")
      get() = _builder.getA()
      @JvmName("setA")
      set(value) {
        _builder.setA(value)
      }
    /**
     * <pre>
     * Phase to ground/phase to neutral three phase currents.
     * </pre>
     *
     * <code>.commonmodule.WYE A = 2;</code>
     */
    public fun clearA() {
      _builder.clearA()
    }
    /**
     * <pre>
     * Phase to ground/phase to neutral three phase currents.
     * </pre>
     *
     * <code>.commonmodule.WYE A = 2;</code>
     * @return Whether the a field is set.
     */
    public fun hasA(): kotlin.Boolean {
      return _builder.hasA()
    }

    /**
     * <pre>
     * Kind of statistical calculation, specifying how the data attributes that represent analogue
     * values have been calculated. The calculation method shall be the same for all data objects of the
     * logical node instance.If the value is 'PEAK_FUNDAMENTAL', angle may be present in a data object of
     * complex measured value type (CMV, such as in WYE, DEL, etc.), otherwise angle is not used (if
     * ‘TRUE_RMS’ and ‘RMS_FUNDAMENTAL’).If the value is 'unspecified', the dependent data objects may be
     * meaningless.
     * </pre>
     *
     * <code>.commonmodule.ENG_CalcMethodKind ClcMth = 3;</code>
     */
    public var clcMth: openfmb.commonmodule.ENG_CalcMethodKind
      @JvmName("getClcMth")
      get() = _builder.getClcMth()
      @JvmName("setClcMth")
      set(value) {
        _builder.setClcMth(value)
      }
    /**
     * <pre>
     * Kind of statistical calculation, specifying how the data attributes that represent analogue
     * values have been calculated. The calculation method shall be the same for all data objects of the
     * logical node instance.If the value is 'PEAK_FUNDAMENTAL', angle may be present in a data object of
     * complex measured value type (CMV, such as in WYE, DEL, etc.), otherwise angle is not used (if
     * ‘TRUE_RMS’ and ‘RMS_FUNDAMENTAL’).If the value is 'unspecified', the dependent data objects may be
     * meaningless.
     * </pre>
     *
     * <code>.commonmodule.ENG_CalcMethodKind ClcMth = 3;</code>
     */
    public fun clearClcMth() {
      _builder.clearClcMth()
    }
    /**
     * <pre>
     * Kind of statistical calculation, specifying how the data attributes that represent analogue
     * values have been calculated. The calculation method shall be the same for all data objects of the
     * logical node instance.If the value is 'PEAK_FUNDAMENTAL', angle may be present in a data object of
     * complex measured value type (CMV, such as in WYE, DEL, etc.), otherwise angle is not used (if
     * ‘TRUE_RMS’ and ‘RMS_FUNDAMENTAL’).If the value is 'unspecified', the dependent data objects may be
     * meaningless.
     * </pre>
     *
     * <code>.commonmodule.ENG_CalcMethodKind ClcMth = 3;</code>
     * @return Whether the clcMth field is set.
     */
    public fun hasClcMth(): kotlin.Boolean {
      return _builder.hasClcMth()
    }

    /**
     * <pre>
     * Frequency [Hz].
     * </pre>
     *
     * <code>.commonmodule.MV Hz = 4;</code>
     */
    public var hz: openfmb.commonmodule.MV
      @JvmName("getHz")
      get() = _builder.getHz()
      @JvmName("setHz")
      set(value) {
        _builder.setHz(value)
      }
    /**
     * <pre>
     * Frequency [Hz].
     * </pre>
     *
     * <code>.commonmodule.MV Hz = 4;</code>
     */
    public fun clearHz() {
      _builder.clearHz()
    }
    /**
     * <pre>
     * Frequency [Hz].
     * </pre>
     *
     * <code>.commonmodule.MV Hz = 4;</code>
     * @return Whether the hz field is set.
     */
    public fun hasHz(): kotlin.Boolean {
      return _builder.hasHz()
    }

    /**
     * <pre>
     * Phase to ground/phase to neutral power factors.The power factor is defined as P (active power) /
     * S (apparent power), so the value range is 0...1. If current (I) and voltage (U) are sinusoidal and
     * displaced by the angle phi, then the power factor is |cos phi|, again with the value range 0...1.
     * Therefore, for the power factor per phase, value is contained in 'mag' and 'ang' is not used.
     * </pre>
     *
     * <code>.commonmodule.WYE PF = 5;</code>
     */
    public var pF: openfmb.commonmodule.WYE
      @JvmName("getPF")
      get() = _builder.getPF()
      @JvmName("setPF")
      set(value) {
        _builder.setPF(value)
      }
    /**
     * <pre>
     * Phase to ground/phase to neutral power factors.The power factor is defined as P (active power) /
     * S (apparent power), so the value range is 0...1. If current (I) and voltage (U) are sinusoidal and
     * displaced by the angle phi, then the power factor is |cos phi|, again with the value range 0...1.
     * Therefore, for the power factor per phase, value is contained in 'mag' and 'ang' is not used.
     * </pre>
     *
     * <code>.commonmodule.WYE PF = 5;</code>
     */
    public fun clearPF() {
      _builder.clearPF()
    }
    /**
     * <pre>
     * Phase to ground/phase to neutral power factors.The power factor is defined as P (active power) /
     * S (apparent power), so the value range is 0...1. If current (I) and voltage (U) are sinusoidal and
     * displaced by the angle phi, then the power factor is |cos phi|, again with the value range 0...1.
     * Therefore, for the power factor per phase, value is contained in 'mag' and 'ang' is not used.
     * </pre>
     *
     * <code>.commonmodule.WYE PF = 5;</code>
     * @return Whether the pF field is set.
     */
    public fun hasPF(): kotlin.Boolean {
      return _builder.hasPF()
    }

    /**
     * <pre>
     * Sign convention for power factor 'PF' (and reactive power 'VAr').
     * </pre>
     *
     * <code>.commonmodule.ENG_PFSignKind PFSign = 6;</code>
     */
    public var pFSign: openfmb.commonmodule.ENG_PFSignKind
      @JvmName("getPFSign")
      get() = _builder.getPFSign()
      @JvmName("setPFSign")
      set(value) {
        _builder.setPFSign(value)
      }
    /**
     * <pre>
     * Sign convention for power factor 'PF' (and reactive power 'VAr').
     * </pre>
     *
     * <code>.commonmodule.ENG_PFSignKind PFSign = 6;</code>
     */
    public fun clearPFSign() {
      _builder.clearPFSign()
    }
    /**
     * <pre>
     * Sign convention for power factor 'PF' (and reactive power 'VAr').
     * </pre>
     *
     * <code>.commonmodule.ENG_PFSignKind PFSign = 6;</code>
     * @return Whether the pFSign field is set.
     */
    public fun hasPFSign(): kotlin.Boolean {
      return _builder.hasPFSign()
    }

    /**
     * <pre>
     * Phase to ground (line) voltages.
     * </pre>
     *
     * <code>.commonmodule.WYE PhV = 7;</code>
     */
    public var phV: openfmb.commonmodule.WYE
      @JvmName("getPhV")
      get() = _builder.getPhV()
      @JvmName("setPhV")
      set(value) {
        _builder.setPhV(value)
      }
    /**
     * <pre>
     * Phase to ground (line) voltages.
     * </pre>
     *
     * <code>.commonmodule.WYE PhV = 7;</code>
     */
    public fun clearPhV() {
      _builder.clearPhV()
    }
    /**
     * <pre>
     * Phase to ground (line) voltages.
     * </pre>
     *
     * <code>.commonmodule.WYE PhV = 7;</code>
     * @return Whether the phV field is set.
     */
    public fun hasPhV(): kotlin.Boolean {
      return _builder.hasPhV()
    }

    /**
     * <pre>
     * Phase to phase voltages.
     * </pre>
     *
     * <code>.commonmodule.DEL PPV = 8;</code>
     */
    public var pPV: openfmb.commonmodule.DEL
      @JvmName("getPPV")
      get() = _builder.getPPV()
      @JvmName("setPPV")
      set(value) {
        _builder.setPPV(value)
      }
    /**
     * <pre>
     * Phase to phase voltages.
     * </pre>
     *
     * <code>.commonmodule.DEL PPV = 8;</code>
     */
    public fun clearPPV() {
      _builder.clearPPV()
    }
    /**
     * <pre>
     * Phase to phase voltages.
     * </pre>
     *
     * <code>.commonmodule.DEL PPV = 8;</code>
     * @return Whether the pPV field is set.
     */
    public fun hasPPV(): kotlin.Boolean {
      return _builder.hasPPV()
    }

    /**
     * <pre>
     * Phase to ground/phase to neutral apparent powers S.
     * </pre>
     *
     * <code>.commonmodule.WYE VA = 9;</code>
     */
    public var vA: openfmb.commonmodule.WYE
      @JvmName("getVA")
      get() = _builder.getVA()
      @JvmName("setVA")
      set(value) {
        _builder.setVA(value)
      }
    /**
     * <pre>
     * Phase to ground/phase to neutral apparent powers S.
     * </pre>
     *
     * <code>.commonmodule.WYE VA = 9;</code>
     */
    public fun clearVA() {
      _builder.clearVA()
    }
    /**
     * <pre>
     * Phase to ground/phase to neutral apparent powers S.
     * </pre>
     *
     * <code>.commonmodule.WYE VA = 9;</code>
     * @return Whether the vA field is set.
     */
    public fun hasVA(): kotlin.Boolean {
      return _builder.hasVA()
    }

    /**
     * <pre>
     * Phase to ground/phase to neutral reactive powers Q.
     * </pre>
     *
     * <code>.commonmodule.WYE VAr = 10;</code>
     */
    public var vAr: openfmb.commonmodule.WYE
      @JvmName("getVAr")
      get() = _builder.getVAr()
      @JvmName("setVAr")
      set(value) {
        _builder.setVAr(value)
      }
    /**
     * <pre>
     * Phase to ground/phase to neutral reactive powers Q.
     * </pre>
     *
     * <code>.commonmodule.WYE VAr = 10;</code>
     */
    public fun clearVAr() {
      _builder.clearVAr()
    }
    /**
     * <pre>
     * Phase to ground/phase to neutral reactive powers Q.
     * </pre>
     *
     * <code>.commonmodule.WYE VAr = 10;</code>
     * @return Whether the vAr field is set.
     */
    public fun hasVAr(): kotlin.Boolean {
      return _builder.hasVAr()
    }

    /**
     * <pre>
     * Phase to ground/phase to neutral real powers P.
     * </pre>
     *
     * <code>.commonmodule.WYE W = 11;</code>
     */
    public var w: openfmb.commonmodule.WYE
      @JvmName("getW")
      get() = _builder.getW()
      @JvmName("setW")
      set(value) {
        _builder.setW(value)
      }
    /**
     * <pre>
     * Phase to ground/phase to neutral real powers P.
     * </pre>
     *
     * <code>.commonmodule.WYE W = 11;</code>
     */
    public fun clearW() {
      _builder.clearW()
    }
    /**
     * <pre>
     * Phase to ground/phase to neutral real powers P.
     * </pre>
     *
     * <code>.commonmodule.WYE W = 11;</code>
     * @return Whether the w field is set.
     */
    public fun hasW(): kotlin.Boolean {
      return _builder.hasW()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.ReadingMMXU.copy(block: openfmb.commonmodule.ReadingMMXUKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ReadingMMXU =
  openfmb.commonmodule.ReadingMMXUKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val openfmb.commonmodule.ReadingMMXUOrBuilder.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
  get() = if (hasLogicalNode()) getLogicalNode() else null

val openfmb.commonmodule.ReadingMMXUOrBuilder.aOrNull: openfmb.commonmodule.WYE?
  get() = if (hasA()) getA() else null

val openfmb.commonmodule.ReadingMMXUOrBuilder.clcMthOrNull: openfmb.commonmodule.ENG_CalcMethodKind?
  get() = if (hasClcMth()) getClcMth() else null

val openfmb.commonmodule.ReadingMMXUOrBuilder.hzOrNull: openfmb.commonmodule.MV?
  get() = if (hasHz()) getHz() else null

val openfmb.commonmodule.ReadingMMXUOrBuilder.pFOrNull: openfmb.commonmodule.WYE?
  get() = if (hasPF()) getPF() else null

val openfmb.commonmodule.ReadingMMXUOrBuilder.pFSignOrNull: openfmb.commonmodule.ENG_PFSignKind?
  get() = if (hasPFSign()) getPFSign() else null

val openfmb.commonmodule.ReadingMMXUOrBuilder.phVOrNull: openfmb.commonmodule.WYE?
  get() = if (hasPhV()) getPhV() else null

val openfmb.commonmodule.ReadingMMXUOrBuilder.pPVOrNull: openfmb.commonmodule.DEL?
  get() = if (hasPPV()) getPPV() else null

val openfmb.commonmodule.ReadingMMXUOrBuilder.vAOrNull: openfmb.commonmodule.WYE?
  get() = if (hasVA()) getVA() else null

val openfmb.commonmodule.ReadingMMXUOrBuilder.vArOrNull: openfmb.commonmodule.WYE?
  get() = if (hasVAr()) getVAr() else null

val openfmb.commonmodule.ReadingMMXUOrBuilder.wOrNull: openfmb.commonmodule.WYE?
  get() = if (hasW()) getW() else null

