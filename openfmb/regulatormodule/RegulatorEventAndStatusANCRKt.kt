//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: regulatormodule/regulatormodule.proto

package openfmb.regulatormodule;

@kotlin.jvm.JvmName("-initializeregulatorEventAndStatusANCR")
public inline fun regulatorEventAndStatusANCR(block: openfmb.regulatormodule.RegulatorEventAndStatusANCRKt.Dsl.() -> kotlin.Unit): openfmb.regulatormodule.RegulatorEventAndStatusANCR =
  openfmb.regulatormodule.RegulatorEventAndStatusANCRKt.Dsl._create(openfmb.regulatormodule.RegulatorEventAndStatusANCR.newBuilder()).apply { block() }._build()
public object RegulatorEventAndStatusANCRKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.regulatormodule.RegulatorEventAndStatusANCR.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.regulatormodule.RegulatorEventAndStatusANCR.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.regulatormodule.RegulatorEventAndStatusANCR = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var logicalNodeForEventAndStatus: openfmb.commonmodule.LogicalNodeForEventAndStatus
      @JvmName("getLogicalNodeForEventAndStatus")
      get() = _builder.getLogicalNodeForEventAndStatus()
      @JvmName("setLogicalNodeForEventAndStatus")
      set(value) {
        _builder.setLogicalNodeForEventAndStatus(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearLogicalNodeForEventAndStatus() {
      _builder.clearLogicalNodeForEventAndStatus()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the logicalNodeForEventAndStatus field is set.
     */
    public fun hasLogicalNodeForEventAndStatus(): kotlin.Boolean {
      return _builder.hasLogicalNodeForEventAndStatus()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ENS_DynamicTestKind DynamicTest = 2;</code>
     */
    public var dynamicTest: openfmb.commonmodule.ENS_DynamicTestKind
      @JvmName("getDynamicTest")
      get() = _builder.getDynamicTest()
      @JvmName("setDynamicTest")
      set(value) {
        _builder.setDynamicTest(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ENS_DynamicTestKind DynamicTest = 2;</code>
     */
    public fun clearDynamicTest() {
      _builder.clearDynamicTest()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ENS_DynamicTestKind DynamicTest = 2;</code>
     * @return Whether the dynamicTest field is set.
     */
    public fun hasDynamicTest(): kotlin.Boolean {
      return _builder.hasDynamicTest()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.regulatormodule.RegulatorEventAndStatusATCC PointStatus = 3;</code>
     */
    public var pointStatus: openfmb.regulatormodule.RegulatorEventAndStatusATCC
      @JvmName("getPointStatus")
      get() = _builder.getPointStatus()
      @JvmName("setPointStatus")
      set(value) {
        _builder.setPointStatus(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.regulatormodule.RegulatorEventAndStatusATCC PointStatus = 3;</code>
     */
    public fun clearPointStatus() {
      _builder.clearPointStatus()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.regulatormodule.RegulatorEventAndStatusATCC PointStatus = 3;</code>
     * @return Whether the pointStatus field is set.
     */
    public fun hasPointStatus(): kotlin.Boolean {
      return _builder.hasPointStatus()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.regulatormodule.RegulatorEventAndStatusANCR.copy(block: openfmb.regulatormodule.RegulatorEventAndStatusANCRKt.Dsl.() -> kotlin.Unit): openfmb.regulatormodule.RegulatorEventAndStatusANCR =
  openfmb.regulatormodule.RegulatorEventAndStatusANCRKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.regulatormodule.RegulatorEventAndStatusANCROrBuilder.logicalNodeForEventAndStatusOrNull: openfmb.commonmodule.LogicalNodeForEventAndStatus?
  get() = if (hasLogicalNodeForEventAndStatus()) getLogicalNodeForEventAndStatus() else null

public val openfmb.regulatormodule.RegulatorEventAndStatusANCROrBuilder.dynamicTestOrNull: openfmb.commonmodule.ENS_DynamicTestKind?
  get() = if (hasDynamicTest()) getDynamicTest() else null

public val openfmb.regulatormodule.RegulatorEventAndStatusANCROrBuilder.pointStatusOrNull: openfmb.regulatormodule.RegulatorEventAndStatusATCC?
  get() = if (hasPointStatus()) getPointStatus() else null

