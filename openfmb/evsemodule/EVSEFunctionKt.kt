// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: evsemodule/evsemodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.evsemodule;

@kotlin.jvm.JvmName("-initializeeVSEFunction")
public inline fun eVSEFunction(block: openfmb.evsemodule.EVSEFunctionKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.EVSEFunction =
  openfmb.evsemodule.EVSEFunctionKt.Dsl._create(openfmb.evsemodule.EVSEFunction.newBuilder()).apply { block() }._build()
/**
 * ```
 * EVSE inverter high level functions.
 * ```
 *
 * Protobuf type `evsemodule.EVSEFunction`
 */
public object EVSEFunctionKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.evsemodule.EVSEFunction.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.evsemodule.EVSEFunction.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.evsemodule.EVSEFunction = _builder.build()

    /**
     * ```
     * EVSE inverter high level function to reduce (smooth) charging or discharging rate of change.
     * ```
     *
     * `.commonmodule.CapacityFirming capacityFirming = 1;`
     */
    public var capacityFirming: openfmb.commonmodule.CapacityFirming
      @kotlin.jvm.JvmName("getCapacityFirming")
        get() = _builder.capacityFirming
      @kotlin.jvm.JvmName("setCapacityFirming")
        set(value) {
        _builder.capacityFirming = value
      }
    /**
     * ```
     * EVSE inverter high level function to reduce (smooth) charging or discharging rate of change.
     * ```
     *
     * `.commonmodule.CapacityFirming capacityFirming = 1;`
     */
    public fun clearCapacityFirming() {
      _builder.clearCapacityFirming()
    }
    /**
     * ```
     * EVSE inverter high level function to reduce (smooth) charging or discharging rate of change.
     * ```
     *
     * `.commonmodule.CapacityFirming capacityFirming = 1;`
     * @return Whether the capacityFirming field is set.
     */
    public fun hasCapacityFirming(): kotlin.Boolean {
      return _builder.hasCapacityFirming()
    }

    public val EVSEFunctionKt.Dsl.capacityFirmingOrNull: openfmb.commonmodule.CapacityFirming?
      get() = _builder.capacityFirmingOrNull

    /**
     * ```
     * EVSE inverter high level function to maintain frequency within dead bands.
     * ```
     *
     * `.commonmodule.FrequencyRegulation frequencyRegulation = 2;`
     */
    public var frequencyRegulation: openfmb.commonmodule.FrequencyRegulation
      @kotlin.jvm.JvmName("getFrequencyRegulation")
        get() = _builder.frequencyRegulation
      @kotlin.jvm.JvmName("setFrequencyRegulation")
        set(value) {
        _builder.frequencyRegulation = value
      }
    /**
     * ```
     * EVSE inverter high level function to maintain frequency within dead bands.
     * ```
     *
     * `.commonmodule.FrequencyRegulation frequencyRegulation = 2;`
     */
    public fun clearFrequencyRegulation() {
      _builder.clearFrequencyRegulation()
    }
    /**
     * ```
     * EVSE inverter high level function to maintain frequency within dead bands.
     * ```
     *
     * `.commonmodule.FrequencyRegulation frequencyRegulation = 2;`
     * @return Whether the frequencyRegulation field is set.
     */
    public fun hasFrequencyRegulation(): kotlin.Boolean {
      return _builder.hasFrequencyRegulation()
    }

    public val EVSEFunctionKt.Dsl.frequencyRegulationOrNull: openfmb.commonmodule.FrequencyRegulation?
      get() = _builder.frequencyRegulationOrNull

    /**
     * ```
     * EVSE inverter high level function to maintain power level by charging or discharging
     * ```
     *
     * `.commonmodule.PeakShaving peakShaving = 3;`
     */
    public var peakShaving: openfmb.commonmodule.PeakShaving
      @kotlin.jvm.JvmName("getPeakShaving")
        get() = _builder.peakShaving
      @kotlin.jvm.JvmName("setPeakShaving")
        set(value) {
        _builder.peakShaving = value
      }
    /**
     * ```
     * EVSE inverter high level function to maintain power level by charging or discharging
     * ```
     *
     * `.commonmodule.PeakShaving peakShaving = 3;`
     */
    public fun clearPeakShaving() {
      _builder.clearPeakShaving()
    }
    /**
     * ```
     * EVSE inverter high level function to maintain power level by charging or discharging
     * ```
     *
     * `.commonmodule.PeakShaving peakShaving = 3;`
     * @return Whether the peakShaving field is set.
     */
    public fun hasPeakShaving(): kotlin.Boolean {
      return _builder.hasPeakShaving()
    }

    public val EVSEFunctionKt.Dsl.peakShavingOrNull: openfmb.commonmodule.PeakShaving?
      get() = _builder.peakShavingOrNull

    /**
     * ```
     * EVSE inverter high level function to shut down ESS if SOC exceeds high or low limits.
     * ```
     *
     * `.commonmodule.SocLimit socLimit = 4;`
     */
    public var socLimit: openfmb.commonmodule.SocLimit
      @kotlin.jvm.JvmName("getSocLimit")
        get() = _builder.socLimit
      @kotlin.jvm.JvmName("setSocLimit")
        set(value) {
        _builder.socLimit = value
      }
    /**
     * ```
     * EVSE inverter high level function to shut down ESS if SOC exceeds high or low limits.
     * ```
     *
     * `.commonmodule.SocLimit socLimit = 4;`
     */
    public fun clearSocLimit() {
      _builder.clearSocLimit()
    }
    /**
     * ```
     * EVSE inverter high level function to shut down ESS if SOC exceeds high or low limits.
     * ```
     *
     * `.commonmodule.SocLimit socLimit = 4;`
     * @return Whether the socLimit field is set.
     */
    public fun hasSocLimit(): kotlin.Boolean {
      return _builder.hasSocLimit()
    }

    public val EVSEFunctionKt.Dsl.socLimitOrNull: openfmb.commonmodule.SocLimit?
      get() = _builder.socLimitOrNull

    /**
     * ```
     * EVSE inverter high level function to maintain SOC within dead bands
     * ```
     *
     * `.commonmodule.SOCManagement socManagement = 5;`
     */
    public var socManagement: openfmb.commonmodule.SOCManagement
      @kotlin.jvm.JvmName("getSocManagement")
        get() = _builder.socManagement
      @kotlin.jvm.JvmName("setSocManagement")
        set(value) {
        _builder.socManagement = value
      }
    /**
     * ```
     * EVSE inverter high level function to maintain SOC within dead bands
     * ```
     *
     * `.commonmodule.SOCManagement socManagement = 5;`
     */
    public fun clearSocManagement() {
      _builder.clearSocManagement()
    }
    /**
     * ```
     * EVSE inverter high level function to maintain SOC within dead bands
     * ```
     *
     * `.commonmodule.SOCManagement socManagement = 5;`
     * @return Whether the socManagement field is set.
     */
    public fun hasSocManagement(): kotlin.Boolean {
      return _builder.hasSocManagement()
    }

    public val EVSEFunctionKt.Dsl.socManagementOrNull: openfmb.commonmodule.SOCManagement?
      get() = _builder.socManagementOrNull

    /**
     * ```
     * EVSE inverter high level function to maintain voltage within droop dead bands.
     * ```
     *
     * `.commonmodule.VoltageDroop voltageDroop = 6;`
     */
    public var voltageDroop: openfmb.commonmodule.VoltageDroop
      @kotlin.jvm.JvmName("getVoltageDroop")
        get() = _builder.voltageDroop
      @kotlin.jvm.JvmName("setVoltageDroop")
        set(value) {
        _builder.voltageDroop = value
      }
    /**
     * ```
     * EVSE inverter high level function to maintain voltage within droop dead bands.
     * ```
     *
     * `.commonmodule.VoltageDroop voltageDroop = 6;`
     */
    public fun clearVoltageDroop() {
      _builder.clearVoltageDroop()
    }
    /**
     * ```
     * EVSE inverter high level function to maintain voltage within droop dead bands.
     * ```
     *
     * `.commonmodule.VoltageDroop voltageDroop = 6;`
     * @return Whether the voltageDroop field is set.
     */
    public fun hasVoltageDroop(): kotlin.Boolean {
      return _builder.hasVoltageDroop()
    }

    public val EVSEFunctionKt.Dsl.voltageDroopOrNull: openfmb.commonmodule.VoltageDroop?
      get() = _builder.voltageDroopOrNull

    /**
     * ```
     * EVSE inverter high level function to maintain voltage within dead bands.
     * ```
     *
     * `.commonmodule.VoltagePI voltagePI = 7;`
     */
    public var voltagePI: openfmb.commonmodule.VoltagePI
      @kotlin.jvm.JvmName("getVoltagePI")
        get() = _builder.voltagePI
      @kotlin.jvm.JvmName("setVoltagePI")
        set(value) {
        _builder.voltagePI = value
      }
    /**
     * ```
     * EVSE inverter high level function to maintain voltage within dead bands.
     * ```
     *
     * `.commonmodule.VoltagePI voltagePI = 7;`
     */
    public fun clearVoltagePI() {
      _builder.clearVoltagePI()
    }
    /**
     * ```
     * EVSE inverter high level function to maintain voltage within dead bands.
     * ```
     *
     * `.commonmodule.VoltagePI voltagePI = 7;`
     * @return Whether the voltagePI field is set.
     */
    public fun hasVoltagePI(): kotlin.Boolean {
      return _builder.hasVoltagePI()
    }

    public val EVSEFunctionKt.Dsl.voltagePIOrNull: openfmb.commonmodule.VoltagePI?
      get() = _builder.voltagePIOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.evsemodule.EVSEFunction.copy(block: `openfmb.evsemodule`.EVSEFunctionKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.EVSEFunction =
  `openfmb.evsemodule`.EVSEFunctionKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.evsemodule.EVSEFunctionOrBuilder.capacityFirmingOrNull: openfmb.commonmodule.CapacityFirming?
  get() = if (hasCapacityFirming()) getCapacityFirming() else null

public val openfmb.evsemodule.EVSEFunctionOrBuilder.frequencyRegulationOrNull: openfmb.commonmodule.FrequencyRegulation?
  get() = if (hasFrequencyRegulation()) getFrequencyRegulation() else null

public val openfmb.evsemodule.EVSEFunctionOrBuilder.peakShavingOrNull: openfmb.commonmodule.PeakShaving?
  get() = if (hasPeakShaving()) getPeakShaving() else null

public val openfmb.evsemodule.EVSEFunctionOrBuilder.socLimitOrNull: openfmb.commonmodule.SocLimit?
  get() = if (hasSocLimit()) getSocLimit() else null

public val openfmb.evsemodule.EVSEFunctionOrBuilder.socManagementOrNull: openfmb.commonmodule.SOCManagement?
  get() = if (hasSocManagement()) getSocManagement() else null

public val openfmb.evsemodule.EVSEFunctionOrBuilder.voltageDroopOrNull: openfmb.commonmodule.VoltageDroop?
  get() = if (hasVoltageDroop()) getVoltageDroop() else null

public val openfmb.evsemodule.EVSEFunctionOrBuilder.voltagePIOrNull: openfmb.commonmodule.VoltagePI?
  get() = if (hasVoltagePI()) getVoltagePI() else null

