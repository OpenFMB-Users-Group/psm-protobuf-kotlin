// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: resourcemodule/resourcemodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.resourcemodule;

@kotlin.jvm.JvmName("-initializeresourceEventProfile")
public inline fun resourceEventProfile(block: openfmb.resourcemodule.ResourceEventProfileKt.Dsl.() -> kotlin.Unit): openfmb.resourcemodule.ResourceEventProfile =
  openfmb.resourcemodule.ResourceEventProfileKt.Dsl._create(openfmb.resourcemodule.ResourceEventProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Resource event module
 * ```
 *
 * Protobuf type `resourcemodule.ResourceEventProfile`
 */
public object ResourceEventProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.resourcemodule.ResourceEventProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.resourcemodule.ResourceEventProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.resourcemodule.ResourceEventProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var eventMessageInfo: openfmb.commonmodule.EventMessageInfo
      @JvmName("getEventMessageInfo")
      get() = _builder.getEventMessageInfo()
      @JvmName("setEventMessageInfo")
      set(value) {
        _builder.setEventMessageInfo(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearEventMessageInfo() {
      _builder.clearEventMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the eventMessageInfo field is set.
     */
    public fun hasEventMessageInfo(): kotlin.Boolean {
      return _builder.hasEventMessageInfo()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ConductingEquipment conductingEquipment = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var conductingEquipment: openfmb.commonmodule.ConductingEquipment
      @JvmName("getConductingEquipment")
      get() = _builder.getConductingEquipment()
      @JvmName("setConductingEquipment")
      set(value) {
        _builder.setConductingEquipment(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ConductingEquipment conductingEquipment = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearConductingEquipment() {
      _builder.clearConductingEquipment()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ConductingEquipment conductingEquipment = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the conductingEquipment field is set.
     */
    public fun hasConductingEquipment(): kotlin.Boolean {
      return _builder.hasConductingEquipment()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.resourcemodule.ResourceEvent resourceEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var resourceEvent: openfmb.resourcemodule.ResourceEvent
      @JvmName("getResourceEvent")
      get() = _builder.getResourceEvent()
      @JvmName("setResourceEvent")
      set(value) {
        _builder.setResourceEvent(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.resourcemodule.ResourceEvent resourceEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearResourceEvent() {
      _builder.clearResourceEvent()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.resourcemodule.ResourceEvent resourceEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the resourceEvent field is set.
     */
    public fun hasResourceEvent(): kotlin.Boolean {
      return _builder.hasResourceEvent()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.resourcemodule.ResourceEventProfile.copy(block: openfmb.resourcemodule.ResourceEventProfileKt.Dsl.() -> kotlin.Unit): openfmb.resourcemodule.ResourceEventProfile =
  openfmb.resourcemodule.ResourceEventProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.resourcemodule.ResourceEventProfileOrBuilder.eventMessageInfoOrNull: openfmb.commonmodule.EventMessageInfo?
  get() = if (hasEventMessageInfo()) getEventMessageInfo() else null

public val openfmb.resourcemodule.ResourceEventProfileOrBuilder.conductingEquipmentOrNull: openfmb.commonmodule.ConductingEquipment?
  get() = if (hasConductingEquipment()) getConductingEquipment() else null

public val openfmb.resourcemodule.ResourceEventProfileOrBuilder.resourceEventOrNull: openfmb.resourcemodule.ResourceEvent?
  get() = if (hasResourceEvent()) getResourceEvent() else null

