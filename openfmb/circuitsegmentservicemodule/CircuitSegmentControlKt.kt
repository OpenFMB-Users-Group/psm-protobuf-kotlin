// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: circuitsegmentservicemodule/circuitsegmentservicemodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.circuitsegmentservicemodule;

@kotlin.jvm.JvmName("-initializecircuitSegmentControl")
public inline fun circuitSegmentControl(block: openfmb.circuitsegmentservicemodule.CircuitSegmentControlKt.Dsl.() -> kotlin.Unit): openfmb.circuitsegmentservicemodule.CircuitSegmentControl =
  openfmb.circuitsegmentservicemodule.CircuitSegmentControlKt.Dsl._create(openfmb.circuitsegmentservicemodule.CircuitSegmentControl.newBuilder()).apply { block() }._build()
/**
 * ```
 * Switch discrete control
 * ```
 *
 * Protobuf type `circuitsegmentservicemodule.CircuitSegmentControl`
 */
public object CircuitSegmentControlKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.circuitsegmentservicemodule.CircuitSegmentControl.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.circuitsegmentservicemodule.CircuitSegmentControl.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.circuitsegmentservicemodule.CircuitSegmentControl = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];`
     */
    public var identifiedObject: openfmb.commonmodule.IdentifiedObject
      @JvmName("getIdentifiedObject")
      get() = _builder.getIdentifiedObject()
      @JvmName("setIdentifiedObject")
      set(value) {
        _builder.setIdentifiedObject(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearIdentifiedObject() {
      _builder.clearIdentifiedObject()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.IdentifiedObject identifiedObject = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the identifiedObject field is set.
     */
    public fun hasIdentifiedObject(): kotlin.Boolean {
      return _builder.hasIdentifiedObject()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.CheckConditions check = 2;`
     */
    public var check: openfmb.commonmodule.CheckConditions
      @JvmName("getCheck")
      get() = _builder.getCheck()
      @JvmName("setCheck")
      set(value) {
        _builder.setCheck(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.CheckConditions check = 2;`
     */
    public fun clearCheck() {
      _builder.clearCheck()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.CheckConditions check = 2;`
     * @return Whether the check field is set.
     */
    public fun hasCheck(): kotlin.Boolean {
      return _builder.hasCheck()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.circuitsegmentservicemodule.CircuitSegmentControlDCSC circuitSegmentControlDCSC = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var circuitSegmentControlDCSC: openfmb.circuitsegmentservicemodule.CircuitSegmentControlDCSC
      @JvmName("getCircuitSegmentControlDCSC")
      get() = _builder.getCircuitSegmentControlDCSC()
      @JvmName("setCircuitSegmentControlDCSC")
      set(value) {
        _builder.setCircuitSegmentControlDCSC(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.circuitsegmentservicemodule.CircuitSegmentControlDCSC circuitSegmentControlDCSC = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearCircuitSegmentControlDCSC() {
      _builder.clearCircuitSegmentControlDCSC()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.circuitsegmentservicemodule.CircuitSegmentControlDCSC circuitSegmentControlDCSC = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the circuitSegmentControlDCSC field is set.
     */
    public fun hasCircuitSegmentControlDCSC(): kotlin.Boolean {
      return _builder.hasCircuitSegmentControlDCSC()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun openfmb.circuitsegmentservicemodule.CircuitSegmentControl.copy(block: openfmb.circuitsegmentservicemodule.CircuitSegmentControlKt.Dsl.() -> kotlin.Unit): openfmb.circuitsegmentservicemodule.CircuitSegmentControl =
  openfmb.circuitsegmentservicemodule.CircuitSegmentControlKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.circuitsegmentservicemodule.CircuitSegmentControlOrBuilder.identifiedObjectOrNull: openfmb.commonmodule.IdentifiedObject?
  get() = if (hasIdentifiedObject()) getIdentifiedObject() else null

public val openfmb.circuitsegmentservicemodule.CircuitSegmentControlOrBuilder.checkOrNull: openfmb.commonmodule.CheckConditions?
  get() = if (hasCheck()) getCheck() else null

public val openfmb.circuitsegmentservicemodule.CircuitSegmentControlOrBuilder.circuitSegmentControlDCSCOrNull: openfmb.circuitsegmentservicemodule.CircuitSegmentControlDCSC?
  get() = if (hasCircuitSegmentControlDCSC()) getCircuitSegmentControlDCSC() else null

