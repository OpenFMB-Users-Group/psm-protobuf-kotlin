// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: essmodule/essmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.essmodule;

@kotlin.jvm.JvmName("-initializeeSSEventAndStatusZGEN")
public inline fun eSSEventAndStatusZGEN(block: openfmb.essmodule.ESSEventAndStatusZGENKt.Dsl.() -> kotlin.Unit): openfmb.essmodule.ESSEventAndStatusZGEN =
  openfmb.essmodule.ESSEventAndStatusZGENKt.Dsl._create(openfmb.essmodule.ESSEventAndStatusZGEN.newBuilder()).apply { block() }._build()
/**
 * ```
 * Specialized 61850 ZGEN class
 * ```
 *
 * Protobuf type `essmodule.ESSEventAndStatusZGEN`
 */
public object ESSEventAndStatusZGENKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.essmodule.ESSEventAndStatusZGEN.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.essmodule.ESSEventAndStatusZGEN.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.essmodule.ESSEventAndStatusZGEN = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];`
     */
    public var logicalNodeForEventAndStatus: openfmb.commonmodule.LogicalNodeForEventAndStatus
      @JvmName("getLogicalNodeForEventAndStatus")
      get() = _builder.getLogicalNodeForEventAndStatus()
      @JvmName("setLogicalNodeForEventAndStatus")
      set(value) {
        _builder.setLogicalNodeForEventAndStatus(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearLogicalNodeForEventAndStatus() {
      _builder.clearLogicalNodeForEventAndStatus()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the logicalNodeForEventAndStatus field is set.
     */
    public fun hasLogicalNodeForEventAndStatus(): kotlin.Boolean {
      return _builder.hasLogicalNodeForEventAndStatus()
    }

    /**
     * ```
     * DC Power On/Off Status; True = DC power on
     * ```
     *
     * `.commonmodule.StatusSPS AuxPwrSt = 2;`
     */
    public var auxPwrSt: openfmb.commonmodule.StatusSPS
      @JvmName("getAuxPwrSt")
      get() = _builder.getAuxPwrSt()
      @JvmName("setAuxPwrSt")
      set(value) {
        _builder.setAuxPwrSt(value)
      }
    /**
     * ```
     * DC Power On/Off Status; True = DC power on
     * ```
     *
     * `.commonmodule.StatusSPS AuxPwrSt = 2;`
     */
    public fun clearAuxPwrSt() {
      _builder.clearAuxPwrSt()
    }
    /**
     * ```
     * DC Power On/Off Status; True = DC power on
     * ```
     *
     * `.commonmodule.StatusSPS AuxPwrSt = 2;`
     * @return Whether the auxPwrSt field is set.
     */
    public fun hasAuxPwrSt(): kotlin.Boolean {
      return _builder.hasAuxPwrSt()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ENS_DynamicTestKind DynamicTest = 3;`
     */
    public var dynamicTest: openfmb.commonmodule.ENS_DynamicTestKind
      @JvmName("getDynamicTest")
      get() = _builder.getDynamicTest()
      @JvmName("setDynamicTest")
      set(value) {
        _builder.setDynamicTest(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ENS_DynamicTestKind DynamicTest = 3;`
     */
    public fun clearDynamicTest() {
      _builder.clearDynamicTest()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ENS_DynamicTestKind DynamicTest = 3;`
     * @return Whether the dynamicTest field is set.
     */
    public fun hasDynamicTest(): kotlin.Boolean {
      return _builder.hasDynamicTest()
    }

    /**
     * ```
     * Emergency stop
     * ```
     *
     * `.commonmodule.StatusSPS EmgStop = 4;`
     */
    public var emgStop: openfmb.commonmodule.StatusSPS
      @JvmName("getEmgStop")
      get() = _builder.getEmgStop()
      @JvmName("setEmgStop")
      set(value) {
        _builder.setEmgStop(value)
      }
    /**
     * ```
     * Emergency stop
     * ```
     *
     * `.commonmodule.StatusSPS EmgStop = 4;`
     */
    public fun clearEmgStop() {
      _builder.clearEmgStop()
    }
    /**
     * ```
     * Emergency stop
     * ```
     *
     * `.commonmodule.StatusSPS EmgStop = 4;`
     * @return Whether the emgStop field is set.
     */
    public fun hasEmgStop(): kotlin.Boolean {
      return _builder.hasEmgStop()
    }

    /**
     * ```
     * Generator is synchronized to EPS, or not; True = Synchronized
     * ```
     *
     * `.commonmodule.StatusSPS GnSynSt = 5;`
     */
    public var gnSynSt: openfmb.commonmodule.StatusSPS
      @JvmName("getGnSynSt")
      get() = _builder.getGnSynSt()
      @JvmName("setGnSynSt")
      set(value) {
        _builder.setGnSynSt(value)
      }
    /**
     * ```
     * Generator is synchronized to EPS, or not; True = Synchronized
     * ```
     *
     * `.commonmodule.StatusSPS GnSynSt = 5;`
     */
    public fun clearGnSynSt() {
      _builder.clearGnSynSt()
    }
    /**
     * ```
     * Generator is synchronized to EPS, or not; True = Synchronized
     * ```
     *
     * `.commonmodule.StatusSPS GnSynSt = 5;`
     * @return Whether the gnSynSt field is set.
     */
    public fun hasGnSynSt(): kotlin.Boolean {
      return _builder.hasGnSynSt()
    }

    /**
     * ```
     * Point status
     * ```
     *
     * `.essmodule.ESSPointStatus PointStatus = 6;`
     */
    public var pointStatus: openfmb.essmodule.ESSPointStatus
      @JvmName("getPointStatus")
      get() = _builder.getPointStatus()
      @JvmName("setPointStatus")
      set(value) {
        _builder.setPointStatus(value)
      }
    /**
     * ```
     * Point status
     * ```
     *
     * `.essmodule.ESSPointStatus PointStatus = 6;`
     */
    public fun clearPointStatus() {
      _builder.clearPointStatus()
    }
    /**
     * ```
     * Point status
     * ```
     *
     * `.essmodule.ESSPointStatus PointStatus = 6;`
     * @return Whether the pointStatus field is set.
     */
    public fun hasPointStatus(): kotlin.Boolean {
      return _builder.hasPointStatus()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun openfmb.essmodule.ESSEventAndStatusZGEN.copy(block: openfmb.essmodule.ESSEventAndStatusZGENKt.Dsl.() -> kotlin.Unit): openfmb.essmodule.ESSEventAndStatusZGEN =
  openfmb.essmodule.ESSEventAndStatusZGENKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.essmodule.ESSEventAndStatusZGENOrBuilder.logicalNodeForEventAndStatusOrNull: openfmb.commonmodule.LogicalNodeForEventAndStatus?
  get() = if (hasLogicalNodeForEventAndStatus()) getLogicalNodeForEventAndStatus() else null

public val openfmb.essmodule.ESSEventAndStatusZGENOrBuilder.auxPwrStOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasAuxPwrSt()) getAuxPwrSt() else null

public val openfmb.essmodule.ESSEventAndStatusZGENOrBuilder.dynamicTestOrNull: openfmb.commonmodule.ENS_DynamicTestKind?
  get() = if (hasDynamicTest()) getDynamicTest() else null

public val openfmb.essmodule.ESSEventAndStatusZGENOrBuilder.emgStopOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasEmgStop()) getEmgStop() else null

public val openfmb.essmodule.ESSEventAndStatusZGENOrBuilder.gnSynStOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasGnSynSt()) getGnSynSt() else null

public val openfmb.essmodule.ESSEventAndStatusZGENOrBuilder.pointStatusOrNull: openfmb.essmodule.ESSPointStatus?
  get() = if (hasPointStatus()) getPointStatus() else null

