//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: generationmodule/generationmodule.proto

package openfmb.generationmodule;

@kotlin.jvm.JvmName("-initializegeneratingUnit")
public inline fun generatingUnit(block: openfmb.generationmodule.GeneratingUnitKt.Dsl.() -> kotlin.Unit): openfmb.generationmodule.GeneratingUnit =
  openfmb.generationmodule.GeneratingUnitKt.Dsl._create(openfmb.generationmodule.GeneratingUnit.newBuilder()).apply { block() }._build()
public object GeneratingUnitKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.generationmodule.GeneratingUnit.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.generationmodule.GeneratingUnit.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.generationmodule.GeneratingUnit = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var conductingEquipment: openfmb.commonmodule.ConductingEquipment
      @JvmName("getConductingEquipment")
      get() = _builder.getConductingEquipment()
      @JvmName("setConductingEquipment")
      set(value) {
        _builder.setConductingEquipment(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearConductingEquipment() {
      _builder.clearConductingEquipment()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.ConductingEquipment conductingEquipment = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the conductingEquipment field is set.
     */
    public fun hasConductingEquipment(): kotlin.Boolean {
      return _builder.hasConductingEquipment()
    }

    /**
     * <pre>
     * This is the maximum operating active power limit the dispatcher can enter for this unit.
     * </pre>
     *
     * <code>.commonmodule.ActivePower maxOperatingP = 2;</code>
     */
    public var maxOperatingP: openfmb.commonmodule.ActivePower
      @JvmName("getMaxOperatingP")
      get() = _builder.getMaxOperatingP()
      @JvmName("setMaxOperatingP")
      set(value) {
        _builder.setMaxOperatingP(value)
      }
    /**
     * <pre>
     * This is the maximum operating active power limit the dispatcher can enter for this unit.
     * </pre>
     *
     * <code>.commonmodule.ActivePower maxOperatingP = 2;</code>
     */
    public fun clearMaxOperatingP() {
      _builder.clearMaxOperatingP()
    }
    /**
     * <pre>
     * This is the maximum operating active power limit the dispatcher can enter for this unit.
     * </pre>
     *
     * <code>.commonmodule.ActivePower maxOperatingP = 2;</code>
     * @return Whether the maxOperatingP field is set.
     */
    public fun hasMaxOperatingP(): kotlin.Boolean {
      return _builder.hasMaxOperatingP()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.generationmodule.GeneratingUnit.copy(block: openfmb.generationmodule.GeneratingUnitKt.Dsl.() -> kotlin.Unit): openfmb.generationmodule.GeneratingUnit =
  openfmb.generationmodule.GeneratingUnitKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.generationmodule.GeneratingUnitOrBuilder.conductingEquipmentOrNull: openfmb.commonmodule.ConductingEquipment?
  get() = if (hasConductingEquipment()) getConductingEquipment() else null

public val openfmb.generationmodule.GeneratingUnitOrBuilder.maxOperatingPOrNull: openfmb.commonmodule.ActivePower?
  get() = if (hasMaxOperatingP()) getMaxOperatingP() else null

