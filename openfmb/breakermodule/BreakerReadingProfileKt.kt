// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: breakermodule/breakermodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.breakermodule;

@kotlin.jvm.JvmName("-initializebreakerReadingProfile")
public inline fun breakerReadingProfile(block: openfmb.breakermodule.BreakerReadingProfileKt.Dsl.() -> kotlin.Unit): openfmb.breakermodule.BreakerReadingProfile =
  openfmb.breakermodule.BreakerReadingProfileKt.Dsl._create(openfmb.breakermodule.BreakerReadingProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Breaker reading profile
 * ```
 *
 * Protobuf type `breakermodule.BreakerReadingProfile`
 */
public object BreakerReadingProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.breakermodule.BreakerReadingProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.breakermodule.BreakerReadingProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.breakermodule.BreakerReadingProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var readingMessageInfo: openfmb.commonmodule.ReadingMessageInfo
      @JvmName("getReadingMessageInfo")
      get() = _builder.getReadingMessageInfo()
      @JvmName("setReadingMessageInfo")
      set(value) {
        _builder.setReadingMessageInfo(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearReadingMessageInfo() {
      _builder.clearReadingMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the readingMessageInfo field is set.
     */
    public fun hasReadingMessageInfo(): kotlin.Boolean {
      return _builder.hasReadingMessageInfo()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.breakermodule.Breaker breaker = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var breaker: openfmb.breakermodule.Breaker
      @JvmName("getBreaker")
      get() = _builder.getBreaker()
      @JvmName("setBreaker")
      set(value) {
        _builder.setBreaker(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.breakermodule.Breaker breaker = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearBreaker() {
      _builder.clearBreaker()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.breakermodule.Breaker breaker = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the breaker field is set.
     */
    public fun hasBreaker(): kotlin.Boolean {
      return _builder.hasBreaker()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class BreakerReadingProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `repeated .breakermodule.BreakerReading breakerReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_multiplicity_max) = 2];`
     */
     public val breakerReading: com.google.protobuf.kotlin.DslList<openfmb.breakermodule.BreakerReading, BreakerReadingProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getBreakerReadingList()
      )
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `repeated .breakermodule.BreakerReading breakerReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_multiplicity_max) = 2];`
     * @param value The breakerReading to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addBreakerReading")
    public fun com.google.protobuf.kotlin.DslList<openfmb.breakermodule.BreakerReading, BreakerReadingProxy>.add(value: openfmb.breakermodule.BreakerReading) {
      _builder.addBreakerReading(value)
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `repeated .breakermodule.BreakerReading breakerReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_multiplicity_max) = 2];`
     * @param value The breakerReading to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignBreakerReading")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<openfmb.breakermodule.BreakerReading, BreakerReadingProxy>.plusAssign(value: openfmb.breakermodule.BreakerReading) {
      add(value)
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `repeated .breakermodule.BreakerReading breakerReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_multiplicity_max) = 2];`
     * @param values The breakerReading to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllBreakerReading")
    public fun com.google.protobuf.kotlin.DslList<openfmb.breakermodule.BreakerReading, BreakerReadingProxy>.addAll(values: kotlin.collections.Iterable<openfmb.breakermodule.BreakerReading>) {
      _builder.addAllBreakerReading(values)
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `repeated .breakermodule.BreakerReading breakerReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_multiplicity_max) = 2];`
     * @param values The breakerReading to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllBreakerReading")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<openfmb.breakermodule.BreakerReading, BreakerReadingProxy>.plusAssign(values: kotlin.collections.Iterable<openfmb.breakermodule.BreakerReading>) {
      addAll(values)
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `repeated .breakermodule.BreakerReading breakerReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_multiplicity_max) = 2];`
     * @param index The index to set the value at.
     * @param value The breakerReading to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setBreakerReading")
    public operator fun com.google.protobuf.kotlin.DslList<openfmb.breakermodule.BreakerReading, BreakerReadingProxy>.set(index: kotlin.Int, value: openfmb.breakermodule.BreakerReading) {
      _builder.setBreakerReading(index, value)
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `repeated .breakermodule.BreakerReading breakerReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1, (.uml.option_multiplicity_max) = 2];`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearBreakerReading")
    public fun com.google.protobuf.kotlin.DslList<openfmb.breakermodule.BreakerReading, BreakerReadingProxy>.clear() {
      _builder.clearBreakerReading()
    }

  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.breakermodule.BreakerReadingProfile.copy(block: openfmb.breakermodule.BreakerReadingProfileKt.Dsl.() -> kotlin.Unit): openfmb.breakermodule.BreakerReadingProfile =
  openfmb.breakermodule.BreakerReadingProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.breakermodule.BreakerReadingProfileOrBuilder.readingMessageInfoOrNull: openfmb.commonmodule.ReadingMessageInfo?
  get() = if (hasReadingMessageInfo()) getReadingMessageInfo() else null

public val openfmb.breakermodule.BreakerReadingProfileOrBuilder.breakerOrNull: openfmb.breakermodule.Breaker?
  get() = if (hasBreaker()) getBreaker() else null

