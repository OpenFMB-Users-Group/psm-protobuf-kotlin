//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: loadmodule/loadmodule.proto

package openfmb.loadmodule;

@kotlin.jvm.JvmName("-initializeloadEventProfile")
public inline fun loadEventProfile(block: openfmb.loadmodule.LoadEventProfileKt.Dsl.() -> kotlin.Unit): openfmb.loadmodule.LoadEventProfile =
  openfmb.loadmodule.LoadEventProfileKt.Dsl._create(openfmb.loadmodule.LoadEventProfile.newBuilder()).apply { block() }._build()
public object LoadEventProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.loadmodule.LoadEventProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.loadmodule.LoadEventProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.loadmodule.LoadEventProfile = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var eventMessageInfo: openfmb.commonmodule.EventMessageInfo
      @JvmName("getEventMessageInfo")
      get() = _builder.getEventMessageInfo()
      @JvmName("setEventMessageInfo")
      set(value) {
        _builder.setEventMessageInfo(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearEventMessageInfo() {
      _builder.clearEventMessageInfo()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the eventMessageInfo field is set.
     */
    public fun hasEventMessageInfo(): kotlin.Boolean {
      return _builder.hasEventMessageInfo()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.EnergyConsumer energyConsumer = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var energyConsumer: openfmb.commonmodule.EnergyConsumer
      @JvmName("getEnergyConsumer")
      get() = _builder.getEnergyConsumer()
      @JvmName("setEnergyConsumer")
      set(value) {
        _builder.setEnergyConsumer(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.EnergyConsumer energyConsumer = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearEnergyConsumer() {
      _builder.clearEnergyConsumer()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.EnergyConsumer energyConsumer = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @return Whether the energyConsumer field is set.
     */
    public fun hasEnergyConsumer(): kotlin.Boolean {
      return _builder.hasEnergyConsumer()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.loadmodule.LoadEvent loadEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var loadEvent: openfmb.loadmodule.LoadEvent
      @JvmName("getLoadEvent")
      get() = _builder.getLoadEvent()
      @JvmName("setLoadEvent")
      set(value) {
        _builder.setLoadEvent(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.loadmodule.LoadEvent loadEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearLoadEvent() {
      _builder.clearLoadEvent()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.loadmodule.LoadEvent loadEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @return Whether the loadEvent field is set.
     */
    public fun hasLoadEvent(): kotlin.Boolean {
      return _builder.hasLoadEvent()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.loadmodule.LoadEventProfile.copy(block: openfmb.loadmodule.LoadEventProfileKt.Dsl.() -> kotlin.Unit): openfmb.loadmodule.LoadEventProfile =
  openfmb.loadmodule.LoadEventProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val openfmb.loadmodule.LoadEventProfileOrBuilder.eventMessageInfoOrNull: openfmb.commonmodule.EventMessageInfo?
  get() = if (hasEventMessageInfo()) getEventMessageInfo() else null

val openfmb.loadmodule.LoadEventProfileOrBuilder.energyConsumerOrNull: openfmb.commonmodule.EnergyConsumer?
  get() = if (hasEnergyConsumer()) getEnergyConsumer() else null

val openfmb.loadmodule.LoadEventProfileOrBuilder.loadEventOrNull: openfmb.loadmodule.LoadEvent?
  get() = if (hasLoadEvent()) getLoadEvent() else null

