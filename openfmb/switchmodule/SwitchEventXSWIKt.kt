// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: switchmodule/switchmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.switchmodule;

@kotlin.jvm.JvmName("-initializeswitchEventXSWI")
public inline fun switchEventXSWI(block: openfmb.switchmodule.SwitchEventXSWIKt.Dsl.() -> kotlin.Unit): openfmb.switchmodule.SwitchEventXSWI =
  openfmb.switchmodule.SwitchEventXSWIKt.Dsl._create(openfmb.switchmodule.SwitchEventXSWI.newBuilder()).apply { block() }._build()
/**
 * ```
 * OpenFMB specialization for SwitchEventProfile
 * ```
 *
 * Protobuf type `switchmodule.SwitchEventXSWI`
 */
public object SwitchEventXSWIKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.switchmodule.SwitchEventXSWI.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.switchmodule.SwitchEventXSWI.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.switchmodule.SwitchEventXSWI = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];`
     */
    public var logicalNodeForEventAndStatus: openfmb.commonmodule.LogicalNodeForEventAndStatus
      @kotlin.jvm.JvmName("getLogicalNodeForEventAndStatus")
        get() = _builder.logicalNodeForEventAndStatus
      @kotlin.jvm.JvmName("setLogicalNodeForEventAndStatus")
        set(value) {
        _builder.logicalNodeForEventAndStatus = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearLogicalNodeForEventAndStatus() {
      _builder.clearLogicalNodeForEventAndStatus()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the logicalNodeForEventAndStatus field is set.
     */
    public fun hasLogicalNodeForEventAndStatus(): kotlin.Boolean {
      return _builder.hasLogicalNodeForEventAndStatus()
    }

    public val SwitchEventXSWIKt.Dsl.logicalNodeForEventAndStatusOrNull: openfmb.commonmodule.LogicalNodeForEventAndStatus?
      get() = _builder.logicalNodeForEventAndStatusOrNull

    /**
     * ```
     * Dynamic test status
     * ```
     *
     * `.commonmodule.ENS_DynamicTestKind DynamicTest = 2;`
     */
    public var dynamicTest: openfmb.commonmodule.ENS_DynamicTestKind
      @kotlin.jvm.JvmName("getDynamicTest")
        get() = _builder.dynamicTest
      @kotlin.jvm.JvmName("setDynamicTest")
        set(value) {
        _builder.dynamicTest = value
      }
    /**
     * ```
     * Dynamic test status
     * ```
     *
     * `.commonmodule.ENS_DynamicTestKind DynamicTest = 2;`
     */
    public fun clearDynamicTest() {
      _builder.clearDynamicTest()
    }
    /**
     * ```
     * Dynamic test status
     * ```
     *
     * `.commonmodule.ENS_DynamicTestKind DynamicTest = 2;`
     * @return Whether the dynamicTest field is set.
     */
    public fun hasDynamicTest(): kotlin.Boolean {
      return _builder.hasDynamicTest()
    }

    public val SwitchEventXSWIKt.Dsl.dynamicTestOrNull: openfmb.commonmodule.ENS_DynamicTestKind?
      get() = _builder.dynamicTestOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.PhaseDPS Pos = 3;`
     */
    public var pos: openfmb.commonmodule.PhaseDPS
      @kotlin.jvm.JvmName("getPos")
        get() = _builder.pos
      @kotlin.jvm.JvmName("setPos")
        set(value) {
        _builder.pos = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.PhaseDPS Pos = 3;`
     */
    public fun clearPos() {
      _builder.clearPos()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.PhaseDPS Pos = 3;`
     * @return Whether the pos field is set.
     */
    public fun hasPos(): kotlin.Boolean {
      return _builder.hasPos()
    }

    public val SwitchEventXSWIKt.Dsl.posOrNull: openfmb.commonmodule.PhaseDPS?
      get() = _builder.posOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.switchmodule.SwitchEventXSWI.copy(block: `openfmb.switchmodule`.SwitchEventXSWIKt.Dsl.() -> kotlin.Unit): openfmb.switchmodule.SwitchEventXSWI =
  `openfmb.switchmodule`.SwitchEventXSWIKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.switchmodule.SwitchEventXSWIOrBuilder.logicalNodeForEventAndStatusOrNull: openfmb.commonmodule.LogicalNodeForEventAndStatus?
  get() = if (hasLogicalNodeForEventAndStatus()) getLogicalNodeForEventAndStatus() else null

public val openfmb.switchmodule.SwitchEventXSWIOrBuilder.dynamicTestOrNull: openfmb.commonmodule.ENS_DynamicTestKind?
  get() = if (hasDynamicTest()) getDynamicTest() else null

public val openfmb.switchmodule.SwitchEventXSWIOrBuilder.posOrNull: openfmb.commonmodule.PhaseDPS?
  get() = if (hasPos()) getPos() else null

