// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: loadmodule/loadmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.loadmodule;

@kotlin.jvm.JvmName("-initializeloadControlProfile")
public inline fun loadControlProfile(block: openfmb.loadmodule.LoadControlProfileKt.Dsl.() -> kotlin.Unit): openfmb.loadmodule.LoadControlProfile =
  openfmb.loadmodule.LoadControlProfileKt.Dsl._create(openfmb.loadmodule.LoadControlProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Load control profile
 * ```
 *
 * Protobuf type `loadmodule.LoadControlProfile`
 */
public object LoadControlProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.loadmodule.LoadControlProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.loadmodule.LoadControlProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.loadmodule.LoadControlProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var controlMessageInfo: openfmb.commonmodule.ControlMessageInfo
      @kotlin.jvm.JvmName("getControlMessageInfo")
        get() = _builder.controlMessageInfo
      @kotlin.jvm.JvmName("setControlMessageInfo")
        set(value) {
        _builder.controlMessageInfo = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearControlMessageInfo() {
      _builder.clearControlMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the controlMessageInfo field is set.
     */
    public fun hasControlMessageInfo(): kotlin.Boolean {
      return _builder.hasControlMessageInfo()
    }

    public val LoadControlProfileKt.Dsl.controlMessageInfoOrNull: openfmb.commonmodule.ControlMessageInfo?
      get() = _builder.controlMessageInfoOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.EnergyConsumer energyConsumer = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var energyConsumer: openfmb.commonmodule.EnergyConsumer
      @kotlin.jvm.JvmName("getEnergyConsumer")
        get() = _builder.energyConsumer
      @kotlin.jvm.JvmName("setEnergyConsumer")
        set(value) {
        _builder.energyConsumer = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.EnergyConsumer energyConsumer = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearEnergyConsumer() {
      _builder.clearEnergyConsumer()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.EnergyConsumer energyConsumer = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the energyConsumer field is set.
     */
    public fun hasEnergyConsumer(): kotlin.Boolean {
      return _builder.hasEnergyConsumer()
    }

    public val LoadControlProfileKt.Dsl.energyConsumerOrNull: openfmb.commonmodule.EnergyConsumer?
      get() = _builder.energyConsumerOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.loadmodule.LoadControl loadControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var loadControl: openfmb.loadmodule.LoadControl
      @kotlin.jvm.JvmName("getLoadControl")
        get() = _builder.loadControl
      @kotlin.jvm.JvmName("setLoadControl")
        set(value) {
        _builder.loadControl = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.loadmodule.LoadControl loadControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearLoadControl() {
      _builder.clearLoadControl()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.loadmodule.LoadControl loadControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the loadControl field is set.
     */
    public fun hasLoadControl(): kotlin.Boolean {
      return _builder.hasLoadControl()
    }

    public val LoadControlProfileKt.Dsl.loadControlOrNull: openfmb.loadmodule.LoadControl?
      get() = _builder.loadControlOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.loadmodule.LoadControlProfile.copy(block: `openfmb.loadmodule`.LoadControlProfileKt.Dsl.() -> kotlin.Unit): openfmb.loadmodule.LoadControlProfile =
  `openfmb.loadmodule`.LoadControlProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.loadmodule.LoadControlProfileOrBuilder.controlMessageInfoOrNull: openfmb.commonmodule.ControlMessageInfo?
  get() = if (hasControlMessageInfo()) getControlMessageInfo() else null

public val openfmb.loadmodule.LoadControlProfileOrBuilder.energyConsumerOrNull: openfmb.commonmodule.EnergyConsumer?
  get() = if (hasEnergyConsumer()) getEnergyConsumer() else null

public val openfmb.loadmodule.LoadControlProfileOrBuilder.loadControlOrNull: openfmb.loadmodule.LoadControl?
  get() = if (hasLoadControl()) getLoadControl() else null

