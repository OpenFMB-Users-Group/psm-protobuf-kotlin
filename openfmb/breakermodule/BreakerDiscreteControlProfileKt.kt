// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: breakermodule/breakermodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.breakermodule;

@kotlin.jvm.JvmName("-initializebreakerDiscreteControlProfile")
public inline fun breakerDiscreteControlProfile(block: openfmb.breakermodule.BreakerDiscreteControlProfileKt.Dsl.() -> kotlin.Unit): openfmb.breakermodule.BreakerDiscreteControlProfile =
  openfmb.breakermodule.BreakerDiscreteControlProfileKt.Dsl._create(openfmb.breakermodule.BreakerDiscreteControlProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Instructs an end device (or an end device group) to perform a specified action.
 * ```
 *
 * Protobuf type `breakermodule.BreakerDiscreteControlProfile`
 */
public object BreakerDiscreteControlProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.breakermodule.BreakerDiscreteControlProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.breakermodule.BreakerDiscreteControlProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.breakermodule.BreakerDiscreteControlProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var controlMessageInfo: openfmb.commonmodule.ControlMessageInfo
      @JvmName("getControlMessageInfo")
      get() = _builder.getControlMessageInfo()
      @JvmName("setControlMessageInfo")
      set(value) {
        _builder.setControlMessageInfo(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearControlMessageInfo() {
      _builder.clearControlMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the controlMessageInfo field is set.
     */
    public fun hasControlMessageInfo(): kotlin.Boolean {
      return _builder.hasControlMessageInfo()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.breakermodule.Breaker breaker = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var breaker: openfmb.breakermodule.Breaker
      @JvmName("getBreaker")
      get() = _builder.getBreaker()
      @JvmName("setBreaker")
      set(value) {
        _builder.setBreaker(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.breakermodule.Breaker breaker = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearBreaker() {
      _builder.clearBreaker()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.breakermodule.Breaker breaker = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the breaker field is set.
     */
    public fun hasBreaker(): kotlin.Boolean {
      return _builder.hasBreaker()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.breakermodule.BreakerDiscreteControl breakerDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var breakerDiscreteControl: openfmb.breakermodule.BreakerDiscreteControl
      @JvmName("getBreakerDiscreteControl")
      get() = _builder.getBreakerDiscreteControl()
      @JvmName("setBreakerDiscreteControl")
      set(value) {
        _builder.setBreakerDiscreteControl(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.breakermodule.BreakerDiscreteControl breakerDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearBreakerDiscreteControl() {
      _builder.clearBreakerDiscreteControl()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.breakermodule.BreakerDiscreteControl breakerDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the breakerDiscreteControl field is set.
     */
    public fun hasBreakerDiscreteControl(): kotlin.Boolean {
      return _builder.hasBreakerDiscreteControl()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun openfmb.breakermodule.BreakerDiscreteControlProfile.copy(block: openfmb.breakermodule.BreakerDiscreteControlProfileKt.Dsl.() -> kotlin.Unit): openfmb.breakermodule.BreakerDiscreteControlProfile =
  openfmb.breakermodule.BreakerDiscreteControlProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.breakermodule.BreakerDiscreteControlProfileOrBuilder.controlMessageInfoOrNull: openfmb.commonmodule.ControlMessageInfo?
  get() = if (hasControlMessageInfo()) getControlMessageInfo() else null

public val openfmb.breakermodule.BreakerDiscreteControlProfileOrBuilder.breakerOrNull: openfmb.breakermodule.Breaker?
  get() = if (hasBreaker()) getBreaker() else null

public val openfmb.breakermodule.BreakerDiscreteControlProfileOrBuilder.breakerDiscreteControlOrNull: openfmb.breakermodule.BreakerDiscreteControl?
  get() = if (hasBreakerDiscreteControl()) getBreakerDiscreteControl() else null

