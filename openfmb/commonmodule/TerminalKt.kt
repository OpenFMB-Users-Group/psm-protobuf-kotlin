// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializeterminal")
public inline fun terminal(block: openfmb.commonmodule.TerminalKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.Terminal =
  openfmb.commonmodule.TerminalKt.Dsl._create(openfmb.commonmodule.Terminal.newBuilder()).apply { block() }._build()
/**
 * ```
 * An AC electrical connection point to a piece of conducting equipment. Terminals are connected at
 * physical connection points called connectivity nodes.
 * ```
 *
 * Protobuf type `commonmodule.Terminal`
 */
public object TerminalKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.Terminal.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.Terminal.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.Terminal = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ACDCTerminal aCDCTerminal = 1 [(.uml.option_parent_message) = true];`
     */
    public var aCDCTerminal: openfmb.commonmodule.ACDCTerminal
      @JvmName("getACDCTerminal")
      get() = _builder.getACDCTerminal()
      @JvmName("setACDCTerminal")
      set(value) {
        _builder.setACDCTerminal(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ACDCTerminal aCDCTerminal = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearACDCTerminal() {
      _builder.clearACDCTerminal()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ACDCTerminal aCDCTerminal = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the aCDCTerminal field is set.
     */
    public fun hasACDCTerminal(): kotlin.Boolean {
      return _builder.hasACDCTerminal()
    }

    /**
     * ```
     * Represents the normal network phasing condition. If the attribute is missing three phases (ABC
     * or ABCN) shall be assumed.
     * ```
     *
     * `.commonmodule.Optional_PhaseCodeKind phases = 2;`
     */
    public var phases: openfmb.commonmodule.Optional_PhaseCodeKind
      @JvmName("getPhases")
      get() = _builder.getPhases()
      @JvmName("setPhases")
      set(value) {
        _builder.setPhases(value)
      }
    /**
     * ```
     * Represents the normal network phasing condition. If the attribute is missing three phases (ABC
     * or ABCN) shall be assumed.
     * ```
     *
     * `.commonmodule.Optional_PhaseCodeKind phases = 2;`
     */
    public fun clearPhases() {
      _builder.clearPhases()
    }
    /**
     * ```
     * Represents the normal network phasing condition. If the attribute is missing three phases (ABC
     * or ABCN) shall be assumed.
     * ```
     *
     * `.commonmodule.Optional_PhaseCodeKind phases = 2;`
     * @return Whether the phases field is set.
     */
    public fun hasPhases(): kotlin.Boolean {
      return _builder.hasPhases()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun openfmb.commonmodule.Terminal.copy(block: openfmb.commonmodule.TerminalKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.Terminal =
  openfmb.commonmodule.TerminalKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.TerminalOrBuilder.aCDCTerminalOrNull: openfmb.commonmodule.ACDCTerminal?
  get() = if (hasACDCTerminal()) getACDCTerminal() else null

public val openfmb.commonmodule.TerminalOrBuilder.phasesOrNull: openfmb.commonmodule.Optional_PhaseCodeKind?
  get() = if (hasPhases()) getPhases() else null

