// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: resourcemodule/resourcemodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.resourcemodule;

@kotlin.jvm.JvmName("-initializebooleanControlGGIO")
public inline fun booleanControlGGIO(block: openfmb.resourcemodule.BooleanControlGGIOKt.Dsl.() -> kotlin.Unit): openfmb.resourcemodule.BooleanControlGGIO =
  openfmb.resourcemodule.BooleanControlGGIOKt.Dsl._create(openfmb.resourcemodule.BooleanControlGGIO.newBuilder()).apply { block() }._build()
/**
 * ```
 * LN: Generic process I/O   Name: GGIO
 * ```
 *
 * Protobuf type `resourcemodule.BooleanControlGGIO`
 */
public object BooleanControlGGIOKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.resourcemodule.BooleanControlGGIO.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.resourcemodule.BooleanControlGGIO.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.resourcemodule.BooleanControlGGIO = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public var logicalNode: openfmb.commonmodule.LogicalNode
      @JvmName("getLogicalNode")
      get() = _builder.getLogicalNode()
      @JvmName("setLogicalNode")
      set(value) {
        _builder.setLogicalNode(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearLogicalNode() {
      _builder.clearLogicalNode()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the logicalNode field is set.
     */
    public fun hasLogicalNode(): kotlin.Boolean {
      return _builder.hasLogicalNode()
    }

    /**
     * ```
     * Phase code
     * ```
     *
     * `.commonmodule.Optional_PhaseCodeKind Phase = 2;`
     */
    public var phase: openfmb.commonmodule.Optional_PhaseCodeKind
      @JvmName("getPhase")
      get() = _builder.getPhase()
      @JvmName("setPhase")
      set(value) {
        _builder.setPhase(value)
      }
    /**
     * ```
     * Phase code
     * ```
     *
     * `.commonmodule.Optional_PhaseCodeKind Phase = 2;`
     */
    public fun clearPhase() {
      _builder.clearPhase()
    }
    /**
     * ```
     * Phase code
     * ```
     *
     * `.commonmodule.Optional_PhaseCodeKind Phase = 2;`
     * @return Whether the phase field is set.
     */
    public fun hasPhase(): kotlin.Boolean {
      return _builder.hasPhase()
    }

    /**
     * ```
     * (controllable) If true, generic single point controllable status output <i>n</i> has been
     * enabled, otherwise it has been disabled.
     * ```
     *
     * `.commonmodule.ControlSPC SPCSO = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var sPCSO: openfmb.commonmodule.ControlSPC
      @JvmName("getSPCSO")
      get() = _builder.getSPCSO()
      @JvmName("setSPCSO")
      set(value) {
        _builder.setSPCSO(value)
      }
    /**
     * ```
     * (controllable) If true, generic single point controllable status output <i>n</i> has been
     * enabled, otherwise it has been disabled.
     * ```
     *
     * `.commonmodule.ControlSPC SPCSO = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearSPCSO() {
      _builder.clearSPCSO()
    }
    /**
     * ```
     * (controllable) If true, generic single point controllable status output <i>n</i> has been
     * enabled, otherwise it has been disabled.
     * ```
     *
     * `.commonmodule.ControlSPC SPCSO = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the sPCSO field is set.
     */
    public fun hasSPCSO(): kotlin.Boolean {
      return _builder.hasSPCSO()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.resourcemodule.BooleanControlGGIO.copy(block: openfmb.resourcemodule.BooleanControlGGIOKt.Dsl.() -> kotlin.Unit): openfmb.resourcemodule.BooleanControlGGIO =
  openfmb.resourcemodule.BooleanControlGGIOKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.resourcemodule.BooleanControlGGIOOrBuilder.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
  get() = if (hasLogicalNode()) getLogicalNode() else null

public val openfmb.resourcemodule.BooleanControlGGIOOrBuilder.phaseOrNull: openfmb.commonmodule.Optional_PhaseCodeKind?
  get() = if (hasPhase()) getPhase() else null

public val openfmb.resourcemodule.BooleanControlGGIOOrBuilder.sPCSOOrNull: openfmb.commonmodule.ControlSPC?
  get() = if (hasSPCSO()) getSPCSO() else null

