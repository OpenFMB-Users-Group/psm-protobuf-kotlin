// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: evsemodule/evsemodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.evsemodule;

@kotlin.jvm.JvmName("-initializeeVSEControl")
public inline fun eVSEControl(block: openfmb.evsemodule.EVSEControlKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.EVSEControl =
  openfmb.evsemodule.EVSEControlKt.Dsl._create(openfmb.evsemodule.EVSEControl.newBuilder()).apply { block() }._build()
/**
 * ```
 * MISSING DOCUMENTATION!!!
 * ```
 *
 * Protobuf type `evsemodule.EVSEControl`
 */
public object EVSEControlKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.evsemodule.EVSEControl.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.evsemodule.EVSEControl.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.evsemodule.EVSEControl = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];`
     */
    public var controlValue: openfmb.commonmodule.ControlValue
      @kotlin.jvm.JvmName("getControlValue")
        get() = _builder.controlValue
      @kotlin.jvm.JvmName("setControlValue")
        set(value) {
        _builder.controlValue = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearControlValue() {
      _builder.clearControlValue()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlValue controlValue = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the controlValue field is set.
     */
    public fun hasControlValue(): kotlin.Boolean {
      return _builder.hasControlValue()
    }

    public val EVSEControlKt.Dsl.controlValueOrNull: openfmb.commonmodule.ControlValue?
      get() = _builder.controlValueOrNull

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ControlDESEProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `repeated .evsemodule.ControlDESE controlDESE = 2 [(.uml.option_multiplicity_min) = 0];`
     */
     public val controlDESE: com.google.protobuf.kotlin.DslList<openfmb.evsemodule.ControlDESE, ControlDESEProxy>
      @kotlin.jvm.JvmSynthetic
  get() = com.google.protobuf.kotlin.DslList(
        _builder.controlDESEList
      )
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `repeated .evsemodule.ControlDESE controlDESE = 2 [(.uml.option_multiplicity_min) = 0];`
     * @param value The controlDESE to add.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("addControlDESE")
    public fun com.google.protobuf.kotlin.DslList<openfmb.evsemodule.ControlDESE, ControlDESEProxy>.add(value: openfmb.evsemodule.ControlDESE) {
      _builder.addControlDESE(value)
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `repeated .evsemodule.ControlDESE controlDESE = 2 [(.uml.option_multiplicity_min) = 0];`
     * @param value The controlDESE to add.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("plusAssignControlDESE")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<openfmb.evsemodule.ControlDESE, ControlDESEProxy>.plusAssign(value: openfmb.evsemodule.ControlDESE) {
      add(value)
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `repeated .evsemodule.ControlDESE controlDESE = 2 [(.uml.option_multiplicity_min) = 0];`
     * @param values The controlDESE to add.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("addAllControlDESE")
    public fun com.google.protobuf.kotlin.DslList<openfmb.evsemodule.ControlDESE, ControlDESEProxy>.addAll(values: kotlin.collections.Iterable<openfmb.evsemodule.ControlDESE>) {
      _builder.addAllControlDESE(values)
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `repeated .evsemodule.ControlDESE controlDESE = 2 [(.uml.option_multiplicity_min) = 0];`
     * @param values The controlDESE to add.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("plusAssignAllControlDESE")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<openfmb.evsemodule.ControlDESE, ControlDESEProxy>.plusAssign(values: kotlin.collections.Iterable<openfmb.evsemodule.ControlDESE>) {
      addAll(values)
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `repeated .evsemodule.ControlDESE controlDESE = 2 [(.uml.option_multiplicity_min) = 0];`
     * @param index The index to set the value at.
     * @param value The controlDESE to set.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("setControlDESE")
    public operator fun com.google.protobuf.kotlin.DslList<openfmb.evsemodule.ControlDESE, ControlDESEProxy>.set(index: kotlin.Int, value: openfmb.evsemodule.ControlDESE) {
      _builder.setControlDESE(index, value)
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `repeated .evsemodule.ControlDESE controlDESE = 2 [(.uml.option_multiplicity_min) = 0];`
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("clearControlDESE")
    public fun com.google.protobuf.kotlin.DslList<openfmb.evsemodule.ControlDESE, ControlDESEProxy>.clear() {
      _builder.clearControlDESE()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.CheckConditions check = 3;`
     */
    public var check: openfmb.commonmodule.CheckConditions
      @kotlin.jvm.JvmName("getCheck")
        get() = _builder.check
      @kotlin.jvm.JvmName("setCheck")
        set(value) {
        _builder.check = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.CheckConditions check = 3;`
     */
    public fun clearCheck() {
      _builder.clearCheck()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.CheckConditions check = 3;`
     * @return Whether the check field is set.
     */
    public fun hasCheck(): kotlin.Boolean {
      return _builder.hasCheck()
    }

    public val EVSEControlKt.Dsl.checkOrNull: openfmb.commonmodule.CheckConditions?
      get() = _builder.checkOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.evsemodule.EVSEControl.copy(block: `openfmb.evsemodule`.EVSEControlKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.EVSEControl =
  `openfmb.evsemodule`.EVSEControlKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.evsemodule.EVSEControlOrBuilder.controlValueOrNull: openfmb.commonmodule.ControlValue?
  get() = if (hasControlValue()) getControlValue() else null

public val openfmb.evsemodule.EVSEControlOrBuilder.checkOrNull: openfmb.commonmodule.CheckConditions?
  get() = if (hasCheck()) getCheck() else null

