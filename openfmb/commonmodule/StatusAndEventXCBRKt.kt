// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializestatusAndEventXCBR")
public inline fun statusAndEventXCBR(block: openfmb.commonmodule.StatusAndEventXCBRKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.StatusAndEventXCBR =
  openfmb.commonmodule.StatusAndEventXCBRKt.Dsl._create(openfmb.commonmodule.StatusAndEventXCBR.newBuilder()).apply { block() }._build()
/**
 * ```
 * OpenFMB specialization for breaker, recloser and switch status and event profiles:  LN: Circuit
 * breaker   Name: XCBR
 * ```
 *
 * Protobuf type `commonmodule.StatusAndEventXCBR`
 */
public object StatusAndEventXCBRKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.StatusAndEventXCBR.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.StatusAndEventXCBR.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.StatusAndEventXCBR = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];`
     */
    public var logicalNodeForEventAndStatus: openfmb.commonmodule.LogicalNodeForEventAndStatus
      @kotlin.jvm.JvmName("getLogicalNodeForEventAndStatus")
        get() = _builder.logicalNodeForEventAndStatus
      @kotlin.jvm.JvmName("setLogicalNodeForEventAndStatus")
        set(value) {
        _builder.logicalNodeForEventAndStatus = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearLogicalNodeForEventAndStatus() {
      _builder.clearLogicalNodeForEventAndStatus()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the logicalNodeForEventAndStatus field is set.
     */
    public fun hasLogicalNodeForEventAndStatus(): kotlin.Boolean {
      return _builder.hasLogicalNodeForEventAndStatus()
    }

    public val StatusAndEventXCBRKt.Dsl.logicalNodeForEventAndStatusOrNull: openfmb.commonmodule.LogicalNodeForEventAndStatus?
      get() = _builder.logicalNodeForEventAndStatusOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ENS_DynamicTestKind DynamicTest = 2;`
     */
    public var dynamicTest: openfmb.commonmodule.ENS_DynamicTestKind
      @kotlin.jvm.JvmName("getDynamicTest")
        get() = _builder.dynamicTest
      @kotlin.jvm.JvmName("setDynamicTest")
        set(value) {
        _builder.dynamicTest = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ENS_DynamicTestKind DynamicTest = 2;`
     */
    public fun clearDynamicTest() {
      _builder.clearDynamicTest()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ENS_DynamicTestKind DynamicTest = 2;`
     * @return Whether the dynamicTest field is set.
     */
    public fun hasDynamicTest(): kotlin.Boolean {
      return _builder.hasDynamicTest()
    }

    public val StatusAndEventXCBRKt.Dsl.dynamicTestOrNull: openfmb.commonmodule.ENS_DynamicTestKind?
      get() = _builder.dynamicTestOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.PhaseDPS Pos = 3;`
     */
    public var pos: openfmb.commonmodule.PhaseDPS
      @kotlin.jvm.JvmName("getPos")
        get() = _builder.pos
      @kotlin.jvm.JvmName("setPos")
        set(value) {
        _builder.pos = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.PhaseDPS Pos = 3;`
     */
    public fun clearPos() {
      _builder.clearPos()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.PhaseDPS Pos = 3;`
     * @return Whether the pos field is set.
     */
    public fun hasPos(): kotlin.Boolean {
      return _builder.hasPos()
    }

    public val StatusAndEventXCBRKt.Dsl.posOrNull: openfmb.commonmodule.PhaseDPS?
      get() = _builder.posOrNull

    /**
     * ```
     * Fault latch: LT01=51A OR 51B OR 51C
     * ```
     *
     * `.commonmodule.ACD ProtectionPickup = 4;`
     */
    public var protectionPickup: openfmb.commonmodule.ACD
      @kotlin.jvm.JvmName("getProtectionPickup")
        get() = _builder.protectionPickup
      @kotlin.jvm.JvmName("setProtectionPickup")
        set(value) {
        _builder.protectionPickup = value
      }
    /**
     * ```
     * Fault latch: LT01=51A OR 51B OR 51C
     * ```
     *
     * `.commonmodule.ACD ProtectionPickup = 4;`
     */
    public fun clearProtectionPickup() {
      _builder.clearProtectionPickup()
    }
    /**
     * ```
     * Fault latch: LT01=51A OR 51B OR 51C
     * ```
     *
     * `.commonmodule.ACD ProtectionPickup = 4;`
     * @return Whether the protectionPickup field is set.
     */
    public fun hasProtectionPickup(): kotlin.Boolean {
      return _builder.hasProtectionPickup()
    }

    public val StatusAndEventXCBRKt.Dsl.protectionPickupOrNull: openfmb.commonmodule.ACD?
      get() = _builder.protectionPickupOrNull

    /**
     * ```
     * Protection mode such as a group setting or pre-defined curve profile. It is usually pre-defined
     * by a circuit segment service.
     * ```
     *
     * `.commonmodule.StatusINS ProtectionMode = 5;`
     */
    public var protectionMode: openfmb.commonmodule.StatusINS
      @kotlin.jvm.JvmName("getProtectionMode")
        get() = _builder.protectionMode
      @kotlin.jvm.JvmName("setProtectionMode")
        set(value) {
        _builder.protectionMode = value
      }
    /**
     * ```
     * Protection mode such as a group setting or pre-defined curve profile. It is usually pre-defined
     * by a circuit segment service.
     * ```
     *
     * `.commonmodule.StatusINS ProtectionMode = 5;`
     */
    public fun clearProtectionMode() {
      _builder.clearProtectionMode()
    }
    /**
     * ```
     * Protection mode such as a group setting or pre-defined curve profile. It is usually pre-defined
     * by a circuit segment service.
     * ```
     *
     * `.commonmodule.StatusINS ProtectionMode = 5;`
     * @return Whether the protectionMode field is set.
     */
    public fun hasProtectionMode(): kotlin.Boolean {
      return _builder.hasProtectionMode()
    }

    public val StatusAndEventXCBRKt.Dsl.protectionModeOrNull: openfmb.commonmodule.StatusINS?
      get() = _builder.protectionModeOrNull

    /**
     * ```
     * Reclose enabled
     * ```
     *
     * `.commonmodule.PhaseSPS RecloseEnabled = 6;`
     */
    public var recloseEnabled: openfmb.commonmodule.PhaseSPS
      @kotlin.jvm.JvmName("getRecloseEnabled")
        get() = _builder.recloseEnabled
      @kotlin.jvm.JvmName("setRecloseEnabled")
        set(value) {
        _builder.recloseEnabled = value
      }
    /**
     * ```
     * Reclose enabled
     * ```
     *
     * `.commonmodule.PhaseSPS RecloseEnabled = 6;`
     */
    public fun clearRecloseEnabled() {
      _builder.clearRecloseEnabled()
    }
    /**
     * ```
     * Reclose enabled
     * ```
     *
     * `.commonmodule.PhaseSPS RecloseEnabled = 6;`
     * @return Whether the recloseEnabled field is set.
     */
    public fun hasRecloseEnabled(): kotlin.Boolean {
      return _builder.hasRecloseEnabled()
    }

    public val StatusAndEventXCBRKt.Dsl.recloseEnabledOrNull: openfmb.commonmodule.PhaseSPS?
      get() = _builder.recloseEnabledOrNull

    /**
     * ```
     * Reclose mode such idle, cycling and lockout.
     * ```
     *
     * `.commonmodule.PhaseRecloseAction ReclosingAction = 7;`
     */
    public var reclosingAction: openfmb.commonmodule.PhaseRecloseAction
      @kotlin.jvm.JvmName("getReclosingAction")
        get() = _builder.reclosingAction
      @kotlin.jvm.JvmName("setReclosingAction")
        set(value) {
        _builder.reclosingAction = value
      }
    /**
     * ```
     * Reclose mode such idle, cycling and lockout.
     * ```
     *
     * `.commonmodule.PhaseRecloseAction ReclosingAction = 7;`
     */
    public fun clearReclosingAction() {
      _builder.clearReclosingAction()
    }
    /**
     * ```
     * Reclose mode such idle, cycling and lockout.
     * ```
     *
     * `.commonmodule.PhaseRecloseAction ReclosingAction = 7;`
     * @return Whether the reclosingAction field is set.
     */
    public fun hasReclosingAction(): kotlin.Boolean {
      return _builder.hasReclosingAction()
    }

    public val StatusAndEventXCBRKt.Dsl.reclosingActionOrNull: openfmb.commonmodule.PhaseRecloseAction?
      get() = _builder.reclosingActionOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.StatusAndEventXCBR.copy(block: `openfmb.commonmodule`.StatusAndEventXCBRKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.StatusAndEventXCBR =
  `openfmb.commonmodule`.StatusAndEventXCBRKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.StatusAndEventXCBROrBuilder.logicalNodeForEventAndStatusOrNull: openfmb.commonmodule.LogicalNodeForEventAndStatus?
  get() = if (hasLogicalNodeForEventAndStatus()) getLogicalNodeForEventAndStatus() else null

public val openfmb.commonmodule.StatusAndEventXCBROrBuilder.dynamicTestOrNull: openfmb.commonmodule.ENS_DynamicTestKind?
  get() = if (hasDynamicTest()) getDynamicTest() else null

public val openfmb.commonmodule.StatusAndEventXCBROrBuilder.posOrNull: openfmb.commonmodule.PhaseDPS?
  get() = if (hasPos()) getPos() else null

public val openfmb.commonmodule.StatusAndEventXCBROrBuilder.protectionPickupOrNull: openfmb.commonmodule.ACD?
  get() = if (hasProtectionPickup()) getProtectionPickup() else null

public val openfmb.commonmodule.StatusAndEventXCBROrBuilder.protectionModeOrNull: openfmb.commonmodule.StatusINS?
  get() = if (hasProtectionMode()) getProtectionMode() else null

public val openfmb.commonmodule.StatusAndEventXCBROrBuilder.recloseEnabledOrNull: openfmb.commonmodule.PhaseSPS?
  get() = if (hasRecloseEnabled()) getRecloseEnabled() else null

public val openfmb.commonmodule.StatusAndEventXCBROrBuilder.reclosingActionOrNull: openfmb.commonmodule.PhaseRecloseAction?
  get() = if (hasReclosingAction()) getReclosingAction() else null

