// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: solarmodule/solarmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.solarmodule;

@kotlin.jvm.JvmName("-initializesolarReading")
public inline fun solarReading(block: openfmb.solarmodule.SolarReadingKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarReading =
  openfmb.solarmodule.SolarReadingKt.Dsl._create(openfmb.solarmodule.SolarReading.newBuilder()).apply { block() }._build()
/**
 * ```
 * Solar reading value
 * ```
 *
 * Protobuf type `solarmodule.SolarReading`
 */
public object SolarReadingKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.solarmodule.SolarReading.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.solarmodule.SolarReading.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.solarmodule.SolarReading = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];`
     */
    public var conductingEquipmentTerminalReading: openfmb.commonmodule.ConductingEquipmentTerminalReading
      @kotlin.jvm.JvmName("getConductingEquipmentTerminalReading")
        get() = _builder.conductingEquipmentTerminalReading
      @kotlin.jvm.JvmName("setConductingEquipmentTerminalReading")
        set(value) {
        _builder.conductingEquipmentTerminalReading = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearConductingEquipmentTerminalReading() {
      _builder.clearConductingEquipmentTerminalReading()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the conductingEquipmentTerminalReading field is set.
     */
    public fun hasConductingEquipmentTerminalReading(): kotlin.Boolean {
      return _builder.hasConductingEquipmentTerminalReading()
    }

    public val SolarReadingKt.Dsl.conductingEquipmentTerminalReadingOrNull: openfmb.commonmodule.ConductingEquipmentTerminalReading?
      get() = _builder.conductingEquipmentTerminalReadingOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.PhaseMMTN phaseMMTN = 2;`
     */
    public var phaseMMTN: openfmb.commonmodule.PhaseMMTN
      @kotlin.jvm.JvmName("getPhaseMMTN")
        get() = _builder.phaseMMTN
      @kotlin.jvm.JvmName("setPhaseMMTN")
        set(value) {
        _builder.phaseMMTN = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.PhaseMMTN phaseMMTN = 2;`
     */
    public fun clearPhaseMMTN() {
      _builder.clearPhaseMMTN()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.PhaseMMTN phaseMMTN = 2;`
     * @return Whether the phaseMMTN field is set.
     */
    public fun hasPhaseMMTN(): kotlin.Boolean {
      return _builder.hasPhaseMMTN()
    }

    public val SolarReadingKt.Dsl.phaseMMTNOrNull: openfmb.commonmodule.PhaseMMTN?
      get() = _builder.phaseMMTNOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ReadingMMTR readingMMTR = 3;`
     */
    public var readingMMTR: openfmb.commonmodule.ReadingMMTR
      @kotlin.jvm.JvmName("getReadingMMTR")
        get() = _builder.readingMMTR
      @kotlin.jvm.JvmName("setReadingMMTR")
        set(value) {
        _builder.readingMMTR = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ReadingMMTR readingMMTR = 3;`
     */
    public fun clearReadingMMTR() {
      _builder.clearReadingMMTR()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ReadingMMTR readingMMTR = 3;`
     * @return Whether the readingMMTR field is set.
     */
    public fun hasReadingMMTR(): kotlin.Boolean {
      return _builder.hasReadingMMTR()
    }

    public val SolarReadingKt.Dsl.readingMMTROrNull: openfmb.commonmodule.ReadingMMTR?
      get() = _builder.readingMMTROrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ReadingMMXU readingMMXU = 4;`
     */
    public var readingMMXU: openfmb.commonmodule.ReadingMMXU
      @kotlin.jvm.JvmName("getReadingMMXU")
        get() = _builder.readingMMXU
      @kotlin.jvm.JvmName("setReadingMMXU")
        set(value) {
        _builder.readingMMXU = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ReadingMMXU readingMMXU = 4;`
     */
    public fun clearReadingMMXU() {
      _builder.clearReadingMMXU()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ReadingMMXU readingMMXU = 4;`
     * @return Whether the readingMMXU field is set.
     */
    public fun hasReadingMMXU(): kotlin.Boolean {
      return _builder.hasReadingMMXU()
    }

    public val SolarReadingKt.Dsl.readingMMXUOrNull: openfmb.commonmodule.ReadingMMXU?
      get() = _builder.readingMMXUOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ReadingMMDC readingMMDC = 5;`
     */
    public var readingMMDC: openfmb.commonmodule.ReadingMMDC
      @kotlin.jvm.JvmName("getReadingMMDC")
        get() = _builder.readingMMDC
      @kotlin.jvm.JvmName("setReadingMMDC")
        set(value) {
        _builder.readingMMDC = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ReadingMMDC readingMMDC = 5;`
     */
    public fun clearReadingMMDC() {
      _builder.clearReadingMMDC()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ReadingMMDC readingMMDC = 5;`
     * @return Whether the readingMMDC field is set.
     */
    public fun hasReadingMMDC(): kotlin.Boolean {
      return _builder.hasReadingMMDC()
    }

    public val SolarReadingKt.Dsl.readingMMDCOrNull: openfmb.commonmodule.ReadingMMDC?
      get() = _builder.readingMMDCOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.solarmodule.SolarReading.copy(block: `openfmb.solarmodule`.SolarReadingKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarReading =
  `openfmb.solarmodule`.SolarReadingKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.solarmodule.SolarReadingOrBuilder.conductingEquipmentTerminalReadingOrNull: openfmb.commonmodule.ConductingEquipmentTerminalReading?
  get() = if (hasConductingEquipmentTerminalReading()) getConductingEquipmentTerminalReading() else null

public val openfmb.solarmodule.SolarReadingOrBuilder.phaseMMTNOrNull: openfmb.commonmodule.PhaseMMTN?
  get() = if (hasPhaseMMTN()) getPhaseMMTN() else null

public val openfmb.solarmodule.SolarReadingOrBuilder.readingMMTROrNull: openfmb.commonmodule.ReadingMMTR?
  get() = if (hasReadingMMTR()) getReadingMMTR() else null

public val openfmb.solarmodule.SolarReadingOrBuilder.readingMMXUOrNull: openfmb.commonmodule.ReadingMMXU?
  get() = if (hasReadingMMXU()) getReadingMMXU() else null

public val openfmb.solarmodule.SolarReadingOrBuilder.readingMMDCOrNull: openfmb.commonmodule.ReadingMMDC?
  get() = if (hasReadingMMDC()) getReadingMMDC() else null

