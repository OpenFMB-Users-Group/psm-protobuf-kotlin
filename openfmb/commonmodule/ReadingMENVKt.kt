// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializereadingMENV")
public inline fun readingMENV(block: openfmb.commonmodule.ReadingMENVKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ReadingMENV =
  openfmb.commonmodule.ReadingMENVKt.Dsl._create(openfmb.commonmodule.ReadingMENV.newBuilder()).apply { block() }._build()
/**
 * ```
 * Specialized 61850 MENV LN class  LN: Environmental information   Name: MENV
 * ```
 *
 * Protobuf type `commonmodule.ReadingMENV`
 */
public object ReadingMENVKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.ReadingMENV.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.ReadingMENV.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.ReadingMENV = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public var logicalNode: openfmb.commonmodule.LogicalNode
      @kotlin.jvm.JvmName("getLogicalNode")
        get() = _builder.logicalNode
      @kotlin.jvm.JvmName("setLogicalNode")
        set(value) {
        _builder.logicalNode = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearLogicalNode() {
      _builder.clearLogicalNode()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the logicalNode field is set.
     */
    public fun hasLogicalNode(): kotlin.Boolean {
      return _builder.hasLogicalNode()
    }

    public val ReadingMENVKt.Dsl.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
      get() = _builder.logicalNodeOrNull

    /**
     * ```
     * Emission level of CO2.
     * ```
     *
     * `.commonmodule.MV CO2Em = 2;`
     */
    public var cO2Em: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getCO2Em")
        get() = _builder.cO2Em
      @kotlin.jvm.JvmName("setCO2Em")
        set(value) {
        _builder.cO2Em = value
      }
    /**
     * ```
     * Emission level of CO2.
     * ```
     *
     * `.commonmodule.MV CO2Em = 2;`
     */
    public fun clearCO2Em() {
      _builder.clearCO2Em()
    }
    /**
     * ```
     * Emission level of CO2.
     * ```
     *
     * `.commonmodule.MV CO2Em = 2;`
     * @return Whether the cO2Em field is set.
     */
    public fun hasCO2Em(): kotlin.Boolean {
      return _builder.hasCO2Em()
    }

    public val ReadingMENVKt.Dsl.cO2EmOrNull: openfmb.commonmodule.MV?
      get() = _builder.cO2EmOrNull

    /**
     * ```
     * Emission level of CO.
     * ```
     *
     * `.commonmodule.MV COEm = 3;`
     */
    public var cOEm: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getCOEm")
        get() = _builder.coEm
      @kotlin.jvm.JvmName("setCOEm")
        set(value) {
        _builder.coEm = value
      }
    /**
     * ```
     * Emission level of CO.
     * ```
     *
     * `.commonmodule.MV COEm = 3;`
     */
    public fun clearCOEm() {
      _builder.clearCOEm()
    }
    /**
     * ```
     * Emission level of CO.
     * ```
     *
     * `.commonmodule.MV COEm = 3;`
     * @return Whether the cOEm field is set.
     */
    public fun hasCOEm(): kotlin.Boolean {
      return _builder.hasCOEm()
    }

    public val ReadingMENVKt.Dsl.cOEmOrNull: openfmb.commonmodule.MV?
      get() = _builder.cOEmOrNull

    /**
     * ```
     * Emission level of NO<sub>x</sub>.
     * ```
     *
     * `.commonmodule.MV NOxEm = 4;`
     */
    public var nOxEm: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getNOxEm")
        get() = _builder.nOxEm
      @kotlin.jvm.JvmName("setNOxEm")
        set(value) {
        _builder.nOxEm = value
      }
    /**
     * ```
     * Emission level of NO<sub>x</sub>.
     * ```
     *
     * `.commonmodule.MV NOxEm = 4;`
     */
    public fun clearNOxEm() {
      _builder.clearNOxEm()
    }
    /**
     * ```
     * Emission level of NO<sub>x</sub>.
     * ```
     *
     * `.commonmodule.MV NOxEm = 4;`
     * @return Whether the nOxEm field is set.
     */
    public fun hasNOxEm(): kotlin.Boolean {
      return _builder.hasNOxEm()
    }

    public val ReadingMENVKt.Dsl.nOxEmOrNull: openfmb.commonmodule.MV?
      get() = _builder.nOxEmOrNull

    /**
     * ```
     * Emission level of SO<sub>x</sub>.
     * ```
     *
     * `.commonmodule.MV SOxEm = 5;`
     */
    public var sOxEm: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getSOxEm")
        get() = _builder.sOxEm
      @kotlin.jvm.JvmName("setSOxEm")
        set(value) {
        _builder.sOxEm = value
      }
    /**
     * ```
     * Emission level of SO<sub>x</sub>.
     * ```
     *
     * `.commonmodule.MV SOxEm = 5;`
     */
    public fun clearSOxEm() {
      _builder.clearSOxEm()
    }
    /**
     * ```
     * Emission level of SO<sub>x</sub>.
     * ```
     *
     * `.commonmodule.MV SOxEm = 5;`
     * @return Whether the sOxEm field is set.
     */
    public fun hasSOxEm(): kotlin.Boolean {
      return _builder.hasSOxEm()
    }

    public val ReadingMENVKt.Dsl.sOxEmOrNull: openfmb.commonmodule.MV?
      get() = _builder.sOxEmOrNull

    /**
     * ```
     * Amount of dust particles suspended in air.
     * ```
     *
     * `.commonmodule.MV Dust = 6;`
     */
    public var dust: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getDust")
        get() = _builder.dust
      @kotlin.jvm.JvmName("setDust")
        set(value) {
        _builder.dust = value
      }
    /**
     * ```
     * Amount of dust particles suspended in air.
     * ```
     *
     * `.commonmodule.MV Dust = 6;`
     */
    public fun clearDust() {
      _builder.clearDust()
    }
    /**
     * ```
     * Amount of dust particles suspended in air.
     * ```
     *
     * `.commonmodule.MV Dust = 6;`
     * @return Whether the dust field is set.
     */
    public fun hasDust(): kotlin.Boolean {
      return _builder.hasDust()
    }

    public val ReadingMENVKt.Dsl.dustOrNull: openfmb.commonmodule.MV?
      get() = _builder.dustOrNull

    /**
     * ```
     * Sound pressure level.
     * ```
     *
     * `.commonmodule.MV Snd = 7;`
     */
    public var snd: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getSnd")
        get() = _builder.snd
      @kotlin.jvm.JvmName("setSnd")
        set(value) {
        _builder.snd = value
      }
    /**
     * ```
     * Sound pressure level.
     * ```
     *
     * `.commonmodule.MV Snd = 7;`
     */
    public fun clearSnd() {
      _builder.clearSnd()
    }
    /**
     * ```
     * Sound pressure level.
     * ```
     *
     * `.commonmodule.MV Snd = 7;`
     * @return Whether the snd field is set.
     */
    public fun hasSnd(): kotlin.Boolean {
      return _builder.hasSnd()
    }

    public val ReadingMENVKt.Dsl.sndOrNull: openfmb.commonmodule.MV?
      get() = _builder.sndOrNull

    /**
     * ```
     * Amount of oxygen in combustion gases.
     * ```
     *
     * `.commonmodule.MV O2CmbuGas = 8;`
     */
    public var o2CmbuGas: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getO2CmbuGas")
        get() = _builder.o2CmbuGas
      @kotlin.jvm.JvmName("setO2CmbuGas")
        set(value) {
        _builder.o2CmbuGas = value
      }
    /**
     * ```
     * Amount of oxygen in combustion gases.
     * ```
     *
     * `.commonmodule.MV O2CmbuGas = 8;`
     */
    public fun clearO2CmbuGas() {
      _builder.clearO2CmbuGas()
    }
    /**
     * ```
     * Amount of oxygen in combustion gases.
     * ```
     *
     * `.commonmodule.MV O2CmbuGas = 8;`
     * @return Whether the o2CmbuGas field is set.
     */
    public fun hasO2CmbuGas(): kotlin.Boolean {
      return _builder.hasO2CmbuGas()
    }

    public val ReadingMENVKt.Dsl.o2CmbuGasOrNull: openfmb.commonmodule.MV?
      get() = _builder.o2CmbuGasOrNull

    /**
     * ```
     * Amount of ozone in the air.
     * ```
     *
     * `.commonmodule.MV O3Air = 9;`
     */
    public var o3Air: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getO3Air")
        get() = _builder.o3Air
      @kotlin.jvm.JvmName("setO3Air")
        set(value) {
        _builder.o3Air = value
      }
    /**
     * ```
     * Amount of ozone in the air.
     * ```
     *
     * `.commonmodule.MV O3Air = 9;`
     */
    public fun clearO3Air() {
      _builder.clearO3Air()
    }
    /**
     * ```
     * Amount of ozone in the air.
     * ```
     *
     * `.commonmodule.MV O3Air = 9;`
     * @return Whether the o3Air field is set.
     */
    public fun hasO3Air(): kotlin.Boolean {
      return _builder.hasO3Air()
    }

    public val ReadingMENVKt.Dsl.o3AirOrNull: openfmb.commonmodule.MV?
      get() = _builder.o3AirOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.ReadingMENV.copy(block: `openfmb.commonmodule`.ReadingMENVKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ReadingMENV =
  `openfmb.commonmodule`.ReadingMENVKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.ReadingMENVOrBuilder.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
  get() = if (hasLogicalNode()) getLogicalNode() else null

public val openfmb.commonmodule.ReadingMENVOrBuilder.cO2EmOrNull: openfmb.commonmodule.MV?
  get() = if (hasCO2Em()) getCO2Em() else null

public val openfmb.commonmodule.ReadingMENVOrBuilder.cOEmOrNull: openfmb.commonmodule.MV?
  get() = if (hasCOEm()) getCOEm() else null

public val openfmb.commonmodule.ReadingMENVOrBuilder.nOxEmOrNull: openfmb.commonmodule.MV?
  get() = if (hasNOxEm()) getNOxEm() else null

public val openfmb.commonmodule.ReadingMENVOrBuilder.sOxEmOrNull: openfmb.commonmodule.MV?
  get() = if (hasSOxEm()) getSOxEm() else null

public val openfmb.commonmodule.ReadingMENVOrBuilder.dustOrNull: openfmb.commonmodule.MV?
  get() = if (hasDust()) getDust() else null

public val openfmb.commonmodule.ReadingMENVOrBuilder.sndOrNull: openfmb.commonmodule.MV?
  get() = if (hasSnd()) getSnd() else null

public val openfmb.commonmodule.ReadingMENVOrBuilder.o2CmbuGasOrNull: openfmb.commonmodule.MV?
  get() = if (hasO2CmbuGas()) getO2CmbuGas() else null

public val openfmb.commonmodule.ReadingMENVOrBuilder.o3AirOrNull: openfmb.commonmodule.MV?
  get() = if (hasO3Air()) getO3Air() else null

