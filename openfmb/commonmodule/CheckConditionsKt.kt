// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializecheckConditions")
public inline fun checkConditions(block: openfmb.commonmodule.CheckConditionsKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.CheckConditions =
  openfmb.commonmodule.CheckConditionsKt.Dsl._create(openfmb.commonmodule.CheckConditions.newBuilder()).apply { block() }._build()
/**
 * ```
 * IEC61850-7-2 Service parameter for conditions checking
 * ```
 *
 * Protobuf type `commonmodule.CheckConditions`
 */
public object CheckConditionsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.CheckConditions.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.CheckConditions.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.CheckConditions = _builder.build()

    /**
     * ```
     * InterlockCheck is used for the device to be controlled to check if other devices are in proper
     * state for the control command.  One example is that 2 circuit breakers on a busbar need to be
     * interlocked so one is open and one is closed, but not both on.
     * ```
     *
     * `.google.protobuf.BoolValue interlockCheck = 1;`
     */
    public var interlockCheck: com.google.protobuf.BoolValue
      @JvmName("getInterlockCheck")
      get() = _builder.getInterlockCheck()
      @JvmName("setInterlockCheck")
      set(value) {
        _builder.setInterlockCheck(value)
      }
    /**
     * ```
     * InterlockCheck is used for the device to be controlled to check if other devices are in proper
     * state for the control command.  One example is that 2 circuit breakers on a busbar need to be
     * interlocked so one is open and one is closed, but not both on.
     * ```
     *
     * `.google.protobuf.BoolValue interlockCheck = 1;`
     */
    public fun clearInterlockCheck() {
      _builder.clearInterlockCheck()
    }
    /**
     * ```
     * InterlockCheck is used for the device to be controlled to check if other devices are in proper
     * state for the control command.  One example is that 2 circuit breakers on a busbar need to be
     * interlocked so one is open and one is closed, but not both on.
     * ```
     *
     * `.google.protobuf.BoolValue interlockCheck = 1;`
     * @return Whether the interlockCheck field is set.
     */
    public fun hasInterlockCheck(): kotlin.Boolean {
      return _builder.hasInterlockCheck()
    }

    /**
     * ```
     * To check if a device is synchrous to the system.
     * ```
     *
     * `.google.protobuf.BoolValue synchroCheck = 2;`
     */
    public var synchroCheck: com.google.protobuf.BoolValue
      @JvmName("getSynchroCheck")
      get() = _builder.getSynchroCheck()
      @JvmName("setSynchroCheck")
      set(value) {
        _builder.setSynchroCheck(value)
      }
    /**
     * ```
     * To check if a device is synchrous to the system.
     * ```
     *
     * `.google.protobuf.BoolValue synchroCheck = 2;`
     */
    public fun clearSynchroCheck() {
      _builder.clearSynchroCheck()
    }
    /**
     * ```
     * To check if a device is synchrous to the system.
     * ```
     *
     * `.google.protobuf.BoolValue synchroCheck = 2;`
     * @return Whether the synchroCheck field is set.
     */
    public fun hasSynchroCheck(): kotlin.Boolean {
      return _builder.hasSynchroCheck()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.CheckConditions.copy(block: openfmb.commonmodule.CheckConditionsKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.CheckConditions =
  openfmb.commonmodule.CheckConditionsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.CheckConditionsOrBuilder.interlockCheckOrNull: com.google.protobuf.BoolValue?
  get() = if (hasInterlockCheck()) getInterlockCheck() else null

public val openfmb.commonmodule.CheckConditionsOrBuilder.synchroCheckOrNull: com.google.protobuf.BoolValue?
  get() = if (hasSynchroCheck()) getSynchroCheck() else null

