//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializeoperationStorageDFPF")
public inline fun operationStorageDFPF(block: openfmb.commonmodule.OperationStorageDFPFKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.OperationStorageDFPF =
  openfmb.commonmodule.OperationStorageDFPFKt.Dsl._create(openfmb.commonmodule.OperationStorageDFPF.newBuilder()).apply { block() }._build()
public object OperationStorageDFPFKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.OperationStorageDFPF.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.OperationStorageDFPF.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.OperationStorageDFPF = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.OperationDFPF operationDFPF = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var operationDFPF: openfmb.commonmodule.OperationDFPF
      @JvmName("getOperationDFPF")
      get() = _builder.getOperationDFPF()
      @JvmName("setOperationDFPF")
      set(value) {
        _builder.setOperationDFPF(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.OperationDFPF operationDFPF = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearOperationDFPF() {
      _builder.clearOperationDFPF()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.OperationDFPF operationDFPF = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the operationDFPF field is set.
     */
    public fun hasOperationDFPF(): kotlin.Boolean {
      return _builder.hasOperationDFPF()
    }

    /**
     * <pre>
     * Applies when charging and need not be supported for generating-only DER.
     * </pre>
     *
     * <code>float pFLodTgtMxVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var pFLodTgtMxVal: kotlin.Float
      @JvmName("getPFLodTgtMxVal")
      get() = _builder.getPFLodTgtMxVal()
      @JvmName("setPFLodTgtMxVal")
      set(value) {
        _builder.setPFLodTgtMxVal(value)
      }
    /**
     * <pre>
     * Applies when charging and need not be supported for generating-only DER.
     * </pre>
     *
     * <code>float pFLodTgtMxVal = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearPFLodTgtMxVal() {
      _builder.clearPFLodTgtMxVal()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.OperationStorageDFPF.copy(block: openfmb.commonmodule.OperationStorageDFPFKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.OperationStorageDFPF =
  openfmb.commonmodule.OperationStorageDFPFKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val openfmb.commonmodule.OperationStorageDFPFOrBuilder.operationDFPFOrNull: openfmb.commonmodule.OperationDFPF?
  get() = if (hasOperationDFPF()) getOperationDFPF() else null

