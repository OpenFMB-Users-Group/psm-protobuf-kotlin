//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: generationmodule/generationmodule.proto

package openfmb.generationmodule;

@kotlin.jvm.JvmName("-initializegenerationEvent")
public inline fun generationEvent(block: openfmb.generationmodule.GenerationEventKt.Dsl.() -> kotlin.Unit): openfmb.generationmodule.GenerationEvent =
  openfmb.generationmodule.GenerationEventKt.Dsl._create(openfmb.generationmodule.GenerationEvent.newBuilder()).apply { block() }._build()
public object GenerationEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.generationmodule.GenerationEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.generationmodule.GenerationEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.generationmodule.GenerationEvent = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var eventValue: openfmb.commonmodule.EventValue
      @JvmName("getEventValue")
      get() = _builder.getEventValue()
      @JvmName("setEventValue")
      set(value) {
        _builder.setEventValue(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearEventValue() {
      _builder.clearEventValue()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.EventValue eventValue = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the eventValue field is set.
     */
    public fun hasEventValue(): kotlin.Boolean {
      return _builder.hasEventValue()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.generationmodule.GenerationEventZGEN generationEventZGEN = 2;</code>
     */
    public var generationEventZGEN: openfmb.generationmodule.GenerationEventZGEN
      @JvmName("getGenerationEventZGEN")
      get() = _builder.getGenerationEventZGEN()
      @JvmName("setGenerationEventZGEN")
      set(value) {
        _builder.setGenerationEventZGEN(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.generationmodule.GenerationEventZGEN generationEventZGEN = 2;</code>
     */
    public fun clearGenerationEventZGEN() {
      _builder.clearGenerationEventZGEN()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.generationmodule.GenerationEventZGEN generationEventZGEN = 2;</code>
     * @return Whether the generationEventZGEN field is set.
     */
    public fun hasGenerationEventZGEN(): kotlin.Boolean {
      return _builder.hasGenerationEventZGEN()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.generationmodule.GenerationEvent.copy(block: openfmb.generationmodule.GenerationEventKt.Dsl.() -> kotlin.Unit): openfmb.generationmodule.GenerationEvent =
  openfmb.generationmodule.GenerationEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.generationmodule.GenerationEventOrBuilder.eventValueOrNull: openfmb.commonmodule.EventValue?
  get() = if (hasEventValue()) getEventValue() else null

public val openfmb.generationmodule.GenerationEventOrBuilder.generationEventZGENOrNull: openfmb.generationmodule.GenerationEventZGEN?
  get() = if (hasGenerationEventZGEN()) getGenerationEventZGEN() else null

