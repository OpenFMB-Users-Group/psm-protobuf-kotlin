// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: loadmodule/loadmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.loadmodule;

@kotlin.jvm.JvmName("-initializeloadReadingProfile")
public inline fun loadReadingProfile(block: openfmb.loadmodule.LoadReadingProfileKt.Dsl.() -> kotlin.Unit): openfmb.loadmodule.LoadReadingProfile =
  openfmb.loadmodule.LoadReadingProfileKt.Dsl._create(openfmb.loadmodule.LoadReadingProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Load reading profile
 * ```
 *
 * Protobuf type `loadmodule.LoadReadingProfile`
 */
public object LoadReadingProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.loadmodule.LoadReadingProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.loadmodule.LoadReadingProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.loadmodule.LoadReadingProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var readingMessageInfo: openfmb.commonmodule.ReadingMessageInfo
      @kotlin.jvm.JvmName("getReadingMessageInfo")
        get() = _builder.readingMessageInfo
      @kotlin.jvm.JvmName("setReadingMessageInfo")
        set(value) {
        _builder.readingMessageInfo = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearReadingMessageInfo() {
      _builder.clearReadingMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the readingMessageInfo field is set.
     */
    public fun hasReadingMessageInfo(): kotlin.Boolean {
      return _builder.hasReadingMessageInfo()
    }

    public val LoadReadingProfileKt.Dsl.readingMessageInfoOrNull: openfmb.commonmodule.ReadingMessageInfo?
      get() = _builder.readingMessageInfoOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.EnergyConsumer energyConsumer = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var energyConsumer: openfmb.commonmodule.EnergyConsumer
      @kotlin.jvm.JvmName("getEnergyConsumer")
        get() = _builder.energyConsumer
      @kotlin.jvm.JvmName("setEnergyConsumer")
        set(value) {
        _builder.energyConsumer = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.EnergyConsumer energyConsumer = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearEnergyConsumer() {
      _builder.clearEnergyConsumer()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.EnergyConsumer energyConsumer = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the energyConsumer field is set.
     */
    public fun hasEnergyConsumer(): kotlin.Boolean {
      return _builder.hasEnergyConsumer()
    }

    public val LoadReadingProfileKt.Dsl.energyConsumerOrNull: openfmb.commonmodule.EnergyConsumer?
      get() = _builder.energyConsumerOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.loadmodule.LoadReading loadReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var loadReading: openfmb.loadmodule.LoadReading
      @kotlin.jvm.JvmName("getLoadReading")
        get() = _builder.loadReading
      @kotlin.jvm.JvmName("setLoadReading")
        set(value) {
        _builder.loadReading = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.loadmodule.LoadReading loadReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearLoadReading() {
      _builder.clearLoadReading()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.loadmodule.LoadReading loadReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the loadReading field is set.
     */
    public fun hasLoadReading(): kotlin.Boolean {
      return _builder.hasLoadReading()
    }

    public val LoadReadingProfileKt.Dsl.loadReadingOrNull: openfmb.loadmodule.LoadReading?
      get() = _builder.loadReadingOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.loadmodule.LoadReadingProfile.copy(block: `openfmb.loadmodule`.LoadReadingProfileKt.Dsl.() -> kotlin.Unit): openfmb.loadmodule.LoadReadingProfile =
  `openfmb.loadmodule`.LoadReadingProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.loadmodule.LoadReadingProfileOrBuilder.readingMessageInfoOrNull: openfmb.commonmodule.ReadingMessageInfo?
  get() = if (hasReadingMessageInfo()) getReadingMessageInfo() else null

public val openfmb.loadmodule.LoadReadingProfileOrBuilder.energyConsumerOrNull: openfmb.commonmodule.EnergyConsumer?
  get() = if (hasEnergyConsumer()) getEnergyConsumer() else null

public val openfmb.loadmodule.LoadReadingProfileOrBuilder.loadReadingOrNull: openfmb.loadmodule.LoadReading?
  get() = if (hasLoadReading()) getLoadReading() else null

