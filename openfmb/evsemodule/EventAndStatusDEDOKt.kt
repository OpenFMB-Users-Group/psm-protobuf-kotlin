// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: evsemodule/evsemodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.evsemodule;

@kotlin.jvm.JvmName("-initializeeventAndStatusDEDO")
public inline fun eventAndStatusDEDO(block: openfmb.evsemodule.EventAndStatusDEDOKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.EventAndStatusDEDO =
  openfmb.evsemodule.EventAndStatusDEDOKt.Dsl._create(openfmb.evsemodule.EventAndStatusDEDO.newBuilder()).apply { block() }._build()
/**
 * ```
 * Specialized 61850 DEDO class
 * ```
 *
 * Protobuf type `evsemodule.EventAndStatusDEDO`
 */
public object EventAndStatusDEDOKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.evsemodule.EventAndStatusDEDO.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.evsemodule.EventAndStatusDEDO.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.evsemodule.EventAndStatusDEDO = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];`
     */
    public var logicalNodeForEventAndStatus: openfmb.commonmodule.LogicalNodeForEventAndStatus
      @kotlin.jvm.JvmName("getLogicalNodeForEventAndStatus")
        get() = _builder.logicalNodeForEventAndStatus
      @kotlin.jvm.JvmName("setLogicalNodeForEventAndStatus")
        set(value) {
        _builder.logicalNodeForEventAndStatus = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearLogicalNodeForEventAndStatus() {
      _builder.clearLogicalNodeForEventAndStatus()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the logicalNodeForEventAndStatus field is set.
     */
    public fun hasLogicalNodeForEventAndStatus(): kotlin.Boolean {
      return _builder.hasLogicalNodeForEventAndStatus()
    }

    public val EventAndStatusDEDOKt.Dsl.logicalNodeForEventAndStatusOrNull: openfmb.commonmodule.LogicalNodeForEventAndStatus?
      get() = _builder.logicalNodeForEventAndStatusOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EventAndStatusDEEV eventAndStatusDEEV = 2;`
     */
    public var eventAndStatusDEEV: openfmb.evsemodule.EventAndStatusDEEV
      @kotlin.jvm.JvmName("getEventAndStatusDEEV")
        get() = _builder.eventAndStatusDEEV
      @kotlin.jvm.JvmName("setEventAndStatusDEEV")
        set(value) {
        _builder.eventAndStatusDEEV = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EventAndStatusDEEV eventAndStatusDEEV = 2;`
     */
    public fun clearEventAndStatusDEEV() {
      _builder.clearEventAndStatusDEEV()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EventAndStatusDEEV eventAndStatusDEEV = 2;`
     * @return Whether the eventAndStatusDEEV field is set.
     */
    public fun hasEventAndStatusDEEV(): kotlin.Boolean {
      return _builder.hasEventAndStatusDEEV()
    }

    public val EventAndStatusDEDOKt.Dsl.eventAndStatusDEEVOrNull: openfmb.evsemodule.EventAndStatusDEEV?
      get() = _builder.eventAndStatusDEEVOrNull

    /**
     * ```
     * Capability of the EV cable assembly (according to 61851-1)
     * ```
     *
     * `.evsemodule.ENS_EVDCCableCapabilityKind CabRtgDC = 3;`
     */
    public var cabRtgDC: openfmb.evsemodule.ENS_EVDCCableCapabilityKind
      @kotlin.jvm.JvmName("getCabRtgDC")
        get() = _builder.cabRtgDC
      @kotlin.jvm.JvmName("setCabRtgDC")
        set(value) {
        _builder.cabRtgDC = value
      }
    /**
     * ```
     * Capability of the EV cable assembly (according to 61851-1)
     * ```
     *
     * `.evsemodule.ENS_EVDCCableCapabilityKind CabRtgDC = 3;`
     */
    public fun clearCabRtgDC() {
      _builder.clearCabRtgDC()
    }
    /**
     * ```
     * Capability of the EV cable assembly (according to 61851-1)
     * ```
     *
     * `.evsemodule.ENS_EVDCCableCapabilityKind CabRtgDC = 3;`
     * @return Whether the cabRtgDC field is set.
     */
    public fun hasCabRtgDC(): kotlin.Boolean {
      return _builder.hasCabRtgDC()
    }

    public val EventAndStatusDEDOKt.Dsl.cabRtgDCOrNull: openfmb.evsemodule.ENS_EVDCCableCapabilityKind?
      get() = _builder.cabRtgDCOrNull

    /**
     * ```
     * Connection state for system A connection type (notation from IEC 61851-23/24 system A)
     * ```
     *
     * `.evsemodule.ENS_EVDCConnectionStateAKind ConnStA = 4;`
     */
    public var connStA: openfmb.evsemodule.ENS_EVDCConnectionStateAKind
      @kotlin.jvm.JvmName("getConnStA")
        get() = _builder.connStA
      @kotlin.jvm.JvmName("setConnStA")
        set(value) {
        _builder.connStA = value
      }
    /**
     * ```
     * Connection state for system A connection type (notation from IEC 61851-23/24 system A)
     * ```
     *
     * `.evsemodule.ENS_EVDCConnectionStateAKind ConnStA = 4;`
     */
    public fun clearConnStA() {
      _builder.clearConnStA()
    }
    /**
     * ```
     * Connection state for system A connection type (notation from IEC 61851-23/24 system A)
     * ```
     *
     * `.evsemodule.ENS_EVDCConnectionStateAKind ConnStA = 4;`
     * @return Whether the connStA field is set.
     */
    public fun hasConnStA(): kotlin.Boolean {
      return _builder.hasConnStA()
    }

    public val EventAndStatusDEDOKt.Dsl.connStAOrNull: openfmb.evsemodule.ENS_EVDCConnectionStateAKind?
      get() = _builder.connStAOrNull

    /**
     * ```
     * Connection state for system C connection type (notation from IEC 61851-23/24 system c)
     * ```
     *
     * `.evsemodule.ENS_EVDCConnectionStateCKind ConnStC = 5;`
     */
    public var connStC: openfmb.evsemodule.ENS_EVDCConnectionStateCKind
      @kotlin.jvm.JvmName("getConnStC")
        get() = _builder.connStC
      @kotlin.jvm.JvmName("setConnStC")
        set(value) {
        _builder.connStC = value
      }
    /**
     * ```
     * Connection state for system C connection type (notation from IEC 61851-23/24 system c)
     * ```
     *
     * `.evsemodule.ENS_EVDCConnectionStateCKind ConnStC = 5;`
     */
    public fun clearConnStC() {
      _builder.clearConnStC()
    }
    /**
     * ```
     * Connection state for system C connection type (notation from IEC 61851-23/24 system c)
     * ```
     *
     * `.evsemodule.ENS_EVDCConnectionStateCKind ConnStC = 5;`
     * @return Whether the connStC field is set.
     */
    public fun hasConnStC(): kotlin.Boolean {
      return _builder.hasConnStC()
    }

    public val EventAndStatusDEDOKt.Dsl.connStCOrNull: openfmb.evsemodule.ENS_EVDCConnectionStateCKind?
      get() = _builder.connStCOrNull

    /**
     * ```
     * Plug present and coupler lock state (according to 61851-1)
     * ```
     *
     * `.evsemodule.ENS_EVDCPlugStateKind PlgStDC = 6;`
     */
    public var plgStDC: openfmb.evsemodule.ENS_EVDCPlugStateKind
      @kotlin.jvm.JvmName("getPlgStDC")
        get() = _builder.plgStDC
      @kotlin.jvm.JvmName("setPlgStDC")
        set(value) {
        _builder.plgStDC = value
      }
    /**
     * ```
     * Plug present and coupler lock state (according to 61851-1)
     * ```
     *
     * `.evsemodule.ENS_EVDCPlugStateKind PlgStDC = 6;`
     */
    public fun clearPlgStDC() {
      _builder.clearPlgStDC()
    }
    /**
     * ```
     * Plug present and coupler lock state (according to 61851-1)
     * ```
     *
     * `.evsemodule.ENS_EVDCPlugStateKind PlgStDC = 6;`
     * @return Whether the plgStDC field is set.
     */
    public fun hasPlgStDC(): kotlin.Boolean {
      return _builder.hasPlgStDC()
    }

    public val EventAndStatusDEDOKt.Dsl.plgStDCOrNull: openfmb.evsemodule.ENS_EVDCPlugStateKind?
      get() = _builder.plgStDCOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.evsemodule.EventAndStatusDEDO.copy(block: `openfmb.evsemodule`.EventAndStatusDEDOKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.EventAndStatusDEDO =
  `openfmb.evsemodule`.EventAndStatusDEDOKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.evsemodule.EventAndStatusDEDOOrBuilder.logicalNodeForEventAndStatusOrNull: openfmb.commonmodule.LogicalNodeForEventAndStatus?
  get() = if (hasLogicalNodeForEventAndStatus()) getLogicalNodeForEventAndStatus() else null

public val openfmb.evsemodule.EventAndStatusDEDOOrBuilder.eventAndStatusDEEVOrNull: openfmb.evsemodule.EventAndStatusDEEV?
  get() = if (hasEventAndStatusDEEV()) getEventAndStatusDEEV() else null

public val openfmb.evsemodule.EventAndStatusDEDOOrBuilder.cabRtgDCOrNull: openfmb.evsemodule.ENS_EVDCCableCapabilityKind?
  get() = if (hasCabRtgDC()) getCabRtgDC() else null

public val openfmb.evsemodule.EventAndStatusDEDOOrBuilder.connStAOrNull: openfmb.evsemodule.ENS_EVDCConnectionStateAKind?
  get() = if (hasConnStA()) getConnStA() else null

public val openfmb.evsemodule.EventAndStatusDEDOOrBuilder.connStCOrNull: openfmb.evsemodule.ENS_EVDCConnectionStateCKind?
  get() = if (hasConnStC()) getConnStC() else null

public val openfmb.evsemodule.EventAndStatusDEDOOrBuilder.plgStDCOrNull: openfmb.evsemodule.ENS_EVDCPlugStateKind?
  get() = if (hasPlgStDC()) getPlgStDC() else null

