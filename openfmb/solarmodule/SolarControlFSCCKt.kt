// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: solarmodule/solarmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.solarmodule;

@kotlin.jvm.JvmName("-initializesolarControlFSCC")
public inline fun solarControlFSCC(block: openfmb.solarmodule.SolarControlFSCCKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarControlFSCC =
  openfmb.solarmodule.SolarControlFSCCKt.Dsl._create(openfmb.solarmodule.SolarControlFSCC.newBuilder()).apply { block() }._build()
/**
 * ```
 * Specialized 61850 FSCC class.  LN: Schedule controller   Name: FSCC
 * ```
 *
 * Protobuf type `solarmodule.SolarControlFSCC`
 */
public object SolarControlFSCCKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.solarmodule.SolarControlFSCC.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.solarmodule.SolarControlFSCC.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.solarmodule.SolarControlFSCC = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];`
     */
    public var controlFSCC: openfmb.commonmodule.ControlFSCC
      @kotlin.jvm.JvmName("getControlFSCC")
        get() = _builder.controlFSCC
      @kotlin.jvm.JvmName("setControlFSCC")
        set(value) {
        _builder.controlFSCC = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearControlFSCC() {
      _builder.clearControlFSCC()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the controlFSCC field is set.
     */
    public fun hasControlFSCC(): kotlin.Boolean {
      return _builder.hasControlFSCC()
    }

    public val SolarControlFSCCKt.Dsl.controlFSCCOrNull: openfmb.commonmodule.ControlFSCC?
      get() = _builder.controlFSCCOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarControlScheduleFSCH SolarControlScheduleFSCH = 2;`
     */
    public var solarControlScheduleFSCH: openfmb.solarmodule.SolarControlScheduleFSCH
      @kotlin.jvm.JvmName("getSolarControlScheduleFSCH")
        get() = _builder.solarControlScheduleFSCH
      @kotlin.jvm.JvmName("setSolarControlScheduleFSCH")
        set(value) {
        _builder.solarControlScheduleFSCH = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarControlScheduleFSCH SolarControlScheduleFSCH = 2;`
     */
    public fun clearSolarControlScheduleFSCH() {
      _builder.clearSolarControlScheduleFSCH()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarControlScheduleFSCH SolarControlScheduleFSCH = 2;`
     * @return Whether the solarControlScheduleFSCH field is set.
     */
    public fun hasSolarControlScheduleFSCH(): kotlin.Boolean {
      return _builder.hasSolarControlScheduleFSCH()
    }

    public val SolarControlFSCCKt.Dsl.solarControlScheduleFSCHOrNull: openfmb.solarmodule.SolarControlScheduleFSCH?
      get() = _builder.solarControlScheduleFSCHOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.solarmodule.SolarControlFSCC.copy(block: `openfmb.solarmodule`.SolarControlFSCCKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarControlFSCC =
  `openfmb.solarmodule`.SolarControlFSCCKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.solarmodule.SolarControlFSCCOrBuilder.controlFSCCOrNull: openfmb.commonmodule.ControlFSCC?
  get() = if (hasControlFSCC()) getControlFSCC() else null

public val openfmb.solarmodule.SolarControlFSCCOrBuilder.solarControlScheduleFSCHOrNull: openfmb.solarmodule.SolarControlScheduleFSCH?
  get() = if (hasSolarControlScheduleFSCH()) getSolarControlScheduleFSCH() else null

