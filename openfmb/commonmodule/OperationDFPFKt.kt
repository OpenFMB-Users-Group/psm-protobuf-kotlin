// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializeoperationDFPF")
public inline fun operationDFPF(block: openfmb.commonmodule.OperationDFPFKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.OperationDFPF =
  openfmb.commonmodule.OperationDFPFKt.Dsl._create(openfmb.commonmodule.OperationDFPF.newBuilder()).apply { block() }._build()
/**
 * ```
 * MISSING DOCUMENTATION!!!
 * ```
 *
 * Protobuf type `commonmodule.OperationDFPF`
 */
public object OperationDFPFKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.OperationDFPF.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.OperationDFPF.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.OperationDFPF = _builder.build()

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `bool modEna = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var modEna: kotlin.Boolean
      @JvmName("getModEna")
      get() = _builder.getModEna()
      @JvmName("setModEna")
      set(value) {
        _builder.setModEna(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `bool modEna = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearModEna() {
      _builder.clearModEna()
    }

    /**
     * ```
     * Constant power factor excitation setting  PFExtSet: PFExtSet set to true = overexcited; PFExtSet
     * set to false = underexcited
     * ```
     *
     * `bool pFExtSet = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var pFExtSet: kotlin.Boolean
      @JvmName("getPFExtSet")
      get() = _builder.getPFExtSet()
      @JvmName("setPFExtSet")
      set(value) {
        _builder.setPFExtSet(value)
      }
    /**
     * ```
     * Constant power factor excitation setting  PFExtSet: PFExtSet set to true = overexcited; PFExtSet
     * set to false = underexcited
     * ```
     *
     * `bool pFExtSet = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearPFExtSet() {
      _builder.clearPFExtSet()
    }

    /**
     * ```
     * Applies when generating.  Target power factor setting when generating.  The power factor target
     * is a number between -1 and 1, and is used in conjunction with PFExtSet to indicate whether it to
     * make it over or under excited.
     * ```
     *
     * `float pFGnTgtMxVal = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var pFGnTgtMxVal: kotlin.Float
      @JvmName("getPFGnTgtMxVal")
      get() = _builder.getPFGnTgtMxVal()
      @JvmName("setPFGnTgtMxVal")
      set(value) {
        _builder.setPFGnTgtMxVal(value)
      }
    /**
     * ```
     * Applies when generating.  Target power factor setting when generating.  The power factor target
     * is a number between -1 and 1, and is used in conjunction with PFExtSet to indicate whether it to
     * make it over or under excited.
     * ```
     *
     * `float pFGnTgtMxVal = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearPFGnTgtMxVal() {
      _builder.clearPFGnTgtMxVal()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun openfmb.commonmodule.OperationDFPF.copy(block: openfmb.commonmodule.OperationDFPFKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.OperationDFPF =
  openfmb.commonmodule.OperationDFPFKt.Dsl._create(this.toBuilder()).apply { block() }._build()

