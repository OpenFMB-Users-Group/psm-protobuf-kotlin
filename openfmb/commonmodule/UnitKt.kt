// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializeunit")
public inline fun unit(block: openfmb.commonmodule.UnitKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.Unit =
  openfmb.commonmodule.UnitKt.Dsl._create(openfmb.commonmodule.Unit.newBuilder()).apply { block() }._build()
/**
 * ```
 * Unit definition (Unit)
 * ```
 *
 * Protobuf type `commonmodule.Unit`
 */
public object UnitKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.Unit.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.Unit.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.Unit = _builder.build()

    /**
     * ```
     * (default='') Unit multiplier.
     * ```
     *
     * `.commonmodule.Optional_UnitMultiplierKind multiplier = 1;`
     */
    public var multiplier: openfmb.commonmodule.Optional_UnitMultiplierKind
      @JvmName("getMultiplier")
      get() = _builder.getMultiplier()
      @JvmName("setMultiplier")
      set(value) {
        _builder.setMultiplier(value)
      }
    /**
     * ```
     * (default='') Unit multiplier.
     * ```
     *
     * `.commonmodule.Optional_UnitMultiplierKind multiplier = 1;`
     */
    public fun clearMultiplier() {
      _builder.clearMultiplier()
    }
    /**
     * ```
     * (default='') Unit multiplier.
     * ```
     *
     * `.commonmodule.Optional_UnitMultiplierKind multiplier = 1;`
     * @return Whether the multiplier field is set.
     */
    public fun hasMultiplier(): kotlin.Boolean {
      return _builder.hasMultiplier()
    }

    /**
     * ```
     * SI unit of measure.
     * ```
     *
     * `.commonmodule.UnitSymbolKind SIUnit = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var sIUnit: openfmb.commonmodule.UnitSymbolKind
      @JvmName("getSIUnit")
      get() = _builder.getSIUnit()
      @JvmName("setSIUnit")
      set(value) {
        _builder.setSIUnit(value)
      }
    public var sIUnitValue: kotlin.Int
      @JvmName("getSIUnitValue")
      get() = _builder.getSIUnitValue()
      @JvmName("setSIUnitValue")
      set(value) {
        _builder.setSIUnitValue(value)
      }
    /**
     * ```
     * SI unit of measure.
     * ```
     *
     * `.commonmodule.UnitSymbolKind SIUnit = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearSIUnit() {
      _builder.clearSIUnit()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.Unit.copy(block: openfmb.commonmodule.UnitKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.Unit =
  openfmb.commonmodule.UnitKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.UnitOrBuilder.multiplierOrNull: openfmb.commonmodule.Optional_UnitMultiplierKind?
  get() = if (hasMultiplier()) getMultiplier() else null

