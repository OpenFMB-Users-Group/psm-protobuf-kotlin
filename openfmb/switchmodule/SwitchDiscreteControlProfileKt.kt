// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: switchmodule/switchmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.switchmodule;

@kotlin.jvm.JvmName("-initializeswitchDiscreteControlProfile")
public inline fun switchDiscreteControlProfile(block: openfmb.switchmodule.SwitchDiscreteControlProfileKt.Dsl.() -> kotlin.Unit): openfmb.switchmodule.SwitchDiscreteControlProfile =
  openfmb.switchmodule.SwitchDiscreteControlProfileKt.Dsl._create(openfmb.switchmodule.SwitchDiscreteControlProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Switch control profile
 * ```
 *
 * Protobuf type `switchmodule.SwitchDiscreteControlProfile`
 */
public object SwitchDiscreteControlProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.switchmodule.SwitchDiscreteControlProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.switchmodule.SwitchDiscreteControlProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.switchmodule.SwitchDiscreteControlProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var controlMessageInfo: openfmb.commonmodule.ControlMessageInfo
      @JvmName("getControlMessageInfo")
      get() = _builder.getControlMessageInfo()
      @JvmName("setControlMessageInfo")
      set(value) {
        _builder.setControlMessageInfo(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearControlMessageInfo() {
      _builder.clearControlMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the controlMessageInfo field is set.
     */
    public fun hasControlMessageInfo(): kotlin.Boolean {
      return _builder.hasControlMessageInfo()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.switchmodule.ProtectedSwitch protectedSwitch = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var protectedSwitch: openfmb.switchmodule.ProtectedSwitch
      @JvmName("getProtectedSwitch")
      get() = _builder.getProtectedSwitch()
      @JvmName("setProtectedSwitch")
      set(value) {
        _builder.setProtectedSwitch(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.switchmodule.ProtectedSwitch protectedSwitch = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearProtectedSwitch() {
      _builder.clearProtectedSwitch()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.switchmodule.ProtectedSwitch protectedSwitch = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the protectedSwitch field is set.
     */
    public fun hasProtectedSwitch(): kotlin.Boolean {
      return _builder.hasProtectedSwitch()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.switchmodule.SwitchDiscreteControl switchDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var switchDiscreteControl: openfmb.switchmodule.SwitchDiscreteControl
      @JvmName("getSwitchDiscreteControl")
      get() = _builder.getSwitchDiscreteControl()
      @JvmName("setSwitchDiscreteControl")
      set(value) {
        _builder.setSwitchDiscreteControl(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.switchmodule.SwitchDiscreteControl switchDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearSwitchDiscreteControl() {
      _builder.clearSwitchDiscreteControl()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.switchmodule.SwitchDiscreteControl switchDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the switchDiscreteControl field is set.
     */
    public fun hasSwitchDiscreteControl(): kotlin.Boolean {
      return _builder.hasSwitchDiscreteControl()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun openfmb.switchmodule.SwitchDiscreteControlProfile.copy(block: openfmb.switchmodule.SwitchDiscreteControlProfileKt.Dsl.() -> kotlin.Unit): openfmb.switchmodule.SwitchDiscreteControlProfile =
  openfmb.switchmodule.SwitchDiscreteControlProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.switchmodule.SwitchDiscreteControlProfileOrBuilder.controlMessageInfoOrNull: openfmb.commonmodule.ControlMessageInfo?
  get() = if (hasControlMessageInfo()) getControlMessageInfo() else null

public val openfmb.switchmodule.SwitchDiscreteControlProfileOrBuilder.protectedSwitchOrNull: openfmb.switchmodule.ProtectedSwitch?
  get() = if (hasProtectedSwitch()) getProtectedSwitch() else null

public val openfmb.switchmodule.SwitchDiscreteControlProfileOrBuilder.switchDiscreteControlOrNull: openfmb.switchmodule.SwitchDiscreteControl?
  get() = if (hasSwitchDiscreteControl()) getSwitchDiscreteControl() else null

