// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializewYE")
public inline fun wYE(block: openfmb.commonmodule.WYEKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.WYE =
  openfmb.commonmodule.WYEKt.Dsl._create(openfmb.commonmodule.WYE.newBuilder()).apply { block() }._build()
/**
 * ```
 * Phase to ground/neutral related measured values of a three-phase system (WYE)
 * ```
 *
 * Protobuf type `commonmodule.WYE`
 */
public object WYEKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.WYE.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.WYE.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.WYE = _builder.build()

    /**
     * ```
     * Net current, as the algebraic sum of the instantaneous values of currents flowing through all
     * live conductors and the neutral of a circuit at one point of the electrical installation ('phsA
     * instCVal'+'phsB.instCVal'+'phsC.instCVal'+'neut.instCVal').
     * ```
     *
     * `.commonmodule.CMV net = 1;`
     */
    public var net: openfmb.commonmodule.CMV
      @kotlin.jvm.JvmName("getNet")
        get() = _builder.net
      @kotlin.jvm.JvmName("setNet")
        set(value) {
        _builder.net = value
      }
    /**
     * ```
     * Net current, as the algebraic sum of the instantaneous values of currents flowing through all
     * live conductors and the neutral of a circuit at one point of the electrical installation ('phsA
     * instCVal'+'phsB.instCVal'+'phsC.instCVal'+'neut.instCVal').
     * ```
     *
     * `.commonmodule.CMV net = 1;`
     */
    public fun clearNet() {
      _builder.clearNet()
    }
    /**
     * ```
     * Net current, as the algebraic sum of the instantaneous values of currents flowing through all
     * live conductors and the neutral of a circuit at one point of the electrical installation ('phsA
     * instCVal'+'phsB.instCVal'+'phsC.instCVal'+'neut.instCVal').
     * ```
     *
     * `.commonmodule.CMV net = 1;`
     * @return Whether the net field is set.
     */
    public fun hasNet(): kotlin.Boolean {
      return _builder.hasNet()
    }

    public val WYEKt.Dsl.netOrNull: openfmb.commonmodule.CMV?
      get() = _builder.netOrNull

    /**
     * ```
     * Value of the measured phase neutral. If a direct measurement of this value is not available, it
     * is acceptable to substitute an estimate computed by creating the algebraic sum of the instantaneous
     * values of currents flowing through all live conductors ('phsA.instCVal'+'phsB.instCVal'+'phsC
     * instCVal'); in that case, 'neut'='res'.
     * ```
     *
     * `.commonmodule.CMV neut = 2;`
     */
    public var neut: openfmb.commonmodule.CMV
      @kotlin.jvm.JvmName("getNeut")
        get() = _builder.neut
      @kotlin.jvm.JvmName("setNeut")
        set(value) {
        _builder.neut = value
      }
    /**
     * ```
     * Value of the measured phase neutral. If a direct measurement of this value is not available, it
     * is acceptable to substitute an estimate computed by creating the algebraic sum of the instantaneous
     * values of currents flowing through all live conductors ('phsA.instCVal'+'phsB.instCVal'+'phsC
     * instCVal'); in that case, 'neut'='res'.
     * ```
     *
     * `.commonmodule.CMV neut = 2;`
     */
    public fun clearNeut() {
      _builder.clearNeut()
    }
    /**
     * ```
     * Value of the measured phase neutral. If a direct measurement of this value is not available, it
     * is acceptable to substitute an estimate computed by creating the algebraic sum of the instantaneous
     * values of currents flowing through all live conductors ('phsA.instCVal'+'phsB.instCVal'+'phsC
     * instCVal'); in that case, 'neut'='res'.
     * ```
     *
     * `.commonmodule.CMV neut = 2;`
     * @return Whether the neut field is set.
     */
    public fun hasNeut(): kotlin.Boolean {
      return _builder.hasNeut()
    }

    public val WYEKt.Dsl.neutOrNull: openfmb.commonmodule.CMV?
      get() = _builder.neutOrNull

    /**
     * ```
     * Value of phase A.
     * ```
     *
     * `.commonmodule.CMV phsA = 3;`
     */
    public var phsA: openfmb.commonmodule.CMV
      @kotlin.jvm.JvmName("getPhsA")
        get() = _builder.phsA
      @kotlin.jvm.JvmName("setPhsA")
        set(value) {
        _builder.phsA = value
      }
    /**
     * ```
     * Value of phase A.
     * ```
     *
     * `.commonmodule.CMV phsA = 3;`
     */
    public fun clearPhsA() {
      _builder.clearPhsA()
    }
    /**
     * ```
     * Value of phase A.
     * ```
     *
     * `.commonmodule.CMV phsA = 3;`
     * @return Whether the phsA field is set.
     */
    public fun hasPhsA(): kotlin.Boolean {
      return _builder.hasPhsA()
    }

    public val WYEKt.Dsl.phsAOrNull: openfmb.commonmodule.CMV?
      get() = _builder.phsAOrNull

    /**
     * ```
     * Value of phase B.
     * ```
     *
     * `.commonmodule.CMV phsB = 4;`
     */
    public var phsB: openfmb.commonmodule.CMV
      @kotlin.jvm.JvmName("getPhsB")
        get() = _builder.phsB
      @kotlin.jvm.JvmName("setPhsB")
        set(value) {
        _builder.phsB = value
      }
    /**
     * ```
     * Value of phase B.
     * ```
     *
     * `.commonmodule.CMV phsB = 4;`
     */
    public fun clearPhsB() {
      _builder.clearPhsB()
    }
    /**
     * ```
     * Value of phase B.
     * ```
     *
     * `.commonmodule.CMV phsB = 4;`
     * @return Whether the phsB field is set.
     */
    public fun hasPhsB(): kotlin.Boolean {
      return _builder.hasPhsB()
    }

    public val WYEKt.Dsl.phsBOrNull: openfmb.commonmodule.CMV?
      get() = _builder.phsBOrNull

    /**
     * ```
     * Value of phase C.
     * ```
     *
     * `.commonmodule.CMV phsC = 5;`
     */
    public var phsC: openfmb.commonmodule.CMV
      @kotlin.jvm.JvmName("getPhsC")
        get() = _builder.phsC
      @kotlin.jvm.JvmName("setPhsC")
        set(value) {
        _builder.phsC = value
      }
    /**
     * ```
     * Value of phase C.
     * ```
     *
     * `.commonmodule.CMV phsC = 5;`
     */
    public fun clearPhsC() {
      _builder.clearPhsC()
    }
    /**
     * ```
     * Value of phase C.
     * ```
     *
     * `.commonmodule.CMV phsC = 5;`
     * @return Whether the phsC field is set.
     */
    public fun hasPhsC(): kotlin.Boolean {
      return _builder.hasPhsC()
    }

    public val WYEKt.Dsl.phsCOrNull: openfmb.commonmodule.CMV?
      get() = _builder.phsCOrNull

    /**
     * ```
     * Residual current, as the algebraic sum of the instantaneous values of currents flowing through
     * all live conductors of a circuit at one point of the electrical installation ('phsA.instCVal'+'phsB
     * instCVal'+'phsC.instCVal').
     * ```
     *
     * `.commonmodule.CMV res = 6;`
     */
    public var res: openfmb.commonmodule.CMV
      @kotlin.jvm.JvmName("getRes")
        get() = _builder.res
      @kotlin.jvm.JvmName("setRes")
        set(value) {
        _builder.res = value
      }
    /**
     * ```
     * Residual current, as the algebraic sum of the instantaneous values of currents flowing through
     * all live conductors of a circuit at one point of the electrical installation ('phsA.instCVal'+'phsB
     * instCVal'+'phsC.instCVal').
     * ```
     *
     * `.commonmodule.CMV res = 6;`
     */
    public fun clearRes() {
      _builder.clearRes()
    }
    /**
     * ```
     * Residual current, as the algebraic sum of the instantaneous values of currents flowing through
     * all live conductors of a circuit at one point of the electrical installation ('phsA.instCVal'+'phsB
     * instCVal'+'phsC.instCVal').
     * ```
     *
     * `.commonmodule.CMV res = 6;`
     * @return Whether the res field is set.
     */
    public fun hasRes(): kotlin.Boolean {
      return _builder.hasRes()
    }

    public val WYEKt.Dsl.resOrNull: openfmb.commonmodule.CMV?
      get() = _builder.resOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.WYE.copy(block: `openfmb.commonmodule`.WYEKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.WYE =
  `openfmb.commonmodule`.WYEKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.WYEOrBuilder.netOrNull: openfmb.commonmodule.CMV?
  get() = if (hasNet()) getNet() else null

public val openfmb.commonmodule.WYEOrBuilder.neutOrNull: openfmb.commonmodule.CMV?
  get() = if (hasNeut()) getNeut() else null

public val openfmb.commonmodule.WYEOrBuilder.phsAOrNull: openfmb.commonmodule.CMV?
  get() = if (hasPhsA()) getPhsA() else null

public val openfmb.commonmodule.WYEOrBuilder.phsBOrNull: openfmb.commonmodule.CMV?
  get() = if (hasPhsB()) getPhsB() else null

public val openfmb.commonmodule.WYEOrBuilder.phsCOrNull: openfmb.commonmodule.CMV?
  get() = if (hasPhsC()) getPhsC() else null

public val openfmb.commonmodule.WYEOrBuilder.resOrNull: openfmb.commonmodule.CMV?
  get() = if (hasRes()) getRes() else null

