//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializelogicalNodeForControl")
public inline fun logicalNodeForControl(block: openfmb.commonmodule.LogicalNodeForControlKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.LogicalNodeForControl =
  openfmb.commonmodule.LogicalNodeForControlKt.Dsl._create(openfmb.commonmodule.LogicalNodeForControl.newBuilder()).apply { block() }._build()
public object LogicalNodeForControlKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.LogicalNodeForControl.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.LogicalNodeForControl.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.LogicalNodeForControl = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var logicalNode: openfmb.commonmodule.LogicalNode
      @JvmName("getLogicalNode")
      get() = _builder.getLogicalNode()
      @JvmName("setLogicalNode")
      set(value) {
        _builder.setLogicalNode(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearLogicalNode() {
      _builder.clearLogicalNode()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the logicalNode field is set.
     */
    public fun hasLogicalNode(): kotlin.Boolean {
      return _builder.hasLogicalNode()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.LogicalNodeForControl.copy(block: openfmb.commonmodule.LogicalNodeForControlKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.LogicalNodeForControl =
  openfmb.commonmodule.LogicalNodeForControlKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.LogicalNodeForControlOrBuilder.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
  get() = if (hasLogicalNode()) getLogicalNode() else null

