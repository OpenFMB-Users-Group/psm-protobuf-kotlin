//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: regulatormodule/regulatormodule.proto

package openfmb.regulatormodule;

@kotlin.jvm.JvmName("-initializeregulatorReading")
public inline fun regulatorReading(block: openfmb.regulatormodule.RegulatorReadingKt.Dsl.() -> kotlin.Unit): openfmb.regulatormodule.RegulatorReading =
  openfmb.regulatormodule.RegulatorReadingKt.Dsl._create(openfmb.regulatormodule.RegulatorReading.newBuilder()).apply { block() }._build()
public object RegulatorReadingKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.regulatormodule.RegulatorReading.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.regulatormodule.RegulatorReading.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.regulatormodule.RegulatorReading = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var conductingEquipmentTerminalReading: openfmb.commonmodule.ConductingEquipmentTerminalReading
      @JvmName("getConductingEquipmentTerminalReading")
      get() = _builder.getConductingEquipmentTerminalReading()
      @JvmName("setConductingEquipmentTerminalReading")
      set(value) {
        _builder.setConductingEquipmentTerminalReading(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearConductingEquipmentTerminalReading() {
      _builder.clearConductingEquipmentTerminalReading()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the conductingEquipmentTerminalReading field is set.
     */
    public fun hasConductingEquipmentTerminalReading(): kotlin.Boolean {
      return _builder.hasConductingEquipmentTerminalReading()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.PhaseMMTN phaseMMTN = 2;</code>
     */
    public var phaseMMTN: openfmb.commonmodule.PhaseMMTN
      @JvmName("getPhaseMMTN")
      get() = _builder.getPhaseMMTN()
      @JvmName("setPhaseMMTN")
      set(value) {
        _builder.setPhaseMMTN(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.PhaseMMTN phaseMMTN = 2;</code>
     */
    public fun clearPhaseMMTN() {
      _builder.clearPhaseMMTN()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.PhaseMMTN phaseMMTN = 2;</code>
     * @return Whether the phaseMMTN field is set.
     */
    public fun hasPhaseMMTN(): kotlin.Boolean {
      return _builder.hasPhaseMMTN()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ReadingMMTR readingMMTR = 3;</code>
     */
    public var readingMMTR: openfmb.commonmodule.ReadingMMTR
      @JvmName("getReadingMMTR")
      get() = _builder.getReadingMMTR()
      @JvmName("setReadingMMTR")
      set(value) {
        _builder.setReadingMMTR(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ReadingMMTR readingMMTR = 3;</code>
     */
    public fun clearReadingMMTR() {
      _builder.clearReadingMMTR()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ReadingMMTR readingMMTR = 3;</code>
     * @return Whether the readingMMTR field is set.
     */
    public fun hasReadingMMTR(): kotlin.Boolean {
      return _builder.hasReadingMMTR()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ReadingMMXU readingMMXU = 4;</code>
     */
    public var readingMMXU: openfmb.commonmodule.ReadingMMXU
      @JvmName("getReadingMMXU")
      get() = _builder.getReadingMMXU()
      @JvmName("setReadingMMXU")
      set(value) {
        _builder.setReadingMMXU(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ReadingMMXU readingMMXU = 4;</code>
     */
    public fun clearReadingMMXU() {
      _builder.clearReadingMMXU()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ReadingMMXU readingMMXU = 4;</code>
     * @return Whether the readingMMXU field is set.
     */
    public fun hasReadingMMXU(): kotlin.Boolean {
      return _builder.hasReadingMMXU()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ReadingMMXU secondaryReadingMMXU = 5;</code>
     */
    public var secondaryReadingMMXU: openfmb.commonmodule.ReadingMMXU
      @JvmName("getSecondaryReadingMMXU")
      get() = _builder.getSecondaryReadingMMXU()
      @JvmName("setSecondaryReadingMMXU")
      set(value) {
        _builder.setSecondaryReadingMMXU(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ReadingMMXU secondaryReadingMMXU = 5;</code>
     */
    public fun clearSecondaryReadingMMXU() {
      _builder.clearSecondaryReadingMMXU()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ReadingMMXU secondaryReadingMMXU = 5;</code>
     * @return Whether the secondaryReadingMMXU field is set.
     */
    public fun hasSecondaryReadingMMXU(): kotlin.Boolean {
      return _builder.hasSecondaryReadingMMXU()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.regulatormodule.RegulatorReading.copy(block: openfmb.regulatormodule.RegulatorReadingKt.Dsl.() -> kotlin.Unit): openfmb.regulatormodule.RegulatorReading =
  openfmb.regulatormodule.RegulatorReadingKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val openfmb.regulatormodule.RegulatorReadingOrBuilder.conductingEquipmentTerminalReadingOrNull: openfmb.commonmodule.ConductingEquipmentTerminalReading?
  get() = if (hasConductingEquipmentTerminalReading()) getConductingEquipmentTerminalReading() else null

val openfmb.regulatormodule.RegulatorReadingOrBuilder.phaseMMTNOrNull: openfmb.commonmodule.PhaseMMTN?
  get() = if (hasPhaseMMTN()) getPhaseMMTN() else null

val openfmb.regulatormodule.RegulatorReadingOrBuilder.readingMMTROrNull: openfmb.commonmodule.ReadingMMTR?
  get() = if (hasReadingMMTR()) getReadingMMTR() else null

val openfmb.regulatormodule.RegulatorReadingOrBuilder.readingMMXUOrNull: openfmb.commonmodule.ReadingMMXU?
  get() = if (hasReadingMMXU()) getReadingMMXU() else null

val openfmb.regulatormodule.RegulatorReadingOrBuilder.secondaryReadingMMXUOrNull: openfmb.commonmodule.ReadingMMXU?
  get() = if (hasSecondaryReadingMMXU()) getSecondaryReadingMMXU() else null

