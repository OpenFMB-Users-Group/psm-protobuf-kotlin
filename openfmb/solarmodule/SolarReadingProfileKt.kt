// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: solarmodule/solarmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.solarmodule;

@kotlin.jvm.JvmName("-initializesolarReadingProfile")
public inline fun solarReadingProfile(block: openfmb.solarmodule.SolarReadingProfileKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarReadingProfile =
  openfmb.solarmodule.SolarReadingProfileKt.Dsl._create(openfmb.solarmodule.SolarReadingProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Solar reading profile
 * ```
 *
 * Protobuf type `solarmodule.SolarReadingProfile`
 */
public object SolarReadingProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.solarmodule.SolarReadingProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.solarmodule.SolarReadingProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.solarmodule.SolarReadingProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var readingMessageInfo: openfmb.commonmodule.ReadingMessageInfo
      @kotlin.jvm.JvmName("getReadingMessageInfo")
        get() = _builder.readingMessageInfo
      @kotlin.jvm.JvmName("setReadingMessageInfo")
        set(value) {
        _builder.readingMessageInfo = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearReadingMessageInfo() {
      _builder.clearReadingMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the readingMessageInfo field is set.
     */
    public fun hasReadingMessageInfo(): kotlin.Boolean {
      return _builder.hasReadingMessageInfo()
    }

    public val SolarReadingProfileKt.Dsl.readingMessageInfoOrNull: openfmb.commonmodule.ReadingMessageInfo?
      get() = _builder.readingMessageInfoOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var solarInverter: openfmb.solarmodule.SolarInverter
      @kotlin.jvm.JvmName("getSolarInverter")
        get() = _builder.solarInverter
      @kotlin.jvm.JvmName("setSolarInverter")
        set(value) {
        _builder.solarInverter = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearSolarInverter() {
      _builder.clearSolarInverter()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarInverter solarInverter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the solarInverter field is set.
     */
    public fun hasSolarInverter(): kotlin.Boolean {
      return _builder.hasSolarInverter()
    }

    public val SolarReadingProfileKt.Dsl.solarInverterOrNull: openfmb.solarmodule.SolarInverter?
      get() = _builder.solarInverterOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarReading solarReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var solarReading: openfmb.solarmodule.SolarReading
      @kotlin.jvm.JvmName("getSolarReading")
        get() = _builder.solarReading
      @kotlin.jvm.JvmName("setSolarReading")
        set(value) {
        _builder.solarReading = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarReading solarReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearSolarReading() {
      _builder.clearSolarReading()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarReading solarReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the solarReading field is set.
     */
    public fun hasSolarReading(): kotlin.Boolean {
      return _builder.hasSolarReading()
    }

    public val SolarReadingProfileKt.Dsl.solarReadingOrNull: openfmb.solarmodule.SolarReading?
      get() = _builder.solarReadingOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.solarmodule.SolarReadingProfile.copy(block: `openfmb.solarmodule`.SolarReadingProfileKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarReadingProfile =
  `openfmb.solarmodule`.SolarReadingProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.solarmodule.SolarReadingProfileOrBuilder.readingMessageInfoOrNull: openfmb.commonmodule.ReadingMessageInfo?
  get() = if (hasReadingMessageInfo()) getReadingMessageInfo() else null

public val openfmb.solarmodule.SolarReadingProfileOrBuilder.solarInverterOrNull: openfmb.solarmodule.SolarInverter?
  get() = if (hasSolarInverter()) getSolarInverter() else null

public val openfmb.solarmodule.SolarReadingProfileOrBuilder.solarReadingOrNull: openfmb.solarmodule.SolarReading?
  get() = if (hasSolarReading()) getSolarReading() else null

