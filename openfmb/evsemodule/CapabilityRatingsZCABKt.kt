// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: evsemodule/evsemodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.evsemodule;

@kotlin.jvm.JvmName("-initializecapabilityRatingsZCAB")
public inline fun capabilityRatingsZCAB(block: openfmb.evsemodule.CapabilityRatingsZCABKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.CapabilityRatingsZCAB =
  openfmb.evsemodule.CapabilityRatingsZCABKt.Dsl._create(openfmb.evsemodule.CapabilityRatingsZCAB.newBuilder()).apply { block() }._build()
/**
 * ```
 * MISSING DOCUMENTATION!!!
 * ```
 *
 * Protobuf type `evsemodule.CapabilityRatingsZCAB`
 */
public object CapabilityRatingsZCABKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.evsemodule.CapabilityRatingsZCAB.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.evsemodule.CapabilityRatingsZCAB.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.evsemodule.CapabilityRatingsZCAB = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public var logicalNode: openfmb.commonmodule.LogicalNode
      @kotlin.jvm.JvmName("getLogicalNode")
        get() = _builder.logicalNode
      @kotlin.jvm.JvmName("setLogicalNode")
        set(value) {
        _builder.logicalNode = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearLogicalNode() {
      _builder.clearLogicalNode()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the logicalNode field is set.
     */
    public fun hasLogicalNode(): kotlin.Boolean {
      return _builder.hasLogicalNode()
    }

    public val CapabilityRatingsZCABKt.Dsl.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
      get() = _builder.logicalNodeOrNull

    /**
     * ```
     * Rated current of the cable in A
     * ```
     *
     * `.commonmodule.ASG ARtg = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var aRtg: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getARtg")
        get() = _builder.aRtg
      @kotlin.jvm.JvmName("setARtg")
        set(value) {
        _builder.aRtg = value
      }
    /**
     * ```
     * Rated current of the cable in A
     * ```
     *
     * `.commonmodule.ASG ARtg = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearARtg() {
      _builder.clearARtg()
    }
    /**
     * ```
     * Rated current of the cable in A
     * ```
     *
     * `.commonmodule.ASG ARtg = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the aRtg field is set.
     */
    public fun hasARtg(): kotlin.Boolean {
      return _builder.hasARtg()
    }

    public val CapabilityRatingsZCABKt.Dsl.aRtgOrNull: openfmb.commonmodule.ASG?
      get() = _builder.aRtgOrNull

    /**
     * ```
     * Maximum overload of the cable in percent
     * ```
     *
     * `.commonmodule.ASG OvlMaxPct = 3;`
     */
    public var ovlMaxPct: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getOvlMaxPct")
        get() = _builder.ovlMaxPct
      @kotlin.jvm.JvmName("setOvlMaxPct")
        set(value) {
        _builder.ovlMaxPct = value
      }
    /**
     * ```
     * Maximum overload of the cable in percent
     * ```
     *
     * `.commonmodule.ASG OvlMaxPct = 3;`
     */
    public fun clearOvlMaxPct() {
      _builder.clearOvlMaxPct()
    }
    /**
     * ```
     * Maximum overload of the cable in percent
     * ```
     *
     * `.commonmodule.ASG OvlMaxPct = 3;`
     * @return Whether the ovlMaxPct field is set.
     */
    public fun hasOvlMaxPct(): kotlin.Boolean {
      return _builder.hasOvlMaxPct()
    }

    public val CapabilityRatingsZCABKt.Dsl.ovlMaxPctOrNull: openfmb.commonmodule.ASG?
      get() = _builder.ovlMaxPctOrNull

    /**
     * ```
     * Maximum time allowed for corresponding overload set as Tmm
     * ```
     *
     * `.commonmodule.ControlING OvlMaxTm = 4;`
     */
    public var ovlMaxTm: openfmb.commonmodule.ControlING
      @kotlin.jvm.JvmName("getOvlMaxTm")
        get() = _builder.ovlMaxTm
      @kotlin.jvm.JvmName("setOvlMaxTm")
        set(value) {
        _builder.ovlMaxTm = value
      }
    /**
     * ```
     * Maximum time allowed for corresponding overload set as Tmm
     * ```
     *
     * `.commonmodule.ControlING OvlMaxTm = 4;`
     */
    public fun clearOvlMaxTm() {
      _builder.clearOvlMaxTm()
    }
    /**
     * ```
     * Maximum time allowed for corresponding overload set as Tmm
     * ```
     *
     * `.commonmodule.ControlING OvlMaxTm = 4;`
     * @return Whether the ovlMaxTm field is set.
     */
    public fun hasOvlMaxTm(): kotlin.Boolean {
      return _builder.hasOvlMaxTm()
    }

    public val CapabilityRatingsZCABKt.Dsl.ovlMaxTmOrNull: openfmb.commonmodule.ControlING?
      get() = _builder.ovlMaxTmOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.evsemodule.CapabilityRatingsZCAB.copy(block: `openfmb.evsemodule`.CapabilityRatingsZCABKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.CapabilityRatingsZCAB =
  `openfmb.evsemodule`.CapabilityRatingsZCABKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.evsemodule.CapabilityRatingsZCABOrBuilder.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
  get() = if (hasLogicalNode()) getLogicalNode() else null

public val openfmb.evsemodule.CapabilityRatingsZCABOrBuilder.aRtgOrNull: openfmb.commonmodule.ASG?
  get() = if (hasARtg()) getARtg() else null

public val openfmb.evsemodule.CapabilityRatingsZCABOrBuilder.ovlMaxPctOrNull: openfmb.commonmodule.ASG?
  get() = if (hasOvlMaxPct()) getOvlMaxPct() else null

public val openfmb.evsemodule.CapabilityRatingsZCABOrBuilder.ovlMaxTmOrNull: openfmb.commonmodule.ControlING?
  get() = if (hasOvlMaxTm()) getOvlMaxTm() else null

