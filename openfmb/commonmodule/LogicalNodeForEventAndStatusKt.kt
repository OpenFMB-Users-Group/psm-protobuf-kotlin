//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializelogicalNodeForEventAndStatus")
public inline fun logicalNodeForEventAndStatus(block: openfmb.commonmodule.LogicalNodeForEventAndStatusKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.LogicalNodeForEventAndStatus =
  openfmb.commonmodule.LogicalNodeForEventAndStatusKt.Dsl._create(openfmb.commonmodule.LogicalNodeForEventAndStatus.newBuilder()).apply { block() }._build()
public object LogicalNodeForEventAndStatusKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.LogicalNodeForEventAndStatus.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.LogicalNodeForEventAndStatus.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.LogicalNodeForEventAndStatus = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var logicalNode: openfmb.commonmodule.LogicalNode
      @JvmName("getLogicalNode")
      get() = _builder.getLogicalNode()
      @JvmName("setLogicalNode")
      set(value) {
        _builder.setLogicalNode(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearLogicalNode() {
      _builder.clearLogicalNode()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the logicalNode field is set.
     */
    public fun hasLogicalNode(): kotlin.Boolean {
      return _builder.hasLogicalNode()
    }

    /**
     * <pre>
     * Behavior of the function
     * </pre>
     *
     * <code>.commonmodule.ENS_BehaviourModeKind Beh = 2;</code>
     */
    public var beh: openfmb.commonmodule.ENS_BehaviourModeKind
      @JvmName("getBeh")
      get() = _builder.getBeh()
      @JvmName("setBeh")
      set(value) {
        _builder.setBeh(value)
      }
    /**
     * <pre>
     * Behavior of the function
     * </pre>
     *
     * <code>.commonmodule.ENS_BehaviourModeKind Beh = 2;</code>
     */
    public fun clearBeh() {
      _builder.clearBeh()
    }
    /**
     * <pre>
     * Behavior of the function
     * </pre>
     *
     * <code>.commonmodule.ENS_BehaviourModeKind Beh = 2;</code>
     * @return Whether the beh field is set.
     */
    public fun hasBeh(): kotlin.Boolean {
      return _builder.hasBeh()
    }

    /**
     * <pre>
     * Asset health
     * </pre>
     *
     * <code>.commonmodule.ENS_HealthKind EEHealth = 3;</code>
     */
    public var eEHealth: openfmb.commonmodule.ENS_HealthKind
      @JvmName("getEEHealth")
      get() = _builder.getEEHealth()
      @JvmName("setEEHealth")
      set(value) {
        _builder.setEEHealth(value)
      }
    /**
     * <pre>
     * Asset health
     * </pre>
     *
     * <code>.commonmodule.ENS_HealthKind EEHealth = 3;</code>
     */
    public fun clearEEHealth() {
      _builder.clearEEHealth()
    }
    /**
     * <pre>
     * Asset health
     * </pre>
     *
     * <code>.commonmodule.ENS_HealthKind EEHealth = 3;</code>
     * @return Whether the eEHealth field is set.
     */
    public fun hasEEHealth(): kotlin.Boolean {
      return _builder.hasEEHealth()
    }

    /**
     * <pre>
     * Hot line tag.
     * </pre>
     *
     * <code>.commonmodule.StatusSPS HotLineTag = 4;</code>
     */
    public var hotLineTag: openfmb.commonmodule.StatusSPS
      @JvmName("getHotLineTag")
      get() = _builder.getHotLineTag()
      @JvmName("setHotLineTag")
      set(value) {
        _builder.setHotLineTag(value)
      }
    /**
     * <pre>
     * Hot line tag.
     * </pre>
     *
     * <code>.commonmodule.StatusSPS HotLineTag = 4;</code>
     */
    public fun clearHotLineTag() {
      _builder.clearHotLineTag()
    }
    /**
     * <pre>
     * Hot line tag.
     * </pre>
     *
     * <code>.commonmodule.StatusSPS HotLineTag = 4;</code>
     * @return Whether the hotLineTag field is set.
     */
    public fun hasHotLineTag(): kotlin.Boolean {
      return _builder.hasHotLineTag()
    }

    /**
     * <pre>
     * Remote control block.
     * </pre>
     *
     * <code>.commonmodule.StatusSPS RemoteBlk = 5;</code>
     */
    public var remoteBlk: openfmb.commonmodule.StatusSPS
      @JvmName("getRemoteBlk")
      get() = _builder.getRemoteBlk()
      @JvmName("setRemoteBlk")
      set(value) {
        _builder.setRemoteBlk(value)
      }
    /**
     * <pre>
     * Remote control block.
     * </pre>
     *
     * <code>.commonmodule.StatusSPS RemoteBlk = 5;</code>
     */
    public fun clearRemoteBlk() {
      _builder.clearRemoteBlk()
    }
    /**
     * <pre>
     * Remote control block.
     * </pre>
     *
     * <code>.commonmodule.StatusSPS RemoteBlk = 5;</code>
     * @return Whether the remoteBlk field is set.
     */
    public fun hasRemoteBlk(): kotlin.Boolean {
      return _builder.hasRemoteBlk()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.LogicalNodeForEventAndStatus.copy(block: openfmb.commonmodule.LogicalNodeForEventAndStatusKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.LogicalNodeForEventAndStatus =
  openfmb.commonmodule.LogicalNodeForEventAndStatusKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.LogicalNodeForEventAndStatusOrBuilder.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
  get() = if (hasLogicalNode()) getLogicalNode() else null

public val openfmb.commonmodule.LogicalNodeForEventAndStatusOrBuilder.behOrNull: openfmb.commonmodule.ENS_BehaviourModeKind?
  get() = if (hasBeh()) getBeh() else null

public val openfmb.commonmodule.LogicalNodeForEventAndStatusOrBuilder.eEHealthOrNull: openfmb.commonmodule.ENS_HealthKind?
  get() = if (hasEEHealth()) getEEHealth() else null

public val openfmb.commonmodule.LogicalNodeForEventAndStatusOrBuilder.hotLineTagOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasHotLineTag()) getHotLineTag() else null

public val openfmb.commonmodule.LogicalNodeForEventAndStatusOrBuilder.remoteBlkOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasRemoteBlk()) getRemoteBlk() else null

