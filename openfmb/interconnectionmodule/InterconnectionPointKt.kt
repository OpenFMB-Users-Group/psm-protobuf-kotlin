// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: interconnectionmodule/interconnectionmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.interconnectionmodule;

@kotlin.jvm.JvmName("-initializeinterconnectionPoint")
public inline fun interconnectionPoint(block: openfmb.interconnectionmodule.InterconnectionPointKt.Dsl.() -> kotlin.Unit): openfmb.interconnectionmodule.InterconnectionPoint =
  openfmb.interconnectionmodule.InterconnectionPointKt.Dsl._create(openfmb.interconnectionmodule.InterconnectionPoint.newBuilder()).apply { block() }._build()
/**
 * ```
 * Point definition (Point)
 * ```
 *
 * Protobuf type `interconnectionmodule.InterconnectionPoint`
 */
public object InterconnectionPointKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.interconnectionmodule.InterconnectionPoint.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.interconnectionmodule.InterconnectionPoint.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.interconnectionmodule.InterconnectionPoint = _builder.build()

    /**
     * ```
     * Black start enable
     * ```
     *
     * `.commonmodule.ControlSPC blackStartEnabled = 1;`
     */
    public var blackStartEnabled: openfmb.commonmodule.ControlSPC
      @kotlin.jvm.JvmName("getBlackStartEnabled")
        get() = _builder.blackStartEnabled
      @kotlin.jvm.JvmName("setBlackStartEnabled")
        set(value) {
        _builder.blackStartEnabled = value
      }
    /**
     * ```
     * Black start enable
     * ```
     *
     * `.commonmodule.ControlSPC blackStartEnabled = 1;`
     */
    public fun clearBlackStartEnabled() {
      _builder.clearBlackStartEnabled()
    }
    /**
     * ```
     * Black start enable
     * ```
     *
     * `.commonmodule.ControlSPC blackStartEnabled = 1;`
     * @return Whether the blackStartEnabled field is set.
     */
    public fun hasBlackStartEnabled(): kotlin.Boolean {
      return _builder.hasBlackStartEnabled()
    }

    public val InterconnectionPointKt.Dsl.blackStartEnabledOrNull: openfmb.commonmodule.ControlSPC?
      get() = _builder.blackStartEnabledOrNull

    /**
     * ```
     * Enable frequency set point
     * ```
     *
     * `.commonmodule.ControlSPC frequencySetPointEnabled = 2;`
     */
    public var frequencySetPointEnabled: openfmb.commonmodule.ControlSPC
      @kotlin.jvm.JvmName("getFrequencySetPointEnabled")
        get() = _builder.frequencySetPointEnabled
      @kotlin.jvm.JvmName("setFrequencySetPointEnabled")
        set(value) {
        _builder.frequencySetPointEnabled = value
      }
    /**
     * ```
     * Enable frequency set point
     * ```
     *
     * `.commonmodule.ControlSPC frequencySetPointEnabled = 2;`
     */
    public fun clearFrequencySetPointEnabled() {
      _builder.clearFrequencySetPointEnabled()
    }
    /**
     * ```
     * Enable frequency set point
     * ```
     *
     * `.commonmodule.ControlSPC frequencySetPointEnabled = 2;`
     * @return Whether the frequencySetPointEnabled field is set.
     */
    public fun hasFrequencySetPointEnabled(): kotlin.Boolean {
      return _builder.hasFrequencySetPointEnabled()
    }

    public val InterconnectionPointKt.Dsl.frequencySetPointEnabledOrNull: openfmb.commonmodule.ControlSPC?
      get() = _builder.frequencySetPointEnabledOrNull

    /**
     * ```
     * Island control
     * ```
     *
     * `.commonmodule.ControlSPC island = 3;`
     */
    public var island: openfmb.commonmodule.ControlSPC
      @kotlin.jvm.JvmName("getIsland")
        get() = _builder.island
      @kotlin.jvm.JvmName("setIsland")
        set(value) {
        _builder.island = value
      }
    /**
     * ```
     * Island control
     * ```
     *
     * `.commonmodule.ControlSPC island = 3;`
     */
    public fun clearIsland() {
      _builder.clearIsland()
    }
    /**
     * ```
     * Island control
     * ```
     *
     * `.commonmodule.ControlSPC island = 3;`
     * @return Whether the island field is set.
     */
    public fun hasIsland(): kotlin.Boolean {
      return _builder.hasIsland()
    }

    public val InterconnectionPointKt.Dsl.islandOrNull: openfmb.commonmodule.ControlSPC?
      get() = _builder.islandOrNull

    /**
     * ```
     * Black start enable
     * ```
     *
     * `.google.protobuf.FloatValue pctHzDroop = 4;`
     */
    public var pctHzDroop: com.google.protobuf.FloatValue
      @kotlin.jvm.JvmName("getPctHzDroop")
        get() = _builder.pctHzDroop
      @kotlin.jvm.JvmName("setPctHzDroop")
        set(value) {
        _builder.pctHzDroop = value
      }
    /**
     * ```
     * Black start enable
     * ```
     *
     * `.google.protobuf.FloatValue pctHzDroop = 4;`
     */
    public fun clearPctHzDroop() {
      _builder.clearPctHzDroop()
    }
    /**
     * ```
     * Black start enable
     * ```
     *
     * `.google.protobuf.FloatValue pctHzDroop = 4;`
     * @return Whether the pctHzDroop field is set.
     */
    public fun hasPctHzDroop(): kotlin.Boolean {
      return _builder.hasPctHzDroop()
    }

    public val InterconnectionPointKt.Dsl.pctHzDroopOrNull: com.google.protobuf.FloatValue?
      get() = _builder.pctHzDroopOrNull

    /**
     * ```
     * Black start enable
     * ```
     *
     * `.google.protobuf.FloatValue pctVDroop = 5;`
     */
    public var pctVDroop: com.google.protobuf.FloatValue
      @kotlin.jvm.JvmName("getPctVDroop")
        get() = _builder.pctVDroop
      @kotlin.jvm.JvmName("setPctVDroop")
        set(value) {
        _builder.pctVDroop = value
      }
    /**
     * ```
     * Black start enable
     * ```
     *
     * `.google.protobuf.FloatValue pctVDroop = 5;`
     */
    public fun clearPctVDroop() {
      _builder.clearPctVDroop()
    }
    /**
     * ```
     * Black start enable
     * ```
     *
     * `.google.protobuf.FloatValue pctVDroop = 5;`
     * @return Whether the pctVDroop field is set.
     */
    public fun hasPctVDroop(): kotlin.Boolean {
      return _builder.hasPctVDroop()
    }

    public val InterconnectionPointKt.Dsl.pctVDroopOrNull: com.google.protobuf.FloatValue?
      get() = _builder.pctVDroopOrNull

    /**
     * ```
     * Ramp rates
     * ```
     *
     * `.commonmodule.RampRate rampRates = 6;`
     */
    public var rampRates: openfmb.commonmodule.RampRate
      @kotlin.jvm.JvmName("getRampRates")
        get() = _builder.rampRates
      @kotlin.jvm.JvmName("setRampRates")
        set(value) {
        _builder.rampRates = value
      }
    /**
     * ```
     * Ramp rates
     * ```
     *
     * `.commonmodule.RampRate rampRates = 6;`
     */
    public fun clearRampRates() {
      _builder.clearRampRates()
    }
    /**
     * ```
     * Ramp rates
     * ```
     *
     * `.commonmodule.RampRate rampRates = 6;`
     * @return Whether the rampRates field is set.
     */
    public fun hasRampRates(): kotlin.Boolean {
      return _builder.hasRampRates()
    }

    public val InterconnectionPointKt.Dsl.rampRatesOrNull: openfmb.commonmodule.RampRate?
      get() = _builder.rampRatesOrNull

    /**
     * ```
     * Enable reactive power set point
     * ```
     *
     * `.commonmodule.ControlSPC reactivePwrSetPointEnabled = 7;`
     */
    public var reactivePwrSetPointEnabled: openfmb.commonmodule.ControlSPC
      @kotlin.jvm.JvmName("getReactivePwrSetPointEnabled")
        get() = _builder.reactivePwrSetPointEnabled
      @kotlin.jvm.JvmName("setReactivePwrSetPointEnabled")
        set(value) {
        _builder.reactivePwrSetPointEnabled = value
      }
    /**
     * ```
     * Enable reactive power set point
     * ```
     *
     * `.commonmodule.ControlSPC reactivePwrSetPointEnabled = 7;`
     */
    public fun clearReactivePwrSetPointEnabled() {
      _builder.clearReactivePwrSetPointEnabled()
    }
    /**
     * ```
     * Enable reactive power set point
     * ```
     *
     * `.commonmodule.ControlSPC reactivePwrSetPointEnabled = 7;`
     * @return Whether the reactivePwrSetPointEnabled field is set.
     */
    public fun hasReactivePwrSetPointEnabled(): kotlin.Boolean {
      return _builder.hasReactivePwrSetPointEnabled()
    }

    public val InterconnectionPointKt.Dsl.reactivePwrSetPointEnabledOrNull: openfmb.commonmodule.ControlSPC?
      get() = _builder.reactivePwrSetPointEnabledOrNull

    /**
     * ```
     * Enable real power set point
     * ```
     *
     * `.commonmodule.ControlSPC realPwrSetPointEnabled = 8;`
     */
    public var realPwrSetPointEnabled: openfmb.commonmodule.ControlSPC
      @kotlin.jvm.JvmName("getRealPwrSetPointEnabled")
        get() = _builder.realPwrSetPointEnabled
      @kotlin.jvm.JvmName("setRealPwrSetPointEnabled")
        set(value) {
        _builder.realPwrSetPointEnabled = value
      }
    /**
     * ```
     * Enable real power set point
     * ```
     *
     * `.commonmodule.ControlSPC realPwrSetPointEnabled = 8;`
     */
    public fun clearRealPwrSetPointEnabled() {
      _builder.clearRealPwrSetPointEnabled()
    }
    /**
     * ```
     * Enable real power set point
     * ```
     *
     * `.commonmodule.ControlSPC realPwrSetPointEnabled = 8;`
     * @return Whether the realPwrSetPointEnabled field is set.
     */
    public fun hasRealPwrSetPointEnabled(): kotlin.Boolean {
      return _builder.hasRealPwrSetPointEnabled()
    }

    public val InterconnectionPointKt.Dsl.realPwrSetPointEnabledOrNull: openfmb.commonmodule.ControlSPC?
      get() = _builder.realPwrSetPointEnabledOrNull

    /**
     * ```
     * Enable voltage set point
     * ```
     *
     * `.commonmodule.ControlSPC voltageSetPointEnabled = 9;`
     */
    public var voltageSetPointEnabled: openfmb.commonmodule.ControlSPC
      @kotlin.jvm.JvmName("getVoltageSetPointEnabled")
        get() = _builder.voltageSetPointEnabled
      @kotlin.jvm.JvmName("setVoltageSetPointEnabled")
        set(value) {
        _builder.voltageSetPointEnabled = value
      }
    /**
     * ```
     * Enable voltage set point
     * ```
     *
     * `.commonmodule.ControlSPC voltageSetPointEnabled = 9;`
     */
    public fun clearVoltageSetPointEnabled() {
      _builder.clearVoltageSetPointEnabled()
    }
    /**
     * ```
     * Enable voltage set point
     * ```
     *
     * `.commonmodule.ControlSPC voltageSetPointEnabled = 9;`
     * @return Whether the voltageSetPointEnabled field is set.
     */
    public fun hasVoltageSetPointEnabled(): kotlin.Boolean {
      return _builder.hasVoltageSetPointEnabled()
    }

    public val InterconnectionPointKt.Dsl.voltageSetPointEnabledOrNull: openfmb.commonmodule.ControlSPC?
      get() = _builder.voltageSetPointEnabledOrNull

    /**
     * ```
     * Start time
     * ```
     *
     * `.commonmodule.Timestamp startTime = 10 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var startTime: openfmb.commonmodule.Timestamp
      @kotlin.jvm.JvmName("getStartTime")
        get() = _builder.startTime
      @kotlin.jvm.JvmName("setStartTime")
        set(value) {
        _builder.startTime = value
      }
    /**
     * ```
     * Start time
     * ```
     *
     * `.commonmodule.Timestamp startTime = 10 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearStartTime() {
      _builder.clearStartTime()
    }
    /**
     * ```
     * Start time
     * ```
     *
     * `.commonmodule.Timestamp startTime = 10 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the startTime field is set.
     */
    public fun hasStartTime(): kotlin.Boolean {
      return _builder.hasStartTime()
    }

    public val InterconnectionPointKt.Dsl.startTimeOrNull: openfmb.commonmodule.Timestamp?
      get() = _builder.startTimeOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.interconnectionmodule.InterconnectionPoint.copy(block: `openfmb.interconnectionmodule`.InterconnectionPointKt.Dsl.() -> kotlin.Unit): openfmb.interconnectionmodule.InterconnectionPoint =
  `openfmb.interconnectionmodule`.InterconnectionPointKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.interconnectionmodule.InterconnectionPointOrBuilder.blackStartEnabledOrNull: openfmb.commonmodule.ControlSPC?
  get() = if (hasBlackStartEnabled()) getBlackStartEnabled() else null

public val openfmb.interconnectionmodule.InterconnectionPointOrBuilder.frequencySetPointEnabledOrNull: openfmb.commonmodule.ControlSPC?
  get() = if (hasFrequencySetPointEnabled()) getFrequencySetPointEnabled() else null

public val openfmb.interconnectionmodule.InterconnectionPointOrBuilder.islandOrNull: openfmb.commonmodule.ControlSPC?
  get() = if (hasIsland()) getIsland() else null

public val openfmb.interconnectionmodule.InterconnectionPointOrBuilder.pctHzDroopOrNull: com.google.protobuf.FloatValue?
  get() = if (hasPctHzDroop()) getPctHzDroop() else null

public val openfmb.interconnectionmodule.InterconnectionPointOrBuilder.pctVDroopOrNull: com.google.protobuf.FloatValue?
  get() = if (hasPctVDroop()) getPctVDroop() else null

public val openfmb.interconnectionmodule.InterconnectionPointOrBuilder.rampRatesOrNull: openfmb.commonmodule.RampRate?
  get() = if (hasRampRates()) getRampRates() else null

public val openfmb.interconnectionmodule.InterconnectionPointOrBuilder.reactivePwrSetPointEnabledOrNull: openfmb.commonmodule.ControlSPC?
  get() = if (hasReactivePwrSetPointEnabled()) getReactivePwrSetPointEnabled() else null

public val openfmb.interconnectionmodule.InterconnectionPointOrBuilder.realPwrSetPointEnabledOrNull: openfmb.commonmodule.ControlSPC?
  get() = if (hasRealPwrSetPointEnabled()) getRealPwrSetPointEnabled() else null

public val openfmb.interconnectionmodule.InterconnectionPointOrBuilder.voltageSetPointEnabledOrNull: openfmb.commonmodule.ControlSPC?
  get() = if (hasVoltageSetPointEnabled()) getVoltageSetPointEnabled() else null

public val openfmb.interconnectionmodule.InterconnectionPointOrBuilder.startTimeOrNull: openfmb.commonmodule.Timestamp?
  get() = if (hasStartTime()) getStartTime() else null

