// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: evsemodule/evsemodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.evsemodule;

@kotlin.jvm.JvmName("-initializeeventAndStatusDESE")
public inline fun eventAndStatusDESE(block: openfmb.evsemodule.EventAndStatusDESEKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.EventAndStatusDESE =
  openfmb.evsemodule.EventAndStatusDESEKt.Dsl._create(openfmb.evsemodule.EventAndStatusDESE.newBuilder()).apply { block() }._build()
/**
 * ```
 * Specialized 61850 DESE class
 * ```
 *
 * Protobuf type `evsemodule.EventAndStatusDESE`
 */
public object EventAndStatusDESEKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.evsemodule.EventAndStatusDESE.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.evsemodule.EventAndStatusDESE.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.evsemodule.EventAndStatusDESE = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];`
     */
    public var logicalNodeForEventAndStatus: openfmb.commonmodule.LogicalNodeForEventAndStatus
      @kotlin.jvm.JvmName("getLogicalNodeForEventAndStatus")
        get() = _builder.logicalNodeForEventAndStatus
      @kotlin.jvm.JvmName("setLogicalNodeForEventAndStatus")
        set(value) {
        _builder.logicalNodeForEventAndStatus = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearLogicalNodeForEventAndStatus() {
      _builder.clearLogicalNodeForEventAndStatus()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the logicalNodeForEventAndStatus field is set.
     */
    public fun hasLogicalNodeForEventAndStatus(): kotlin.Boolean {
      return _builder.hasLogicalNodeForEventAndStatus()
    }

    public val EventAndStatusDESEKt.Dsl.logicalNodeForEventAndStatusOrNull: openfmb.commonmodule.LogicalNodeForEventAndStatus?
      get() = _builder.logicalNodeForEventAndStatusOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EventAndStatusDEAO eventAndStatusDEAO = 2;`
     */
    public var eventAndStatusDEAO: openfmb.evsemodule.EventAndStatusDEAO
      @kotlin.jvm.JvmName("getEventAndStatusDEAO")
        get() = _builder.eventAndStatusDEAO
      @kotlin.jvm.JvmName("setEventAndStatusDEAO")
        set(value) {
        _builder.eventAndStatusDEAO = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EventAndStatusDEAO eventAndStatusDEAO = 2;`
     */
    public fun clearEventAndStatusDEAO() {
      _builder.clearEventAndStatusDEAO()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EventAndStatusDEAO eventAndStatusDEAO = 2;`
     * @return Whether the eventAndStatusDEAO field is set.
     */
    public fun hasEventAndStatusDEAO(): kotlin.Boolean {
      return _builder.hasEventAndStatusDEAO()
    }

    public val EventAndStatusDESEKt.Dsl.eventAndStatusDEAOOrNull: openfmb.evsemodule.EventAndStatusDEAO?
      get() = _builder.eventAndStatusDEAOOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EventAndStatusDEDO eventAndStatusDEDO = 3;`
     */
    public var eventAndStatusDEDO: openfmb.evsemodule.EventAndStatusDEDO
      @kotlin.jvm.JvmName("getEventAndStatusDEDO")
        get() = _builder.eventAndStatusDEDO
      @kotlin.jvm.JvmName("setEventAndStatusDEDO")
        set(value) {
        _builder.eventAndStatusDEDO = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EventAndStatusDEDO eventAndStatusDEDO = 3;`
     */
    public fun clearEventAndStatusDEDO() {
      _builder.clearEventAndStatusDEDO()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EventAndStatusDEDO eventAndStatusDEDO = 3;`
     * @return Whether the eventAndStatusDEDO field is set.
     */
    public fun hasEventAndStatusDEDO(): kotlin.Boolean {
      return _builder.hasEventAndStatusDEDO()
    }

    public val EventAndStatusDESEKt.Dsl.eventAndStatusDEDOOrNull: openfmb.evsemodule.EventAndStatusDEDO?
      get() = _builder.eventAndStatusDEDOOrNull

    /**
     * ```
     * Isolation test fault (i.e. the isolation test executed before charging has failed)
     * ```
     *
     * `.commonmodule.StatusSPS IsoTestFlt = 4;`
     */
    public var isoTestFlt: openfmb.commonmodule.StatusSPS
      @kotlin.jvm.JvmName("getIsoTestFlt")
        get() = _builder.isoTestFlt
      @kotlin.jvm.JvmName("setIsoTestFlt")
        set(value) {
        _builder.isoTestFlt = value
      }
    /**
     * ```
     * Isolation test fault (i.e. the isolation test executed before charging has failed)
     * ```
     *
     * `.commonmodule.StatusSPS IsoTestFlt = 4;`
     */
    public fun clearIsoTestFlt() {
      _builder.clearIsoTestFlt()
    }
    /**
     * ```
     * Isolation test fault (i.e. the isolation test executed before charging has failed)
     * ```
     *
     * `.commonmodule.StatusSPS IsoTestFlt = 4;`
     * @return Whether the isoTestFlt field is set.
     */
    public fun hasIsoTestFlt(): kotlin.Boolean {
      return _builder.hasIsoTestFlt()
    }

    public val EventAndStatusDESEKt.Dsl.isoTestFltOrNull: openfmb.commonmodule.StatusSPS?
      get() = _builder.isoTestFltOrNull

    /**
     * ```
     * Short circuit test fault (i.e. short circuit test before charging has failed)
     * ```
     *
     * `.commonmodule.StatusSPS ScTestFlt = 5;`
     */
    public var scTestFlt: openfmb.commonmodule.StatusSPS
      @kotlin.jvm.JvmName("getScTestFlt")
        get() = _builder.scTestFlt
      @kotlin.jvm.JvmName("setScTestFlt")
        set(value) {
        _builder.scTestFlt = value
      }
    /**
     * ```
     * Short circuit test fault (i.e. short circuit test before charging has failed)
     * ```
     *
     * `.commonmodule.StatusSPS ScTestFlt = 5;`
     */
    public fun clearScTestFlt() {
      _builder.clearScTestFlt()
    }
    /**
     * ```
     * Short circuit test fault (i.e. short circuit test before charging has failed)
     * ```
     *
     * `.commonmodule.StatusSPS ScTestFlt = 5;`
     * @return Whether the scTestFlt field is set.
     */
    public fun hasScTestFlt(): kotlin.Boolean {
      return _builder.hasScTestFlt()
    }

    public val EventAndStatusDESEKt.Dsl.scTestFltOrNull: openfmb.commonmodule.StatusSPS?
      get() = _builder.scTestFltOrNull

    /**
     * ```
     * Detection of loss of digital communication
     * ```
     *
     * `.commonmodule.StatusSPS DigCommLos = 6;`
     */
    public var digCommLos: openfmb.commonmodule.StatusSPS
      @kotlin.jvm.JvmName("getDigCommLos")
        get() = _builder.digCommLos
      @kotlin.jvm.JvmName("setDigCommLos")
        set(value) {
        _builder.digCommLos = value
      }
    /**
     * ```
     * Detection of loss of digital communication
     * ```
     *
     * `.commonmodule.StatusSPS DigCommLos = 6;`
     */
    public fun clearDigCommLos() {
      _builder.clearDigCommLos()
    }
    /**
     * ```
     * Detection of loss of digital communication
     * ```
     *
     * `.commonmodule.StatusSPS DigCommLos = 6;`
     * @return Whether the digCommLos field is set.
     */
    public fun hasDigCommLos(): kotlin.Boolean {
      return _builder.hasDigCommLos()
    }

    public val EventAndStatusDESEKt.Dsl.digCommLosOrNull: openfmb.commonmodule.StatusSPS?
      get() = _builder.digCommLosOrNull

    /**
     * ```
     * Detection of a welding condition
     * ```
     *
     * `.commonmodule.StatusSPS WldDet = 7;`
     */
    public var wldDet: openfmb.commonmodule.StatusSPS
      @kotlin.jvm.JvmName("getWldDet")
        get() = _builder.wldDet
      @kotlin.jvm.JvmName("setWldDet")
        set(value) {
        _builder.wldDet = value
      }
    /**
     * ```
     * Detection of a welding condition
     * ```
     *
     * `.commonmodule.StatusSPS WldDet = 7;`
     */
    public fun clearWldDet() {
      _builder.clearWldDet()
    }
    /**
     * ```
     * Detection of a welding condition
     * ```
     *
     * `.commonmodule.StatusSPS WldDet = 7;`
     * @return Whether the wldDet field is set.
     */
    public fun hasWldDet(): kotlin.Boolean {
      return _builder.hasWldDet()
    }

    public val EventAndStatusDESEKt.Dsl.wldDetOrNull: openfmb.commonmodule.StatusSPS?
      get() = _builder.wldDetOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EVSEPointStatus PointStatus = 8;`
     */
    public var pointStatus: openfmb.evsemodule.EVSEPointStatus
      @kotlin.jvm.JvmName("getPointStatus")
        get() = _builder.pointStatus
      @kotlin.jvm.JvmName("setPointStatus")
        set(value) {
        _builder.pointStatus = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EVSEPointStatus PointStatus = 8;`
     */
    public fun clearPointStatus() {
      _builder.clearPointStatus()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EVSEPointStatus PointStatus = 8;`
     * @return Whether the pointStatus field is set.
     */
    public fun hasPointStatus(): kotlin.Boolean {
      return _builder.hasPointStatus()
    }

    public val EventAndStatusDESEKt.Dsl.pointStatusOrNull: openfmb.evsemodule.EVSEPointStatus?
      get() = _builder.pointStatusOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.evsemodule.EventAndStatusDESE.copy(block: `openfmb.evsemodule`.EventAndStatusDESEKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.EventAndStatusDESE =
  `openfmb.evsemodule`.EventAndStatusDESEKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.evsemodule.EventAndStatusDESEOrBuilder.logicalNodeForEventAndStatusOrNull: openfmb.commonmodule.LogicalNodeForEventAndStatus?
  get() = if (hasLogicalNodeForEventAndStatus()) getLogicalNodeForEventAndStatus() else null

public val openfmb.evsemodule.EventAndStatusDESEOrBuilder.eventAndStatusDEAOOrNull: openfmb.evsemodule.EventAndStatusDEAO?
  get() = if (hasEventAndStatusDEAO()) getEventAndStatusDEAO() else null

public val openfmb.evsemodule.EventAndStatusDESEOrBuilder.eventAndStatusDEDOOrNull: openfmb.evsemodule.EventAndStatusDEDO?
  get() = if (hasEventAndStatusDEDO()) getEventAndStatusDEDO() else null

public val openfmb.evsemodule.EventAndStatusDESEOrBuilder.isoTestFltOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasIsoTestFlt()) getIsoTestFlt() else null

public val openfmb.evsemodule.EventAndStatusDESEOrBuilder.scTestFltOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasScTestFlt()) getScTestFlt() else null

public val openfmb.evsemodule.EventAndStatusDESEOrBuilder.digCommLosOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasDigCommLos()) getDigCommLos() else null

public val openfmb.evsemodule.EventAndStatusDESEOrBuilder.wldDetOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasWldDet()) getWldDet() else null

public val openfmb.evsemodule.EventAndStatusDESEOrBuilder.pointStatusOrNull: openfmb.evsemodule.EVSEPointStatus?
  get() = if (hasPointStatus()) getPointStatus() else null

