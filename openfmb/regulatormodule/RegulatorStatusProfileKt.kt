//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: regulatormodule/regulatormodule.proto

package openfmb.regulatormodule;

@kotlin.jvm.JvmName("-initializeregulatorStatusProfile")
public inline fun regulatorStatusProfile(block: openfmb.regulatormodule.RegulatorStatusProfileKt.Dsl.() -> kotlin.Unit): openfmb.regulatormodule.RegulatorStatusProfile =
  openfmb.regulatormodule.RegulatorStatusProfileKt.Dsl._create(openfmb.regulatormodule.RegulatorStatusProfile.newBuilder()).apply { block() }._build()
public object RegulatorStatusProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.regulatormodule.RegulatorStatusProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.regulatormodule.RegulatorStatusProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.regulatormodule.RegulatorStatusProfile = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var statusMessageInfo: openfmb.commonmodule.StatusMessageInfo
      @JvmName("getStatusMessageInfo")
      get() = _builder.getStatusMessageInfo()
      @JvmName("setStatusMessageInfo")
      set(value) {
        _builder.setStatusMessageInfo(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearStatusMessageInfo() {
      _builder.clearStatusMessageInfo()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the statusMessageInfo field is set.
     */
    public fun hasStatusMessageInfo(): kotlin.Boolean {
      return _builder.hasStatusMessageInfo()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.regulatormodule.RegulatorStatus regulatorStatus = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var regulatorStatus: openfmb.regulatormodule.RegulatorStatus
      @JvmName("getRegulatorStatus")
      get() = _builder.getRegulatorStatus()
      @JvmName("setRegulatorStatus")
      set(value) {
        _builder.setRegulatorStatus(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.regulatormodule.RegulatorStatus regulatorStatus = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearRegulatorStatus() {
      _builder.clearRegulatorStatus()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.regulatormodule.RegulatorStatus regulatorStatus = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @return Whether the regulatorStatus field is set.
     */
    public fun hasRegulatorStatus(): kotlin.Boolean {
      return _builder.hasRegulatorStatus()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var regulatorSystem: openfmb.regulatormodule.RegulatorSystem
      @JvmName("getRegulatorSystem")
      get() = _builder.getRegulatorSystem()
      @JvmName("setRegulatorSystem")
      set(value) {
        _builder.setRegulatorSystem(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearRegulatorSystem() {
      _builder.clearRegulatorSystem()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @return Whether the regulatorSystem field is set.
     */
    public fun hasRegulatorSystem(): kotlin.Boolean {
      return _builder.hasRegulatorSystem()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.regulatormodule.RegulatorStatusProfile.copy(block: openfmb.regulatormodule.RegulatorStatusProfileKt.Dsl.() -> kotlin.Unit): openfmb.regulatormodule.RegulatorStatusProfile =
  openfmb.regulatormodule.RegulatorStatusProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.regulatormodule.RegulatorStatusProfileOrBuilder.statusMessageInfoOrNull: openfmb.commonmodule.StatusMessageInfo?
  get() = if (hasStatusMessageInfo()) getStatusMessageInfo() else null

public val openfmb.regulatormodule.RegulatorStatusProfileOrBuilder.regulatorStatusOrNull: openfmb.regulatormodule.RegulatorStatus?
  get() = if (hasRegulatorStatus()) getRegulatorStatus() else null

public val openfmb.regulatormodule.RegulatorStatusProfileOrBuilder.regulatorSystemOrNull: openfmb.regulatormodule.RegulatorSystem?
  get() = if (hasRegulatorSystem()) getRegulatorSystem() else null

