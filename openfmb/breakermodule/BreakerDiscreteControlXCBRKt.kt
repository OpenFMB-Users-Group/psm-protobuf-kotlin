//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: breakermodule/breakermodule.proto

package openfmb.breakermodule;

@kotlin.jvm.JvmName("-initializebreakerDiscreteControlXCBR")
public inline fun breakerDiscreteControlXCBR(block: openfmb.breakermodule.BreakerDiscreteControlXCBRKt.Dsl.() -> kotlin.Unit): openfmb.breakermodule.BreakerDiscreteControlXCBR =
  openfmb.breakermodule.BreakerDiscreteControlXCBRKt.Dsl._create(openfmb.breakermodule.BreakerDiscreteControlXCBR.newBuilder()).apply { block() }._build()
public object BreakerDiscreteControlXCBRKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.breakermodule.BreakerDiscreteControlXCBR.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.breakermodule.BreakerDiscreteControlXCBR.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.breakermodule.BreakerDiscreteControlXCBR = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.DiscreteControlXCBR discreteControlXCBR = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var discreteControlXCBR: openfmb.commonmodule.DiscreteControlXCBR
      @JvmName("getDiscreteControlXCBR")
      get() = _builder.getDiscreteControlXCBR()
      @JvmName("setDiscreteControlXCBR")
      set(value) {
        _builder.setDiscreteControlXCBR(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.DiscreteControlXCBR discreteControlXCBR = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearDiscreteControlXCBR() {
      _builder.clearDiscreteControlXCBR()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.DiscreteControlXCBR discreteControlXCBR = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the discreteControlXCBR field is set.
     */
    public fun hasDiscreteControlXCBR(): kotlin.Boolean {
      return _builder.hasDiscreteControlXCBR()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.breakermodule.BreakerDiscreteControlXCBR.copy(block: openfmb.breakermodule.BreakerDiscreteControlXCBRKt.Dsl.() -> kotlin.Unit): openfmb.breakermodule.BreakerDiscreteControlXCBR =
  openfmb.breakermodule.BreakerDiscreteControlXCBRKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.breakermodule.BreakerDiscreteControlXCBROrBuilder.discreteControlXCBROrNull: openfmb.commonmodule.DiscreteControlXCBR?
  get() = if (hasDiscreteControlXCBR()) getDiscreteControlXCBR() else null

