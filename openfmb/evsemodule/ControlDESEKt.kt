// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: evsemodule/evsemodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.evsemodule;

@kotlin.jvm.JvmName("-initializecontrolDESE")
public inline fun controlDESE(block: openfmb.evsemodule.ControlDESEKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.ControlDESE =
  openfmb.evsemodule.ControlDESEKt.Dsl._create(openfmb.evsemodule.ControlDESE.newBuilder()).apply { block() }._build()
/**
 * ```
 * Specialized 61850 DESE class.  LN: Controlling the features of an EVSE   Name: DESE
 * ```
 *
 * Protobuf type `evsemodule.ControlDESE`
 */
public object ControlDESEKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.evsemodule.ControlDESE.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.evsemodule.ControlDESE.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.evsemodule.ControlDESE = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];`
     */
    public var controlFSCC: openfmb.commonmodule.ControlFSCC
      @kotlin.jvm.JvmName("getControlFSCC")
        get() = _builder.controlFSCC
      @kotlin.jvm.JvmName("setControlFSCC")
        set(value) {
        _builder.controlFSCC = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearControlFSCC() {
      _builder.clearControlFSCC()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the controlFSCC field is set.
     */
    public fun hasControlFSCC(): kotlin.Boolean {
      return _builder.hasControlFSCC()
    }

    public val ControlDESEKt.Dsl.controlFSCCOrNull: openfmb.commonmodule.ControlFSCC?
      get() = _builder.controlFSCCOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.DESEControlScheduleFSCH deseControlScheduleFSCH = 2;`
     */
    public var deseControlScheduleFSCH: openfmb.evsemodule.DESEControlScheduleFSCH
      @kotlin.jvm.JvmName("getDeseControlScheduleFSCH")
        get() = _builder.deseControlScheduleFSCH
      @kotlin.jvm.JvmName("setDeseControlScheduleFSCH")
        set(value) {
        _builder.deseControlScheduleFSCH = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.DESEControlScheduleFSCH deseControlScheduleFSCH = 2;`
     */
    public fun clearDeseControlScheduleFSCH() {
      _builder.clearDeseControlScheduleFSCH()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.DESEControlScheduleFSCH deseControlScheduleFSCH = 2;`
     * @return Whether the deseControlScheduleFSCH field is set.
     */
    public fun hasDeseControlScheduleFSCH(): kotlin.Boolean {
      return _builder.hasDeseControlScheduleFSCH()
    }

    public val ControlDESEKt.Dsl.deseControlScheduleFSCHOrNull: openfmb.evsemodule.DESEControlScheduleFSCH?
      get() = _builder.deseControlScheduleFSCHOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.ControlDEAO controlDEAO = 3;`
     */
    public var controlDEAO: openfmb.evsemodule.ControlDEAO
      @kotlin.jvm.JvmName("getControlDEAO")
        get() = _builder.controlDEAO
      @kotlin.jvm.JvmName("setControlDEAO")
        set(value) {
        _builder.controlDEAO = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.ControlDEAO controlDEAO = 3;`
     */
    public fun clearControlDEAO() {
      _builder.clearControlDEAO()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.ControlDEAO controlDEAO = 3;`
     * @return Whether the controlDEAO field is set.
     */
    public fun hasControlDEAO(): kotlin.Boolean {
      return _builder.hasControlDEAO()
    }

    public val ControlDESEKt.Dsl.controlDEAOOrNull: openfmb.evsemodule.ControlDEAO?
      get() = _builder.controlDEAOOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.ControlDEDO controlDEEO = 4;`
     */
    public var controlDEEO: openfmb.evsemodule.ControlDEDO
      @kotlin.jvm.JvmName("getControlDEEO")
        get() = _builder.controlDEEO
      @kotlin.jvm.JvmName("setControlDEEO")
        set(value) {
        _builder.controlDEEO = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.ControlDEDO controlDEEO = 4;`
     */
    public fun clearControlDEEO() {
      _builder.clearControlDEEO()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.ControlDEDO controlDEEO = 4;`
     * @return Whether the controlDEEO field is set.
     */
    public fun hasControlDEEO(): kotlin.Boolean {
      return _builder.hasControlDEEO()
    }

    public val ControlDESEKt.Dsl.controlDEEOOrNull: openfmb.evsemodule.ControlDEDO?
      get() = _builder.controlDEEOOrNull

    /**
     * ```
     * maximum charging current that the charger can provide to the EV
     * ```
     *
     * `.google.protobuf.FloatValue ChaAMax = 5;`
     */
    public var chaAMax: com.google.protobuf.FloatValue
      @kotlin.jvm.JvmName("getChaAMax")
        get() = _builder.chaAMax
      @kotlin.jvm.JvmName("setChaAMax")
        set(value) {
        _builder.chaAMax = value
      }
    /**
     * ```
     * maximum charging current that the charger can provide to the EV
     * ```
     *
     * `.google.protobuf.FloatValue ChaAMax = 5;`
     */
    public fun clearChaAMax() {
      _builder.clearChaAMax()
    }
    /**
     * ```
     * maximum charging current that the charger can provide to the EV
     * ```
     *
     * `.google.protobuf.FloatValue ChaAMax = 5;`
     * @return Whether the chaAMax field is set.
     */
    public fun hasChaAMax(): kotlin.Boolean {
      return _builder.hasChaAMax()
    }

    public val ControlDESEKt.Dsl.chaAMaxOrNull: com.google.protobuf.FloatValue?
      get() = _builder.chaAMaxOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.evsemodule.ControlDESE.copy(block: `openfmb.evsemodule`.ControlDESEKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.ControlDESE =
  `openfmb.evsemodule`.ControlDESEKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.evsemodule.ControlDESEOrBuilder.controlFSCCOrNull: openfmb.commonmodule.ControlFSCC?
  get() = if (hasControlFSCC()) getControlFSCC() else null

public val openfmb.evsemodule.ControlDESEOrBuilder.deseControlScheduleFSCHOrNull: openfmb.evsemodule.DESEControlScheduleFSCH?
  get() = if (hasDeseControlScheduleFSCH()) getDeseControlScheduleFSCH() else null

public val openfmb.evsemodule.ControlDESEOrBuilder.controlDEAOOrNull: openfmb.evsemodule.ControlDEAO?
  get() = if (hasControlDEAO()) getControlDEAO() else null

public val openfmb.evsemodule.ControlDESEOrBuilder.controlDEEOOrNull: openfmb.evsemodule.ControlDEDO?
  get() = if (hasControlDEEO()) getControlDEEO() else null

public val openfmb.evsemodule.ControlDESEOrBuilder.chaAMaxOrNull: com.google.protobuf.FloatValue?
  get() = if (hasChaAMax()) getChaAMax() else null

