// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: reservemodule/reservemodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.reservemodule;

@kotlin.jvm.JvmName("-initializereserveMargin")
public inline fun reserveMargin(block: openfmb.reservemodule.ReserveMarginKt.Dsl.() -> kotlin.Unit): openfmb.reservemodule.ReserveMargin =
  openfmb.reservemodule.ReserveMarginKt.Dsl._create(openfmb.reservemodule.ReserveMargin.newBuilder()).apply { block() }._build()
/**
 * ```
 * [OpenFMB LN extension] Reserve margin in A, W, VAr and VA.
 * ```
 *
 * Protobuf type `reservemodule.ReserveMargin`
 */
public object ReserveMarginKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.reservemodule.ReserveMargin.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.reservemodule.ReserveMargin.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.reservemodule.ReserveMargin = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public var logicalNode: openfmb.commonmodule.LogicalNode
      @kotlin.jvm.JvmName("getLogicalNode")
        get() = _builder.logicalNode
      @kotlin.jvm.JvmName("setLogicalNode")
        set(value) {
        _builder.logicalNode = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearLogicalNode() {
      _builder.clearLogicalNode()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the logicalNode field is set.
     */
    public fun hasLogicalNode(): kotlin.Boolean {
      return _builder.hasLogicalNode()
    }

    public val ReserveMarginKt.Dsl.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
      get() = _builder.logicalNodeOrNull

    /**
     * ```
     * Phase to ground/phase to neutral three phase currents.
     * ```
     *
     * `.commonmodule.PMG A = 2;`
     */
    public var a: openfmb.commonmodule.PMG
      @kotlin.jvm.JvmName("getA")
        get() = _builder.a
      @kotlin.jvm.JvmName("setA")
        set(value) {
        _builder.a = value
      }
    /**
     * ```
     * Phase to ground/phase to neutral three phase currents.
     * ```
     *
     * `.commonmodule.PMG A = 2;`
     */
    public fun clearA() {
      _builder.clearA()
    }
    /**
     * ```
     * Phase to ground/phase to neutral three phase currents.
     * ```
     *
     * `.commonmodule.PMG A = 2;`
     * @return Whether the a field is set.
     */
    public fun hasA(): kotlin.Boolean {
      return _builder.hasA()
    }

    public val ReserveMarginKt.Dsl.aOrNull: openfmb.commonmodule.PMG?
      get() = _builder.aOrNull

    /**
     * ```
     * Phase to ground/phase to neutral apparent powers S.
     * ```
     *
     * `.commonmodule.PMG VA = 3;`
     */
    public var vA: openfmb.commonmodule.PMG
      @kotlin.jvm.JvmName("getVA")
        get() = _builder.va
      @kotlin.jvm.JvmName("setVA")
        set(value) {
        _builder.va = value
      }
    /**
     * ```
     * Phase to ground/phase to neutral apparent powers S.
     * ```
     *
     * `.commonmodule.PMG VA = 3;`
     */
    public fun clearVA() {
      _builder.clearVA()
    }
    /**
     * ```
     * Phase to ground/phase to neutral apparent powers S.
     * ```
     *
     * `.commonmodule.PMG VA = 3;`
     * @return Whether the vA field is set.
     */
    public fun hasVA(): kotlin.Boolean {
      return _builder.hasVA()
    }

    public val ReserveMarginKt.Dsl.vAOrNull: openfmb.commonmodule.PMG?
      get() = _builder.vAOrNull

    /**
     * ```
     * Phase to ground/phase to neutral reactive powers Q.
     * ```
     *
     * `.commonmodule.PMG VAr = 4;`
     */
    public var vAr: openfmb.commonmodule.PMG
      @kotlin.jvm.JvmName("getVAr")
        get() = _builder.vAr
      @kotlin.jvm.JvmName("setVAr")
        set(value) {
        _builder.vAr = value
      }
    /**
     * ```
     * Phase to ground/phase to neutral reactive powers Q.
     * ```
     *
     * `.commonmodule.PMG VAr = 4;`
     */
    public fun clearVAr() {
      _builder.clearVAr()
    }
    /**
     * ```
     * Phase to ground/phase to neutral reactive powers Q.
     * ```
     *
     * `.commonmodule.PMG VAr = 4;`
     * @return Whether the vAr field is set.
     */
    public fun hasVAr(): kotlin.Boolean {
      return _builder.hasVAr()
    }

    public val ReserveMarginKt.Dsl.vArOrNull: openfmb.commonmodule.PMG?
      get() = _builder.vArOrNull

    /**
     * ```
     * Phase to ground/phase to neutral real powers P.
     * ```
     *
     * `.commonmodule.PMG W = 5;`
     */
    public var w: openfmb.commonmodule.PMG
      @kotlin.jvm.JvmName("getW")
        get() = _builder.w
      @kotlin.jvm.JvmName("setW")
        set(value) {
        _builder.w = value
      }
    /**
     * ```
     * Phase to ground/phase to neutral real powers P.
     * ```
     *
     * `.commonmodule.PMG W = 5;`
     */
    public fun clearW() {
      _builder.clearW()
    }
    /**
     * ```
     * Phase to ground/phase to neutral real powers P.
     * ```
     *
     * `.commonmodule.PMG W = 5;`
     * @return Whether the w field is set.
     */
    public fun hasW(): kotlin.Boolean {
      return _builder.hasW()
    }

    public val ReserveMarginKt.Dsl.wOrNull: openfmb.commonmodule.PMG?
      get() = _builder.wOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.reservemodule.ReserveMargin.copy(block: `openfmb.reservemodule`.ReserveMarginKt.Dsl.() -> kotlin.Unit): openfmb.reservemodule.ReserveMargin =
  `openfmb.reservemodule`.ReserveMarginKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.reservemodule.ReserveMarginOrBuilder.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
  get() = if (hasLogicalNode()) getLogicalNode() else null

public val openfmb.reservemodule.ReserveMarginOrBuilder.aOrNull: openfmb.commonmodule.PMG?
  get() = if (hasA()) getA() else null

public val openfmb.reservemodule.ReserveMarginOrBuilder.vAOrNull: openfmb.commonmodule.PMG?
  get() = if (hasVA()) getVA() else null

public val openfmb.reservemodule.ReserveMarginOrBuilder.vArOrNull: openfmb.commonmodule.PMG?
  get() = if (hasVAr()) getVAr() else null

public val openfmb.reservemodule.ReserveMarginOrBuilder.wOrNull: openfmb.commonmodule.PMG?
  get() = if (hasW()) getW() else null

