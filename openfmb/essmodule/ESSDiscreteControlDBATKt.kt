// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: essmodule/essmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.essmodule;

@kotlin.jvm.JvmName("-initializeeSSDiscreteControlDBAT")
public inline fun eSSDiscreteControlDBAT(block: openfmb.essmodule.ESSDiscreteControlDBATKt.Dsl.() -> kotlin.Unit): openfmb.essmodule.ESSDiscreteControlDBAT =
  openfmb.essmodule.ESSDiscreteControlDBATKt.Dsl._create(openfmb.essmodule.ESSDiscreteControlDBAT.newBuilder()).apply { block() }._build()
/**
 * ```
 * OpenFMB specialization for cap bank discrete control:
 * ```
 *
 * Protobuf type `essmodule.ESSDiscreteControlDBAT`
 */
public object ESSDiscreteControlDBATKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.essmodule.ESSDiscreteControlDBAT.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.essmodule.ESSDiscreteControlDBAT.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.essmodule.ESSDiscreteControlDBAT = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];`
     */
    public var logicalNodeForControl: openfmb.commonmodule.LogicalNodeForControl
      @kotlin.jvm.JvmName("getLogicalNodeForControl")
        get() = _builder.logicalNodeForControl
      @kotlin.jvm.JvmName("setLogicalNodeForControl")
        set(value) {
        _builder.logicalNodeForControl = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearLogicalNodeForControl() {
      _builder.clearLogicalNodeForControl()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the logicalNodeForControl field is set.
     */
    public fun hasLogicalNodeForControl(): kotlin.Boolean {
      return _builder.hasLogicalNodeForControl()
    }

    public val ESSDiscreteControlDBATKt.Dsl.logicalNodeForControlOrNull: openfmb.commonmodule.LogicalNodeForControl?
      get() = _builder.logicalNodeForControlOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.essmodule.ESSPoint control = 2;`
     */
    public var control: openfmb.essmodule.ESSPoint
      @kotlin.jvm.JvmName("getControl")
        get() = _builder.control
      @kotlin.jvm.JvmName("setControl")
        set(value) {
        _builder.control = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.essmodule.ESSPoint control = 2;`
     */
    public fun clearControl() {
      _builder.clearControl()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.essmodule.ESSPoint control = 2;`
     * @return Whether the control field is set.
     */
    public fun hasControl(): kotlin.Boolean {
      return _builder.hasControl()
    }

    public val ESSDiscreteControlDBATKt.Dsl.controlOrNull: openfmb.essmodule.ESSPoint?
      get() = _builder.controlOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.essmodule.ESSDiscreteControlDBAT.copy(block: `openfmb.essmodule`.ESSDiscreteControlDBATKt.Dsl.() -> kotlin.Unit): openfmb.essmodule.ESSDiscreteControlDBAT =
  `openfmb.essmodule`.ESSDiscreteControlDBATKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.essmodule.ESSDiscreteControlDBATOrBuilder.logicalNodeForControlOrNull: openfmb.commonmodule.LogicalNodeForControl?
  get() = if (hasLogicalNodeForControl()) getLogicalNodeForControl() else null

public val openfmb.essmodule.ESSDiscreteControlDBATOrBuilder.controlOrNull: openfmb.essmodule.ESSPoint?
  get() = if (hasControl()) getControl() else null

