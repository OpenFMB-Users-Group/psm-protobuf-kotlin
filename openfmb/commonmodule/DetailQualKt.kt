// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializedetailQual")
public inline fun detailQual(block: openfmb.commonmodule.DetailQualKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.DetailQual =
  openfmb.commonmodule.DetailQualKt.Dsl._create(openfmb.commonmodule.DetailQual.newBuilder()).apply { block() }._build()
/**
 * ```
 * Describes some reasons in case 'validity' is not 'good'.
 * ```
 *
 * Protobuf type `commonmodule.DetailQual`
 */
public object DetailQualKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.DetailQual.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.DetailQual.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.DetailQual = _builder.build()

    /**
     * ```
     * (default=false) If true, the value may not be a correct value due to a reference being out of
     * calibration. The server shall decide if validity shall be set to invalid or questionable (used for
     * measurand information and binary counter information only).
     * ```
     *
     * `bool badReference = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var badReference: kotlin.Boolean
      @JvmName("getBadReference")
      get() = _builder.getBadReference()
      @JvmName("setBadReference")
      set(value) {
        _builder.setBadReference(value)
      }
    /**
     * ```
     * (default=false) If true, the value may not be a correct value due to a reference being out of
     * calibration. The server shall decide if validity shall be set to invalid or questionable (used for
     * measurand information and binary counter information only).
     * ```
     *
     * `bool badReference = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearBadReference() {
      _builder.clearBadReference()
    }

    /**
     * ```
     * (default=false) If true, a supervision function has detected an internal or external failure.
     * ```
     *
     * `bool failure = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var failure: kotlin.Boolean
      @JvmName("getFailure")
      get() = _builder.getFailure()
      @JvmName("setFailure")
      set(value) {
        _builder.setFailure(value)
      }
    /**
     * ```
     * (default=false) If true, a supervision function has detected an internal or external failure.
     * ```
     *
     * `bool failure = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearFailure() {
      _builder.clearFailure()
    }

    /**
     * ```
     * (default=false) If true, the value does not meet the stated accuracy of the source. EXAMPLE The
     * measured value of power factor may be noisy (inaccurate) when the current is very small.
     * ```
     *
     * `bool inaccurate = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var inaccurate: kotlin.Boolean
      @JvmName("getInaccurate")
      get() = _builder.getInaccurate()
      @JvmName("setInaccurate")
      set(value) {
        _builder.setInaccurate(value)
      }
    /**
     * ```
     * (default=false) If true, the value does not meet the stated accuracy of the source. EXAMPLE The
     * measured value of power factor may be noisy (inaccurate) when the current is very small.
     * ```
     *
     * `bool inaccurate = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearInaccurate() {
      _builder.clearInaccurate()
    }

    /**
     * ```
     * (default=false) If true, an evaluation function has detected an inconsistency.
     * ```
     *
     * `bool inconsistent = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var inconsistent: kotlin.Boolean
      @JvmName("getInconsistent")
      get() = _builder.getInconsistent()
      @JvmName("setInconsistent")
      set(value) {
        _builder.setInconsistent(value)
      }
    /**
     * ```
     * (default=false) If true, an evaluation function has detected an inconsistency.
     * ```
     *
     * `bool inconsistent = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearInconsistent() {
      _builder.clearInconsistent()
    }

    /**
     * ```
     * (default=false) If true, an update is not made during a specific time interval. The value may be
     * an old value that may have changed in the meantime. This specific time interval may be defined by an
     * allowed-age attribute. NOTE "Fail silent" errors, where the equipment stops sending data, will cause
     * setting this flag to true. In this case, the last received information was correct.
     * ```
     *
     * `bool oldData = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var oldData: kotlin.Boolean
      @JvmName("getOldData")
      get() = _builder.getOldData()
      @JvmName("setOldData")
      set(value) {
        _builder.setOldData(value)
      }
    /**
     * ```
     * (default=false) If true, an update is not made during a specific time interval. The value may be
     * an old value that may have changed in the meantime. This specific time interval may be defined by an
     * allowed-age attribute. NOTE "Fail silent" errors, where the equipment stops sending data, will cause
     * setting this flag to true. In this case, the last received information was correct.
     * ```
     *
     * `bool oldData = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearOldData() {
      _builder.clearOldData()
    }

    /**
     * ```
     * (default=false) To prevent overloading of event driven communication channels, it is desirable
     * to detect and suppress oscillating (fast changing) binary inputs. If a signal changes in a defined
     * time (tosc) twice in the same direction (from 0 to 1 or from 1 to 0), then it shall be defined as an
     * oscillation and this attribute shall be set to true. If a configured number of transient changes is
     * detected, they shall be suppressed. In this time, the 'Quality.validity' shall be set to
     * 'questionable'. If the signal is still in the oscillating state after the defined number of changes,
     * the value shall be left in the state it was in when this flag was set. In this case, the 'Quality
     * validity' shall be changed from 'questionable' to 'invalid' and kept so as long as the signal is
     * oscillating.  If the configuration is such that all transient changes should be suppressed, the
     * 'Quality.validity' shall be set immediately to 'invalid' and this flag to true (used for status
     * information only).
     * ```
     *
     * `bool oscillatory = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var oscillatory: kotlin.Boolean
      @JvmName("getOscillatory")
      get() = _builder.getOscillatory()
      @JvmName("setOscillatory")
      set(value) {
        _builder.setOscillatory(value)
      }
    /**
     * ```
     * (default=false) To prevent overloading of event driven communication channels, it is desirable
     * to detect and suppress oscillating (fast changing) binary inputs. If a signal changes in a defined
     * time (tosc) twice in the same direction (from 0 to 1 or from 1 to 0), then it shall be defined as an
     * oscillation and this attribute shall be set to true. If a configured number of transient changes is
     * detected, they shall be suppressed. In this time, the 'Quality.validity' shall be set to
     * 'questionable'. If the signal is still in the oscillating state after the defined number of changes,
     * the value shall be left in the state it was in when this flag was set. In this case, the 'Quality
     * validity' shall be changed from 'questionable' to 'invalid' and kept so as long as the signal is
     * oscillating.  If the configuration is such that all transient changes should be suppressed, the
     * 'Quality.validity' shall be set immediately to 'invalid' and this flag to true (used for status
     * information only).
     * ```
     *
     * `bool oscillatory = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearOscillatory() {
      _builder.clearOscillatory()
    }

    /**
     * ```
     * (default=false) If true, the attribute to which the quality has been associated is beyond a
     * predefined range of values. The server shall decide if validity shall be set to invalid or
     * questionable (used for measurand information only). EXAMPLE A measured value may exceed a predefined
     * range, however the selected data type can still represent the value, for example the data type is a
     * 16-bit unsigned integer, the predefined range is 0 to 40 000, if the value is between 40 001 and 65
     * 535 it is considered to be out of range.
     * ```
     *
     * `bool outOfRange = 7 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var outOfRange: kotlin.Boolean
      @JvmName("getOutOfRange")
      get() = _builder.getOutOfRange()
      @JvmName("setOutOfRange")
      set(value) {
        _builder.setOutOfRange(value)
      }
    /**
     * ```
     * (default=false) If true, the attribute to which the quality has been associated is beyond a
     * predefined range of values. The server shall decide if validity shall be set to invalid or
     * questionable (used for measurand information only). EXAMPLE A measured value may exceed a predefined
     * range, however the selected data type can still represent the value, for example the data type is a
     * 16-bit unsigned integer, the predefined range is 0 to 40 000, if the value is between 40 001 and 65
     * 535 it is considered to be out of range.
     * ```
     *
     * `bool outOfRange = 7 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearOutOfRange() {
      _builder.clearOutOfRange()
    }

    /**
     * ```
     * (default=false) If true, the value of the attribute to which the quality has been associated is
     * beyond the capability of being represented properly (used for measurand information only). EXAMPLE A
     * measured value may exceed the range that may be represented by the selected data type, for example
     * the data type is a 16-bit unsigned integer and the value exceeds 65 535.
     * ```
     *
     * `bool overflow = 8 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var overflow: kotlin.Boolean
      @JvmName("getOverflow")
      get() = _builder.getOverflow()
      @JvmName("setOverflow")
      set(value) {
        _builder.setOverflow(value)
      }
    /**
     * ```
     * (default=false) If true, the value of the attribute to which the quality has been associated is
     * beyond the capability of being represented properly (used for measurand information only). EXAMPLE A
     * measured value may exceed the range that may be represented by the selected data type, for example
     * the data type is a 16-bit unsigned integer and the value exceeds 65 535.
     * ```
     *
     * `bool overflow = 8 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearOverflow() {
      _builder.clearOverflow()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.DetailQual.copy(block: openfmb.commonmodule.DetailQualKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.DetailQual =
  openfmb.commonmodule.DetailQualKt.Dsl._create(this.toBuilder()).apply { block() }._build()

