// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializecontrolDPC")
public inline fun controlDPC(block: openfmb.commonmodule.ControlDPCKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ControlDPC =
  openfmb.commonmodule.ControlDPCKt.Dsl._create(openfmb.commonmodule.ControlDPC.newBuilder()).apply { block() }._build()
/**
 * ```
 * Specialized DPC 61850 CDC class  Because objects in OpenFMB are optional fields, OpenFMB has
 * elected to send a "True" or "False" control state when a DPC state is sent. In a poll-based system,
 * the DPC will have two Booleans for "close" and "open", allowing a 'no-op' state if neither are true,
 * and a winning state (usually open) if both are true. OpenFMB simply elects to not populate the
 * control when no op is required. All state being sent will either be commanding a close or open for
 * the PhaseDPS &amp; StatusDPS.
 * ```
 *
 * Protobuf type `commonmodule.ControlDPC`
 */
public object ControlDPCKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.ControlDPC.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.ControlDPC.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.ControlDPC = _builder.build()

    /**
     * ```
     * Service parameter that determines the control activity ('false' for off, 'true' for on).
     * ```
     *
     * `bool ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var ctlVal: kotlin.Boolean
      @kotlin.jvm.JvmName("getCtlVal")
        get() = _builder.ctlVal
      @kotlin.jvm.JvmName("setCtlVal")
        set(value) {
        _builder.ctlVal = value
      }
    /**
     * ```
     * Service parameter that determines the control activity ('false' for off, 'true' for on).
     * ```
     *
     * `bool ctlVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearCtlVal() {
      _builder.clearCtlVal()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.ControlDPC.copy(block: `openfmb.commonmodule`.ControlDPCKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ControlDPC =
  `openfmb.commonmodule`.ControlDPCKt.Dsl._create(this.toBuilder()).apply { block() }._build()

