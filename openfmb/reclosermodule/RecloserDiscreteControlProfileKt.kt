// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: reclosermodule/reclosermodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.reclosermodule;

@kotlin.jvm.JvmName("-initializerecloserDiscreteControlProfile")
public inline fun recloserDiscreteControlProfile(block: openfmb.reclosermodule.RecloserDiscreteControlProfileKt.Dsl.() -> kotlin.Unit): openfmb.reclosermodule.RecloserDiscreteControlProfile =
  openfmb.reclosermodule.RecloserDiscreteControlProfileKt.Dsl._create(openfmb.reclosermodule.RecloserDiscreteControlProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Recloser control profile.  Instructs an end device (or an end device group) to perform a
 * specified action.
 * ```
 *
 * Protobuf type `reclosermodule.RecloserDiscreteControlProfile`
 */
public object RecloserDiscreteControlProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.reclosermodule.RecloserDiscreteControlProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.reclosermodule.RecloserDiscreteControlProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.reclosermodule.RecloserDiscreteControlProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var controlMessageInfo: openfmb.commonmodule.ControlMessageInfo
      @kotlin.jvm.JvmName("getControlMessageInfo")
        get() = _builder.controlMessageInfo
      @kotlin.jvm.JvmName("setControlMessageInfo")
        set(value) {
        _builder.controlMessageInfo = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearControlMessageInfo() {
      _builder.clearControlMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the controlMessageInfo field is set.
     */
    public fun hasControlMessageInfo(): kotlin.Boolean {
      return _builder.hasControlMessageInfo()
    }

    public val RecloserDiscreteControlProfileKt.Dsl.controlMessageInfoOrNull: openfmb.commonmodule.ControlMessageInfo?
      get() = _builder.controlMessageInfoOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.reclosermodule.Recloser recloser = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var recloser: openfmb.reclosermodule.Recloser
      @kotlin.jvm.JvmName("getRecloser")
        get() = _builder.recloser
      @kotlin.jvm.JvmName("setRecloser")
        set(value) {
        _builder.recloser = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.reclosermodule.Recloser recloser = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearRecloser() {
      _builder.clearRecloser()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.reclosermodule.Recloser recloser = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the recloser field is set.
     */
    public fun hasRecloser(): kotlin.Boolean {
      return _builder.hasRecloser()
    }

    public val RecloserDiscreteControlProfileKt.Dsl.recloserOrNull: openfmb.reclosermodule.Recloser?
      get() = _builder.recloserOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.reclosermodule.RecloserDiscreteControl recloserDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var recloserDiscreteControl: openfmb.reclosermodule.RecloserDiscreteControl
      @kotlin.jvm.JvmName("getRecloserDiscreteControl")
        get() = _builder.recloserDiscreteControl
      @kotlin.jvm.JvmName("setRecloserDiscreteControl")
        set(value) {
        _builder.recloserDiscreteControl = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.reclosermodule.RecloserDiscreteControl recloserDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearRecloserDiscreteControl() {
      _builder.clearRecloserDiscreteControl()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.reclosermodule.RecloserDiscreteControl recloserDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the recloserDiscreteControl field is set.
     */
    public fun hasRecloserDiscreteControl(): kotlin.Boolean {
      return _builder.hasRecloserDiscreteControl()
    }

    public val RecloserDiscreteControlProfileKt.Dsl.recloserDiscreteControlOrNull: openfmb.reclosermodule.RecloserDiscreteControl?
      get() = _builder.recloserDiscreteControlOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.reclosermodule.RecloserDiscreteControlProfile.copy(block: `openfmb.reclosermodule`.RecloserDiscreteControlProfileKt.Dsl.() -> kotlin.Unit): openfmb.reclosermodule.RecloserDiscreteControlProfile =
  `openfmb.reclosermodule`.RecloserDiscreteControlProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.reclosermodule.RecloserDiscreteControlProfileOrBuilder.controlMessageInfoOrNull: openfmb.commonmodule.ControlMessageInfo?
  get() = if (hasControlMessageInfo()) getControlMessageInfo() else null

public val openfmb.reclosermodule.RecloserDiscreteControlProfileOrBuilder.recloserOrNull: openfmb.reclosermodule.Recloser?
  get() = if (hasRecloser()) getRecloser() else null

public val openfmb.reclosermodule.RecloserDiscreteControlProfileOrBuilder.recloserDiscreteControlOrNull: openfmb.reclosermodule.RecloserDiscreteControl?
  get() = if (hasRecloserDiscreteControl()) getRecloserDiscreteControl() else null

