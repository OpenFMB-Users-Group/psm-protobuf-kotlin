// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializesOCManagement")
public inline fun sOCManagement(block: openfmb.commonmodule.SOCManagementKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.SOCManagement =
  openfmb.commonmodule.SOCManagementKt.Dsl._create(openfmb.commonmodule.SOCManagement.newBuilder()).apply { block() }._build()
/**
 * ```
 * ESS inverter high level function to maintain SOC within dead bands
 * ```
 *
 * Protobuf type `commonmodule.SOCManagement`
 */
public object SOCManagementKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.SOCManagement.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.SOCManagement.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.SOCManagement = _builder.build()

    /**
     * ```
     * uint/1%  Define a dead band (DB) around the SOC set point. When the battery SOC goes outside the
     * dead band, the SOC management executes and bring the SOC back to the set point. Upper DB = set point
     * + dead band plus Lower DB = set point – dead band minus
     * ```
     *
     * `.google.protobuf.FloatValue socDeadBandMinus = 1;`
     */
    public var socDeadBandMinus: com.google.protobuf.FloatValue
      @kotlin.jvm.JvmName("getSocDeadBandMinus")
        get() = _builder.socDeadBandMinus
      @kotlin.jvm.JvmName("setSocDeadBandMinus")
        set(value) {
        _builder.socDeadBandMinus = value
      }
    /**
     * ```
     * uint/1%  Define a dead band (DB) around the SOC set point. When the battery SOC goes outside the
     * dead band, the SOC management executes and bring the SOC back to the set point. Upper DB = set point
     * + dead band plus Lower DB = set point – dead band minus
     * ```
     *
     * `.google.protobuf.FloatValue socDeadBandMinus = 1;`
     */
    public fun clearSocDeadBandMinus() {
      _builder.clearSocDeadBandMinus()
    }
    /**
     * ```
     * uint/1%  Define a dead band (DB) around the SOC set point. When the battery SOC goes outside the
     * dead band, the SOC management executes and bring the SOC back to the set point. Upper DB = set point
     * + dead band plus Lower DB = set point – dead band minus
     * ```
     *
     * `.google.protobuf.FloatValue socDeadBandMinus = 1;`
     * @return Whether the socDeadBandMinus field is set.
     */
    public fun hasSocDeadBandMinus(): kotlin.Boolean {
      return _builder.hasSocDeadBandMinus()
    }

    public val SOCManagementKt.Dsl.socDeadBandMinusOrNull: com.google.protobuf.FloatValue?
      get() = _builder.socDeadBandMinusOrNull

    /**
     * ```
     * uint/1%  Define a dead band (DB) around the SOC set point. When the battery SOC goes outside the
     * dead band, the SOC management executes and bring the SOC back to the set point. Upper DB = set point
     * + dead band plus Lower DB = set point – dead band minus
     * ```
     *
     * `.google.protobuf.FloatValue socDeadBandPlus = 2;`
     */
    public var socDeadBandPlus: com.google.protobuf.FloatValue
      @kotlin.jvm.JvmName("getSocDeadBandPlus")
        get() = _builder.socDeadBandPlus
      @kotlin.jvm.JvmName("setSocDeadBandPlus")
        set(value) {
        _builder.socDeadBandPlus = value
      }
    /**
     * ```
     * uint/1%  Define a dead band (DB) around the SOC set point. When the battery SOC goes outside the
     * dead band, the SOC management executes and bring the SOC back to the set point. Upper DB = set point
     * + dead band plus Lower DB = set point – dead band minus
     * ```
     *
     * `.google.protobuf.FloatValue socDeadBandPlus = 2;`
     */
    public fun clearSocDeadBandPlus() {
      _builder.clearSocDeadBandPlus()
    }
    /**
     * ```
     * uint/1%  Define a dead band (DB) around the SOC set point. When the battery SOC goes outside the
     * dead band, the SOC management executes and bring the SOC back to the set point. Upper DB = set point
     * + dead band plus Lower DB = set point – dead band minus
     * ```
     *
     * `.google.protobuf.FloatValue socDeadBandPlus = 2;`
     * @return Whether the socDeadBandPlus field is set.
     */
    public fun hasSocDeadBandPlus(): kotlin.Boolean {
      return _builder.hasSocDeadBandPlus()
    }

    public val SOCManagementKt.Dsl.socDeadBandPlusOrNull: com.google.protobuf.FloatValue?
      get() = _builder.socDeadBandPlusOrNull

    /**
     * ```
     * Control value (TRUE or FALSE)
     * ```
     *
     * `.google.protobuf.BoolValue socManagementCtl = 3;`
     */
    public var socManagementCtl: com.google.protobuf.BoolValue
      @kotlin.jvm.JvmName("getSocManagementCtl")
        get() = _builder.socManagementCtl
      @kotlin.jvm.JvmName("setSocManagementCtl")
        set(value) {
        _builder.socManagementCtl = value
      }
    /**
     * ```
     * Control value (TRUE or FALSE)
     * ```
     *
     * `.google.protobuf.BoolValue socManagementCtl = 3;`
     */
    public fun clearSocManagementCtl() {
      _builder.clearSocManagementCtl()
    }
    /**
     * ```
     * Control value (TRUE or FALSE)
     * ```
     *
     * `.google.protobuf.BoolValue socManagementCtl = 3;`
     * @return Whether the socManagementCtl field is set.
     */
    public fun hasSocManagementCtl(): kotlin.Boolean {
      return _builder.hasSocManagementCtl()
    }

    public val SOCManagementKt.Dsl.socManagementCtlOrNull: com.google.protobuf.BoolValue?
      get() = _builder.socManagementCtlOrNull

    /**
     * ```
     * uint/1kW  Set point used for SOC maintenance
     * ```
     *
     * `.google.protobuf.FloatValue socPowerSetPoint = 4;`
     */
    public var socPowerSetPoint: com.google.protobuf.FloatValue
      @kotlin.jvm.JvmName("getSocPowerSetPoint")
        get() = _builder.socPowerSetPoint
      @kotlin.jvm.JvmName("setSocPowerSetPoint")
        set(value) {
        _builder.socPowerSetPoint = value
      }
    /**
     * ```
     * uint/1kW  Set point used for SOC maintenance
     * ```
     *
     * `.google.protobuf.FloatValue socPowerSetPoint = 4;`
     */
    public fun clearSocPowerSetPoint() {
      _builder.clearSocPowerSetPoint()
    }
    /**
     * ```
     * uint/1kW  Set point used for SOC maintenance
     * ```
     *
     * `.google.protobuf.FloatValue socPowerSetPoint = 4;`
     * @return Whether the socPowerSetPoint field is set.
     */
    public fun hasSocPowerSetPoint(): kotlin.Boolean {
      return _builder.hasSocPowerSetPoint()
    }

    public val SOCManagementKt.Dsl.socPowerSetPointOrNull: com.google.protobuf.FloatValue?
      get() = _builder.socPowerSetPointOrNull

    /**
     * ```
     * uint/1%  SOC Target in percentage (%).
     * ```
     *
     * `.google.protobuf.FloatValue socSetPoint = 5;`
     */
    public var socSetPoint: com.google.protobuf.FloatValue
      @kotlin.jvm.JvmName("getSocSetPoint")
        get() = _builder.socSetPoint
      @kotlin.jvm.JvmName("setSocSetPoint")
        set(value) {
        _builder.socSetPoint = value
      }
    /**
     * ```
     * uint/1%  SOC Target in percentage (%).
     * ```
     *
     * `.google.protobuf.FloatValue socSetPoint = 5;`
     */
    public fun clearSocSetPoint() {
      _builder.clearSocSetPoint()
    }
    /**
     * ```
     * uint/1%  SOC Target in percentage (%).
     * ```
     *
     * `.google.protobuf.FloatValue socSetPoint = 5;`
     * @return Whether the socSetPoint field is set.
     */
    public fun hasSocSetPoint(): kotlin.Boolean {
      return _builder.hasSocSetPoint()
    }

    public val SOCManagementKt.Dsl.socSetPointOrNull: com.google.protobuf.FloatValue?
      get() = _builder.socSetPointOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.SOCManagement.copy(block: `openfmb.commonmodule`.SOCManagementKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.SOCManagement =
  `openfmb.commonmodule`.SOCManagementKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.SOCManagementOrBuilder.socDeadBandMinusOrNull: com.google.protobuf.FloatValue?
  get() = if (hasSocDeadBandMinus()) getSocDeadBandMinus() else null

public val openfmb.commonmodule.SOCManagementOrBuilder.socDeadBandPlusOrNull: com.google.protobuf.FloatValue?
  get() = if (hasSocDeadBandPlus()) getSocDeadBandPlus() else null

public val openfmb.commonmodule.SOCManagementOrBuilder.socManagementCtlOrNull: com.google.protobuf.BoolValue?
  get() = if (hasSocManagementCtl()) getSocManagementCtl() else null

public val openfmb.commonmodule.SOCManagementOrBuilder.socPowerSetPointOrNull: com.google.protobuf.FloatValue?
  get() = if (hasSocPowerSetPoint()) getSocPowerSetPoint() else null

public val openfmb.commonmodule.SOCManagementOrBuilder.socSetPointOrNull: com.google.protobuf.FloatValue?
  get() = if (hasSocSetPoint()) getSocSetPoint() else null

