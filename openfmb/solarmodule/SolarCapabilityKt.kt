// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: solarmodule/solarmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.solarmodule;

@kotlin.jvm.JvmName("-initializesolarCapability")
public inline fun solarCapability(block: openfmb.solarmodule.SolarCapabilityKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarCapability =
  openfmb.solarmodule.SolarCapabilityKt.Dsl._create(openfmb.solarmodule.SolarCapability.newBuilder()).apply { block() }._build()
/**
 * ```
 * Generation capability
 * ```
 *
 * Protobuf type `solarmodule.SolarCapability`
 */
public object SolarCapabilityKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.solarmodule.SolarCapability.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.solarmodule.SolarCapability.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.solarmodule.SolarCapability = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.NameplateValue nameplateValue = 1 [(.uml.option_parent_message) = true];`
     */
    public var nameplateValue: openfmb.commonmodule.NameplateValue
      @kotlin.jvm.JvmName("getNameplateValue")
        get() = _builder.nameplateValue
      @kotlin.jvm.JvmName("setNameplateValue")
        set(value) {
        _builder.nameplateValue = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.NameplateValue nameplateValue = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearNameplateValue() {
      _builder.clearNameplateValue()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.NameplateValue nameplateValue = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the nameplateValue field is set.
     */
    public fun hasNameplateValue(): kotlin.Boolean {
      return _builder.hasNameplateValue()
    }

    public val SolarCapabilityKt.Dsl.nameplateValueOrNull: openfmb.commonmodule.NameplateValue?
      get() = _builder.nameplateValueOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarCapabilityConfiguration solarCapabilityConfiguration = 2;`
     */
    public var solarCapabilityConfiguration: openfmb.solarmodule.SolarCapabilityConfiguration
      @kotlin.jvm.JvmName("getSolarCapabilityConfiguration")
        get() = _builder.solarCapabilityConfiguration
      @kotlin.jvm.JvmName("setSolarCapabilityConfiguration")
        set(value) {
        _builder.solarCapabilityConfiguration = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarCapabilityConfiguration solarCapabilityConfiguration = 2;`
     */
    public fun clearSolarCapabilityConfiguration() {
      _builder.clearSolarCapabilityConfiguration()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarCapabilityConfiguration solarCapabilityConfiguration = 2;`
     * @return Whether the solarCapabilityConfiguration field is set.
     */
    public fun hasSolarCapabilityConfiguration(): kotlin.Boolean {
      return _builder.hasSolarCapabilityConfiguration()
    }

    public val SolarCapabilityKt.Dsl.solarCapabilityConfigurationOrNull: openfmb.solarmodule.SolarCapabilityConfiguration?
      get() = _builder.solarCapabilityConfigurationOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarCapabilityRatings solarCapabilityRatings = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var solarCapabilityRatings: openfmb.solarmodule.SolarCapabilityRatings
      @kotlin.jvm.JvmName("getSolarCapabilityRatings")
        get() = _builder.solarCapabilityRatings
      @kotlin.jvm.JvmName("setSolarCapabilityRatings")
        set(value) {
        _builder.solarCapabilityRatings = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarCapabilityRatings solarCapabilityRatings = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearSolarCapabilityRatings() {
      _builder.clearSolarCapabilityRatings()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarCapabilityRatings solarCapabilityRatings = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the solarCapabilityRatings field is set.
     */
    public fun hasSolarCapabilityRatings(): kotlin.Boolean {
      return _builder.hasSolarCapabilityRatings()
    }

    public val SolarCapabilityKt.Dsl.solarCapabilityRatingsOrNull: openfmb.solarmodule.SolarCapabilityRatings?
      get() = _builder.solarCapabilityRatingsOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.solarmodule.SolarCapability.copy(block: `openfmb.solarmodule`.SolarCapabilityKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarCapability =
  `openfmb.solarmodule`.SolarCapabilityKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.solarmodule.SolarCapabilityOrBuilder.nameplateValueOrNull: openfmb.commonmodule.NameplateValue?
  get() = if (hasNameplateValue()) getNameplateValue() else null

public val openfmb.solarmodule.SolarCapabilityOrBuilder.solarCapabilityConfigurationOrNull: openfmb.solarmodule.SolarCapabilityConfiguration?
  get() = if (hasSolarCapabilityConfiguration()) getSolarCapabilityConfiguration() else null

public val openfmb.solarmodule.SolarCapabilityOrBuilder.solarCapabilityRatingsOrNull: openfmb.solarmodule.SolarCapabilityRatings?
  get() = if (hasSolarCapabilityRatings()) getSolarCapabilityRatings() else null

