//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: loadmodule/loadmodule.proto

package openfmb.loadmodule;

@kotlin.jvm.JvmName("-initializeloadReadingProfile")
public inline fun loadReadingProfile(block: openfmb.loadmodule.LoadReadingProfileKt.Dsl.() -> kotlin.Unit): openfmb.loadmodule.LoadReadingProfile =
  openfmb.loadmodule.LoadReadingProfileKt.Dsl._create(openfmb.loadmodule.LoadReadingProfile.newBuilder()).apply { block() }._build()
public object LoadReadingProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.loadmodule.LoadReadingProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.loadmodule.LoadReadingProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.loadmodule.LoadReadingProfile = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var readingMessageInfo: openfmb.commonmodule.ReadingMessageInfo
      @JvmName("getReadingMessageInfo")
      get() = _builder.getReadingMessageInfo()
      @JvmName("setReadingMessageInfo")
      set(value) {
        _builder.setReadingMessageInfo(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearReadingMessageInfo() {
      _builder.clearReadingMessageInfo()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the readingMessageInfo field is set.
     */
    public fun hasReadingMessageInfo(): kotlin.Boolean {
      return _builder.hasReadingMessageInfo()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.EnergyConsumer energyConsumer = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var energyConsumer: openfmb.commonmodule.EnergyConsumer
      @JvmName("getEnergyConsumer")
      get() = _builder.getEnergyConsumer()
      @JvmName("setEnergyConsumer")
      set(value) {
        _builder.setEnergyConsumer(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.EnergyConsumer energyConsumer = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearEnergyConsumer() {
      _builder.clearEnergyConsumer()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.EnergyConsumer energyConsumer = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @return Whether the energyConsumer field is set.
     */
    public fun hasEnergyConsumer(): kotlin.Boolean {
      return _builder.hasEnergyConsumer()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.loadmodule.LoadReading loadReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var loadReading: openfmb.loadmodule.LoadReading
      @JvmName("getLoadReading")
      get() = _builder.getLoadReading()
      @JvmName("setLoadReading")
      set(value) {
        _builder.setLoadReading(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.loadmodule.LoadReading loadReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearLoadReading() {
      _builder.clearLoadReading()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.loadmodule.LoadReading loadReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @return Whether the loadReading field is set.
     */
    public fun hasLoadReading(): kotlin.Boolean {
      return _builder.hasLoadReading()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.loadmodule.LoadReadingProfile.copy(block: openfmb.loadmodule.LoadReadingProfileKt.Dsl.() -> kotlin.Unit): openfmb.loadmodule.LoadReadingProfile =
  openfmb.loadmodule.LoadReadingProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.loadmodule.LoadReadingProfileOrBuilder.readingMessageInfoOrNull: openfmb.commonmodule.ReadingMessageInfo?
  get() = if (hasReadingMessageInfo()) getReadingMessageInfo() else null

public val openfmb.loadmodule.LoadReadingProfileOrBuilder.energyConsumerOrNull: openfmb.commonmodule.EnergyConsumer?
  get() = if (hasEnergyConsumer()) getEnergyConsumer() else null

public val openfmb.loadmodule.LoadReadingProfileOrBuilder.loadReadingOrNull: openfmb.loadmodule.LoadReading?
  get() = if (hasLoadReading()) getLoadReading() else null

