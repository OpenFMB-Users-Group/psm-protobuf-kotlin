// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializehzWAPC")
public inline fun hzWAPC(block: openfmb.commonmodule.HzWAPCKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.HzWAPC =
  openfmb.commonmodule.HzWAPCKt.Dsl._create(openfmb.commonmodule.HzWAPC.newBuilder()).apply { block() }._build()
/**
 * ```
 * Frequency Droop Function
 * ```
 *
 * Protobuf type `commonmodule.HzWAPC`
 */
public object HzWAPCKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.HzWAPC.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.HzWAPC.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.HzWAPC = _builder.build()

    /**
     * ```
     * Overfrequency Droop <i>db</i>OF  The frequency which must be higher than the reference frequency
     * at which to start reducing power output.
     * ```
     *
     * `.commonmodule.HzWPoint overHzWPt = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var overHzWPt: openfmb.commonmodule.HzWPoint
      @kotlin.jvm.JvmName("getOverHzWPt")
        get() = _builder.overHzWPt
      @kotlin.jvm.JvmName("setOverHzWPt")
        set(value) {
        _builder.overHzWPt = value
      }
    /**
     * ```
     * Overfrequency Droop <i>db</i>OF  The frequency which must be higher than the reference frequency
     * at which to start reducing power output.
     * ```
     *
     * `.commonmodule.HzWPoint overHzWPt = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearOverHzWPt() {
      _builder.clearOverHzWPt()
    }
    /**
     * ```
     * Overfrequency Droop <i>db</i>OF  The frequency which must be higher than the reference frequency
     * at which to start reducing power output.
     * ```
     *
     * `.commonmodule.HzWPoint overHzWPt = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the overHzWPt field is set.
     */
    public fun hasOverHzWPt(): kotlin.Boolean {
      return _builder.hasOverHzWPt()
    }

    public val HzWAPCKt.Dsl.overHzWPtOrNull: openfmb.commonmodule.HzWPoint?
      get() = _builder.overHzWPtOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.OperationDHFW overHzWParameter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var overHzWParameter: openfmb.commonmodule.OperationDHFW
      @kotlin.jvm.JvmName("getOverHzWParameter")
        get() = _builder.overHzWParameter
      @kotlin.jvm.JvmName("setOverHzWParameter")
        set(value) {
        _builder.overHzWParameter = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.OperationDHFW overHzWParameter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearOverHzWParameter() {
      _builder.clearOverHzWParameter()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.OperationDHFW overHzWParameter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the overHzWParameter field is set.
     */
    public fun hasOverHzWParameter(): kotlin.Boolean {
      return _builder.hasOverHzWParameter()
    }

    public val HzWAPCKt.Dsl.overHzWParameterOrNull: openfmb.commonmodule.OperationDHFW?
      get() = _builder.overHzWParameterOrNull

    /**
     * ```
     * Underfrequency Droop <i>db</i>UF  The frequency which must be lower than the reference frequency
     * at which to start increasing power output.
     * ```
     *
     * `.commonmodule.HzWPoint underHzWPt = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var underHzWPt: openfmb.commonmodule.HzWPoint
      @kotlin.jvm.JvmName("getUnderHzWPt")
        get() = _builder.underHzWPt
      @kotlin.jvm.JvmName("setUnderHzWPt")
        set(value) {
        _builder.underHzWPt = value
      }
    /**
     * ```
     * Underfrequency Droop <i>db</i>UF  The frequency which must be lower than the reference frequency
     * at which to start increasing power output.
     * ```
     *
     * `.commonmodule.HzWPoint underHzWPt = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearUnderHzWPt() {
      _builder.clearUnderHzWPt()
    }
    /**
     * ```
     * Underfrequency Droop <i>db</i>UF  The frequency which must be lower than the reference frequency
     * at which to start increasing power output.
     * ```
     *
     * `.commonmodule.HzWPoint underHzWPt = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the underHzWPt field is set.
     */
    public fun hasUnderHzWPt(): kotlin.Boolean {
      return _builder.hasUnderHzWPt()
    }

    public val HzWAPCKt.Dsl.underHzWPtOrNull: openfmb.commonmodule.HzWPoint?
      get() = _builder.underHzWPtOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.OperationDLFW underHzWParameter = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var underHzWParameter: openfmb.commonmodule.OperationDLFW
      @kotlin.jvm.JvmName("getUnderHzWParameter")
        get() = _builder.underHzWParameter
      @kotlin.jvm.JvmName("setUnderHzWParameter")
        set(value) {
        _builder.underHzWParameter = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.OperationDLFW underHzWParameter = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearUnderHzWParameter() {
      _builder.clearUnderHzWParameter()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.OperationDLFW underHzWParameter = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the underHzWParameter field is set.
     */
    public fun hasUnderHzWParameter(): kotlin.Boolean {
      return _builder.hasUnderHzWParameter()
    }

    public val HzWAPCKt.Dsl.underHzWParameterOrNull: openfmb.commonmodule.OperationDLFW?
      get() = _builder.underHzWParameterOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.HzWAPC.copy(block: `openfmb.commonmodule`.HzWAPCKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.HzWAPC =
  `openfmb.commonmodule`.HzWAPCKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.HzWAPCOrBuilder.overHzWPtOrNull: openfmb.commonmodule.HzWPoint?
  get() = if (hasOverHzWPt()) getOverHzWPt() else null

public val openfmb.commonmodule.HzWAPCOrBuilder.overHzWParameterOrNull: openfmb.commonmodule.OperationDHFW?
  get() = if (hasOverHzWParameter()) getOverHzWParameter() else null

public val openfmb.commonmodule.HzWAPCOrBuilder.underHzWPtOrNull: openfmb.commonmodule.HzWPoint?
  get() = if (hasUnderHzWPt()) getUnderHzWPt() else null

public val openfmb.commonmodule.HzWAPCOrBuilder.underHzWParameterOrNull: openfmb.commonmodule.OperationDLFW?
  get() = if (hasUnderHzWParameter()) getUnderHzWParameter() else null

