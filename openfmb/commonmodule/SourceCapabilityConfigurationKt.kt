// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializesourceCapabilityConfiguration")
public inline fun sourceCapabilityConfiguration(block: openfmb.commonmodule.SourceCapabilityConfigurationKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.SourceCapabilityConfiguration =
  openfmb.commonmodule.SourceCapabilityConfigurationKt.Dsl._create(openfmb.commonmodule.SourceCapabilityConfiguration.newBuilder()).apply { block() }._build()
/**
 * ```
 * Source configured setting
 * ```
 *
 * Protobuf type `commonmodule.SourceCapabilityConfiguration`
 */
public object SourceCapabilityConfigurationKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.SourceCapabilityConfiguration.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.SourceCapabilityConfiguration.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.SourceCapabilityConfiguration = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public var logicalNode: openfmb.commonmodule.LogicalNode
      @kotlin.jvm.JvmName("getLogicalNode")
        get() = _builder.logicalNode
      @kotlin.jvm.JvmName("setLogicalNode")
        set(value) {
        _builder.logicalNode = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearLogicalNode() {
      _builder.clearLogicalNode()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the logicalNode field is set.
     */
    public fun hasLogicalNode(): kotlin.Boolean {
      return _builder.hasLogicalNode()
    }

    public val SourceCapabilityConfigurationKt.Dsl.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
      get() = _builder.logicalNodeOrNull

    /**
     * ```
     * Amp Maximum configured value
     * ```
     *
     * `.commonmodule.ASG AMax = 2;`
     */
    public var aMax: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getAMax")
        get() = _builder.aMax
      @kotlin.jvm.JvmName("setAMax")
        set(value) {
        _builder.aMax = value
      }
    /**
     * ```
     * Amp Maximum configured value
     * ```
     *
     * `.commonmodule.ASG AMax = 2;`
     */
    public fun clearAMax() {
      _builder.clearAMax()
    }
    /**
     * ```
     * Amp Maximum configured value
     * ```
     *
     * `.commonmodule.ASG AMax = 2;`
     * @return Whether the aMax field is set.
     */
    public fun hasAMax(): kotlin.Boolean {
      return _builder.hasAMax()
    }

    public val SourceCapabilityConfigurationKt.Dsl.aMaxOrNull: openfmb.commonmodule.ASG?
      get() = _builder.aMaxOrNull

    /**
     * ```
     * Apparent Power Maximum configured value
     * ```
     *
     * `.commonmodule.ASG VAMax = 3;`
     */
    public var vAMax: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getVAMax")
        get() = _builder.vaMax
      @kotlin.jvm.JvmName("setVAMax")
        set(value) {
        _builder.vaMax = value
      }
    /**
     * ```
     * Apparent Power Maximum configured value
     * ```
     *
     * `.commonmodule.ASG VAMax = 3;`
     */
    public fun clearVAMax() {
      _builder.clearVAMax()
    }
    /**
     * ```
     * Apparent Power Maximum configured value
     * ```
     *
     * `.commonmodule.ASG VAMax = 3;`
     * @return Whether the vAMax field is set.
     */
    public fun hasVAMax(): kotlin.Boolean {
      return _builder.hasVAMax()
    }

    public val SourceCapabilityConfigurationKt.Dsl.vAMaxOrNull: openfmb.commonmodule.ASG?
      get() = _builder.vAMaxOrNull

    /**
     * ```
     * Reactive Power Absorbed Maximum configured value
     * ```
     *
     * `.commonmodule.ASG VarMaxAbs = 4;`
     */
    public var varMaxAbs: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getVarMaxAbs")
        get() = _builder.varMaxAbs
      @kotlin.jvm.JvmName("setVarMaxAbs")
        set(value) {
        _builder.varMaxAbs = value
      }
    /**
     * ```
     * Reactive Power Absorbed Maximum configured value
     * ```
     *
     * `.commonmodule.ASG VarMaxAbs = 4;`
     */
    public fun clearVarMaxAbs() {
      _builder.clearVarMaxAbs()
    }
    /**
     * ```
     * Reactive Power Absorbed Maximum configured value
     * ```
     *
     * `.commonmodule.ASG VarMaxAbs = 4;`
     * @return Whether the varMaxAbs field is set.
     */
    public fun hasVarMaxAbs(): kotlin.Boolean {
      return _builder.hasVarMaxAbs()
    }

    public val SourceCapabilityConfigurationKt.Dsl.varMaxAbsOrNull: openfmb.commonmodule.ASG?
      get() = _builder.varMaxAbsOrNull

    /**
     * ```
     * Reactive Power Injected Maximum configured value
     * ```
     *
     * `.commonmodule.ASG VarMaxInj = 5;`
     */
    public var varMaxInj: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getVarMaxInj")
        get() = _builder.varMaxInj
      @kotlin.jvm.JvmName("setVarMaxInj")
        set(value) {
        _builder.varMaxInj = value
      }
    /**
     * ```
     * Reactive Power Injected Maximum configured value
     * ```
     *
     * `.commonmodule.ASG VarMaxInj = 5;`
     */
    public fun clearVarMaxInj() {
      _builder.clearVarMaxInj()
    }
    /**
     * ```
     * Reactive Power Injected Maximum configured value
     * ```
     *
     * `.commonmodule.ASG VarMaxInj = 5;`
     * @return Whether the varMaxInj field is set.
     */
    public fun hasVarMaxInj(): kotlin.Boolean {
      return _builder.hasVarMaxInj()
    }

    public val SourceCapabilityConfigurationKt.Dsl.varMaxInjOrNull: openfmb.commonmodule.ASG?
      get() = _builder.varMaxInjOrNull

    /**
     * ```
     * AC voltage maximum configured value
     * ```
     *
     * `.commonmodule.ASG VMax = 6;`
     */
    public var vMax: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getVMax")
        get() = _builder.vMax
      @kotlin.jvm.JvmName("setVMax")
        set(value) {
        _builder.vMax = value
      }
    /**
     * ```
     * AC voltage maximum configured value
     * ```
     *
     * `.commonmodule.ASG VMax = 6;`
     */
    public fun clearVMax() {
      _builder.clearVMax()
    }
    /**
     * ```
     * AC voltage maximum configured value
     * ```
     *
     * `.commonmodule.ASG VMax = 6;`
     * @return Whether the vMax field is set.
     */
    public fun hasVMax(): kotlin.Boolean {
      return _builder.hasVMax()
    }

    public val SourceCapabilityConfigurationKt.Dsl.vMaxOrNull: openfmb.commonmodule.ASG?
      get() = _builder.vMaxOrNull

    /**
     * ```
     * AC voltage minimum configured value
     * ```
     *
     * `.commonmodule.ASG VMin = 7;`
     */
    public var vMin: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getVMin")
        get() = _builder.vMin
      @kotlin.jvm.JvmName("setVMin")
        set(value) {
        _builder.vMin = value
      }
    /**
     * ```
     * AC voltage minimum configured value
     * ```
     *
     * `.commonmodule.ASG VMin = 7;`
     */
    public fun clearVMin() {
      _builder.clearVMin()
    }
    /**
     * ```
     * AC voltage minimum configured value
     * ```
     *
     * `.commonmodule.ASG VMin = 7;`
     * @return Whether the vMin field is set.
     */
    public fun hasVMin(): kotlin.Boolean {
      return _builder.hasVMin()
    }

    public val SourceCapabilityConfigurationKt.Dsl.vMinOrNull: openfmb.commonmodule.ASG?
      get() = _builder.vMinOrNull

    /**
     * ```
     * AC voltage nominal configured value
     * ```
     *
     * `.commonmodule.ASG VNom = 8;`
     */
    public var vNom: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getVNom")
        get() = _builder.vNom
      @kotlin.jvm.JvmName("setVNom")
        set(value) {
        _builder.vNom = value
      }
    /**
     * ```
     * AC voltage nominal configured value
     * ```
     *
     * `.commonmodule.ASG VNom = 8;`
     */
    public fun clearVNom() {
      _builder.clearVNom()
    }
    /**
     * ```
     * AC voltage nominal configured value
     * ```
     *
     * `.commonmodule.ASG VNom = 8;`
     * @return Whether the vNom field is set.
     */
    public fun hasVNom(): kotlin.Boolean {
      return _builder.hasVNom()
    }

    public val SourceCapabilityConfigurationKt.Dsl.vNomOrNull: openfmb.commonmodule.ASG?
      get() = _builder.vNomOrNull

    /**
     * ```
     * Active Power Max configured value
     * ```
     *
     * `.commonmodule.ASG WMax = 9;`
     */
    public var wMax: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getWMax")
        get() = _builder.wMax
      @kotlin.jvm.JvmName("setWMax")
        set(value) {
        _builder.wMax = value
      }
    /**
     * ```
     * Active Power Max configured value
     * ```
     *
     * `.commonmodule.ASG WMax = 9;`
     */
    public fun clearWMax() {
      _builder.clearWMax()
    }
    /**
     * ```
     * Active Power Max configured value
     * ```
     *
     * `.commonmodule.ASG WMax = 9;`
     * @return Whether the wMax field is set.
     */
    public fun hasWMax(): kotlin.Boolean {
      return _builder.hasWMax()
    }

    public val SourceCapabilityConfigurationKt.Dsl.wMaxOrNull: openfmb.commonmodule.ASG?
      get() = _builder.wMaxOrNull

    /**
     * ```
     * Active Power (Over-Excited) configured value
     * ```
     *
     * `.commonmodule.ASG WOvrExt = 10;`
     */
    public var wOvrExt: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getWOvrExt")
        get() = _builder.wOvrExt
      @kotlin.jvm.JvmName("setWOvrExt")
        set(value) {
        _builder.wOvrExt = value
      }
    /**
     * ```
     * Active Power (Over-Excited) configured value
     * ```
     *
     * `.commonmodule.ASG WOvrExt = 10;`
     */
    public fun clearWOvrExt() {
      _builder.clearWOvrExt()
    }
    /**
     * ```
     * Active Power (Over-Excited) configured value
     * ```
     *
     * `.commonmodule.ASG WOvrExt = 10;`
     * @return Whether the wOvrExt field is set.
     */
    public fun hasWOvrExt(): kotlin.Boolean {
      return _builder.hasWOvrExt()
    }

    public val SourceCapabilityConfigurationKt.Dsl.wOvrExtOrNull: openfmb.commonmodule.ASG?
      get() = _builder.wOvrExtOrNull

    /**
     * ```
     * Active power configured value at specified over-excited power factor
     * ```
     *
     * `.commonmodule.ASG WOvrExtPF = 11;`
     */
    public var wOvrExtPF: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getWOvrExtPF")
        get() = _builder.wOvrExtPF
      @kotlin.jvm.JvmName("setWOvrExtPF")
        set(value) {
        _builder.wOvrExtPF = value
      }
    /**
     * ```
     * Active power configured value at specified over-excited power factor
     * ```
     *
     * `.commonmodule.ASG WOvrExtPF = 11;`
     */
    public fun clearWOvrExtPF() {
      _builder.clearWOvrExtPF()
    }
    /**
     * ```
     * Active power configured value at specified over-excited power factor
     * ```
     *
     * `.commonmodule.ASG WOvrExtPF = 11;`
     * @return Whether the wOvrExtPF field is set.
     */
    public fun hasWOvrExtPF(): kotlin.Boolean {
      return _builder.hasWOvrExtPF()
    }

    public val SourceCapabilityConfigurationKt.Dsl.wOvrExtPFOrNull: openfmb.commonmodule.ASG?
      get() = _builder.wOvrExtPFOrNull

    /**
     * ```
     * Active Power (Under-Excited) configured value
     * ```
     *
     * `.commonmodule.ASG WUndExt = 12;`
     */
    public var wUndExt: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getWUndExt")
        get() = _builder.wUndExt
      @kotlin.jvm.JvmName("setWUndExt")
        set(value) {
        _builder.wUndExt = value
      }
    /**
     * ```
     * Active Power (Under-Excited) configured value
     * ```
     *
     * `.commonmodule.ASG WUndExt = 12;`
     */
    public fun clearWUndExt() {
      _builder.clearWUndExt()
    }
    /**
     * ```
     * Active Power (Under-Excited) configured value
     * ```
     *
     * `.commonmodule.ASG WUndExt = 12;`
     * @return Whether the wUndExt field is set.
     */
    public fun hasWUndExt(): kotlin.Boolean {
      return _builder.hasWUndExt()
    }

    public val SourceCapabilityConfigurationKt.Dsl.wUndExtOrNull: openfmb.commonmodule.ASG?
      get() = _builder.wUndExtOrNull

    /**
     * ```
     * Active power configured value at specified under-excited power factor
     * ```
     *
     * `.commonmodule.ASG WUndExtPF = 13;`
     */
    public var wUndExtPF: openfmb.commonmodule.ASG
      @kotlin.jvm.JvmName("getWUndExtPF")
        get() = _builder.wUndExtPF
      @kotlin.jvm.JvmName("setWUndExtPF")
        set(value) {
        _builder.wUndExtPF = value
      }
    /**
     * ```
     * Active power configured value at specified under-excited power factor
     * ```
     *
     * `.commonmodule.ASG WUndExtPF = 13;`
     */
    public fun clearWUndExtPF() {
      _builder.clearWUndExtPF()
    }
    /**
     * ```
     * Active power configured value at specified under-excited power factor
     * ```
     *
     * `.commonmodule.ASG WUndExtPF = 13;`
     * @return Whether the wUndExtPF field is set.
     */
    public fun hasWUndExtPF(): kotlin.Boolean {
      return _builder.hasWUndExtPF()
    }

    public val SourceCapabilityConfigurationKt.Dsl.wUndExtPFOrNull: openfmb.commonmodule.ASG?
      get() = _builder.wUndExtPFOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.SourceCapabilityConfiguration.copy(block: `openfmb.commonmodule`.SourceCapabilityConfigurationKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.SourceCapabilityConfiguration =
  `openfmb.commonmodule`.SourceCapabilityConfigurationKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.SourceCapabilityConfigurationOrBuilder.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
  get() = if (hasLogicalNode()) getLogicalNode() else null

public val openfmb.commonmodule.SourceCapabilityConfigurationOrBuilder.aMaxOrNull: openfmb.commonmodule.ASG?
  get() = if (hasAMax()) getAMax() else null

public val openfmb.commonmodule.SourceCapabilityConfigurationOrBuilder.vAMaxOrNull: openfmb.commonmodule.ASG?
  get() = if (hasVAMax()) getVAMax() else null

public val openfmb.commonmodule.SourceCapabilityConfigurationOrBuilder.varMaxAbsOrNull: openfmb.commonmodule.ASG?
  get() = if (hasVarMaxAbs()) getVarMaxAbs() else null

public val openfmb.commonmodule.SourceCapabilityConfigurationOrBuilder.varMaxInjOrNull: openfmb.commonmodule.ASG?
  get() = if (hasVarMaxInj()) getVarMaxInj() else null

public val openfmb.commonmodule.SourceCapabilityConfigurationOrBuilder.vMaxOrNull: openfmb.commonmodule.ASG?
  get() = if (hasVMax()) getVMax() else null

public val openfmb.commonmodule.SourceCapabilityConfigurationOrBuilder.vMinOrNull: openfmb.commonmodule.ASG?
  get() = if (hasVMin()) getVMin() else null

public val openfmb.commonmodule.SourceCapabilityConfigurationOrBuilder.vNomOrNull: openfmb.commonmodule.ASG?
  get() = if (hasVNom()) getVNom() else null

public val openfmb.commonmodule.SourceCapabilityConfigurationOrBuilder.wMaxOrNull: openfmb.commonmodule.ASG?
  get() = if (hasWMax()) getWMax() else null

public val openfmb.commonmodule.SourceCapabilityConfigurationOrBuilder.wOvrExtOrNull: openfmb.commonmodule.ASG?
  get() = if (hasWOvrExt()) getWOvrExt() else null

public val openfmb.commonmodule.SourceCapabilityConfigurationOrBuilder.wOvrExtPFOrNull: openfmb.commonmodule.ASG?
  get() = if (hasWOvrExtPF()) getWOvrExtPF() else null

public val openfmb.commonmodule.SourceCapabilityConfigurationOrBuilder.wUndExtOrNull: openfmb.commonmodule.ASG?
  get() = if (hasWUndExt()) getWUndExt() else null

public val openfmb.commonmodule.SourceCapabilityConfigurationOrBuilder.wUndExtPFOrNull: openfmb.commonmodule.ASG?
  get() = if (hasWUndExtPF()) getWUndExtPF() else null

