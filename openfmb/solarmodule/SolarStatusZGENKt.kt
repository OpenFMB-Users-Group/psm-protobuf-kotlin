//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: solarmodule/solarmodule.proto

package openfmb.solarmodule;

@kotlin.jvm.JvmName("-initializesolarStatusZGEN")
public inline fun solarStatusZGEN(block: openfmb.solarmodule.SolarStatusZGENKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarStatusZGEN =
  openfmb.solarmodule.SolarStatusZGENKt.Dsl._create(openfmb.solarmodule.SolarStatusZGEN.newBuilder()).apply { block() }._build()
public object SolarStatusZGENKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.solarmodule.SolarStatusZGEN.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.solarmodule.SolarStatusZGEN.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.solarmodule.SolarStatusZGEN = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var solarEventAndStatusZGEN: openfmb.solarmodule.SolarEventAndStatusZGEN
      @JvmName("getSolarEventAndStatusZGEN")
      get() = _builder.getSolarEventAndStatusZGEN()
      @JvmName("setSolarEventAndStatusZGEN")
      set(value) {
        _builder.setSolarEventAndStatusZGEN(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearSolarEventAndStatusZGEN() {
      _builder.clearSolarEventAndStatusZGEN()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the solarEventAndStatusZGEN field is set.
     */
    public fun hasSolarEventAndStatusZGEN(): kotlin.Boolean {
      return _builder.hasSolarEventAndStatusZGEN()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ENG_GridConnectModeKind GriMod = 2;</code>
     */
    public var griMod: openfmb.commonmodule.ENG_GridConnectModeKind
      @JvmName("getGriMod")
      get() = _builder.getGriMod()
      @JvmName("setGriMod")
      set(value) {
        _builder.setGriMod(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ENG_GridConnectModeKind GriMod = 2;</code>
     */
    public fun clearGriMod() {
      _builder.clearGriMod()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ENG_GridConnectModeKind GriMod = 2;</code>
     * @return Whether the griMod field is set.
     */
    public fun hasGriMod(): kotlin.Boolean {
      return _builder.hasGriMod()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.solarmodule.SolarStatusZGEN.copy(block: openfmb.solarmodule.SolarStatusZGENKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarStatusZGEN =
  openfmb.solarmodule.SolarStatusZGENKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val openfmb.solarmodule.SolarStatusZGENOrBuilder.solarEventAndStatusZGENOrNull: openfmb.solarmodule.SolarEventAndStatusZGEN?
  get() = if (hasSolarEventAndStatusZGEN()) getSolarEventAndStatusZGEN() else null

val openfmb.solarmodule.SolarStatusZGENOrBuilder.griModOrNull: openfmb.commonmodule.ENG_GridConnectModeKind?
  get() = if (hasGriMod()) getGriMod() else null

