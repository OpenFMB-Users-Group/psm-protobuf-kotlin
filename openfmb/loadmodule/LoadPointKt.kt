// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: loadmodule/loadmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.loadmodule;

@kotlin.jvm.JvmName("-initializeloadPoint")
public inline fun loadPoint(block: openfmb.loadmodule.LoadPointKt.Dsl.() -> kotlin.Unit): openfmb.loadmodule.LoadPoint =
  openfmb.loadmodule.LoadPointKt.Dsl._create(openfmb.loadmodule.LoadPoint.newBuilder()).apply { block() }._build()
/**
 * ```
 * Point definition (Point)
 * ```
 *
 * Protobuf type `loadmodule.LoadPoint`
 */
public object LoadPointKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.loadmodule.LoadPoint.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.loadmodule.LoadPoint.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.loadmodule.LoadPoint = _builder.build()

    /**
     * ```
     * Ramp rates
     * ```
     *
     * `.commonmodule.RampRate rampRates = 1;`
     */
    public var rampRates: openfmb.commonmodule.RampRate
      @kotlin.jvm.JvmName("getRampRates")
        get() = _builder.rampRates
      @kotlin.jvm.JvmName("setRampRates")
        set(value) {
        _builder.rampRates = value
      }
    /**
     * ```
     * Ramp rates
     * ```
     *
     * `.commonmodule.RampRate rampRates = 1;`
     */
    public fun clearRampRates() {
      _builder.clearRampRates()
    }
    /**
     * ```
     * Ramp rates
     * ```
     *
     * `.commonmodule.RampRate rampRates = 1;`
     * @return Whether the rampRates field is set.
     */
    public fun hasRampRates(): kotlin.Boolean {
      return _builder.hasRampRates()
    }

    public val LoadPointKt.Dsl.rampRatesOrNull: openfmb.commonmodule.RampRate?
      get() = _builder.rampRatesOrNull

    /**
     * ```
     * Enable reactive power set point
     * ```
     *
     * `.commonmodule.ControlSPC reactivePwrSetPointEnabled = 2;`
     */
    public var reactivePwrSetPointEnabled: openfmb.commonmodule.ControlSPC
      @kotlin.jvm.JvmName("getReactivePwrSetPointEnabled")
        get() = _builder.reactivePwrSetPointEnabled
      @kotlin.jvm.JvmName("setReactivePwrSetPointEnabled")
        set(value) {
        _builder.reactivePwrSetPointEnabled = value
      }
    /**
     * ```
     * Enable reactive power set point
     * ```
     *
     * `.commonmodule.ControlSPC reactivePwrSetPointEnabled = 2;`
     */
    public fun clearReactivePwrSetPointEnabled() {
      _builder.clearReactivePwrSetPointEnabled()
    }
    /**
     * ```
     * Enable reactive power set point
     * ```
     *
     * `.commonmodule.ControlSPC reactivePwrSetPointEnabled = 2;`
     * @return Whether the reactivePwrSetPointEnabled field is set.
     */
    public fun hasReactivePwrSetPointEnabled(): kotlin.Boolean {
      return _builder.hasReactivePwrSetPointEnabled()
    }

    public val LoadPointKt.Dsl.reactivePwrSetPointEnabledOrNull: openfmb.commonmodule.ControlSPC?
      get() = _builder.reactivePwrSetPointEnabledOrNull

    /**
     * ```
     * Enable joint real power set point
     * ```
     *
     * `.commonmodule.ControlSPC realPwrSetPointEnabled = 3;`
     */
    public var realPwrSetPointEnabled: openfmb.commonmodule.ControlSPC
      @kotlin.jvm.JvmName("getRealPwrSetPointEnabled")
        get() = _builder.realPwrSetPointEnabled
      @kotlin.jvm.JvmName("setRealPwrSetPointEnabled")
        set(value) {
        _builder.realPwrSetPointEnabled = value
      }
    /**
     * ```
     * Enable joint real power set point
     * ```
     *
     * `.commonmodule.ControlSPC realPwrSetPointEnabled = 3;`
     */
    public fun clearRealPwrSetPointEnabled() {
      _builder.clearRealPwrSetPointEnabled()
    }
    /**
     * ```
     * Enable joint real power set point
     * ```
     *
     * `.commonmodule.ControlSPC realPwrSetPointEnabled = 3;`
     * @return Whether the realPwrSetPointEnabled field is set.
     */
    public fun hasRealPwrSetPointEnabled(): kotlin.Boolean {
      return _builder.hasRealPwrSetPointEnabled()
    }

    public val LoadPointKt.Dsl.realPwrSetPointEnabledOrNull: openfmb.commonmodule.ControlSPC?
      get() = _builder.realPwrSetPointEnabledOrNull

    /**
     * ```
     * Reset device
     * ```
     *
     * `.commonmodule.ControlSPC reset = 4;`
     */
    public var reset: openfmb.commonmodule.ControlSPC
      @kotlin.jvm.JvmName("getReset")
        get() = _builder.reset
      @kotlin.jvm.JvmName("setReset")
        set(value) {
        _builder.reset = value
      }
    /**
     * ```
     * Reset device
     * ```
     *
     * `.commonmodule.ControlSPC reset = 4;`
     */
    public fun clearReset() {
      _builder.clearReset()
    }
    /**
     * ```
     * Reset device
     * ```
     *
     * `.commonmodule.ControlSPC reset = 4;`
     * @return Whether the reset field is set.
     */
    public fun hasReset(): kotlin.Boolean {
      return _builder.hasReset()
    }

    public val LoadPointKt.Dsl.resetOrNull: openfmb.commonmodule.ControlSPC?
      get() = _builder.resetOrNull

    /**
     * ```
     * ESS state
     * ```
     *
     * `.commonmodule.Optional_StateKind state = 5;`
     */
    public var state: openfmb.commonmodule.Optional_StateKind
      @kotlin.jvm.JvmName("getState")
        get() = _builder.state
      @kotlin.jvm.JvmName("setState")
        set(value) {
        _builder.state = value
      }
    /**
     * ```
     * ESS state
     * ```
     *
     * `.commonmodule.Optional_StateKind state = 5;`
     */
    public fun clearState() {
      _builder.clearState()
    }
    /**
     * ```
     * ESS state
     * ```
     *
     * `.commonmodule.Optional_StateKind state = 5;`
     * @return Whether the state field is set.
     */
    public fun hasState(): kotlin.Boolean {
      return _builder.hasState()
    }

    public val LoadPointKt.Dsl.stateOrNull: openfmb.commonmodule.Optional_StateKind?
      get() = _builder.stateOrNull

    /**
     * ```
     * Start time
     * ```
     *
     * `.commonmodule.ControlTimestamp startTime = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var startTime: openfmb.commonmodule.ControlTimestamp
      @kotlin.jvm.JvmName("getStartTime")
        get() = _builder.startTime
      @kotlin.jvm.JvmName("setStartTime")
        set(value) {
        _builder.startTime = value
      }
    /**
     * ```
     * Start time
     * ```
     *
     * `.commonmodule.ControlTimestamp startTime = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearStartTime() {
      _builder.clearStartTime()
    }
    /**
     * ```
     * Start time
     * ```
     *
     * `.commonmodule.ControlTimestamp startTime = 6 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the startTime field is set.
     */
    public fun hasStartTime(): kotlin.Boolean {
      return _builder.hasStartTime()
    }

    public val LoadPointKt.Dsl.startTimeOrNull: openfmb.commonmodule.ControlTimestamp?
      get() = _builder.startTimeOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.loadmodule.LoadPoint.copy(block: `openfmb.loadmodule`.LoadPointKt.Dsl.() -> kotlin.Unit): openfmb.loadmodule.LoadPoint =
  `openfmb.loadmodule`.LoadPointKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.loadmodule.LoadPointOrBuilder.rampRatesOrNull: openfmb.commonmodule.RampRate?
  get() = if (hasRampRates()) getRampRates() else null

public val openfmb.loadmodule.LoadPointOrBuilder.reactivePwrSetPointEnabledOrNull: openfmb.commonmodule.ControlSPC?
  get() = if (hasReactivePwrSetPointEnabled()) getReactivePwrSetPointEnabled() else null

public val openfmb.loadmodule.LoadPointOrBuilder.realPwrSetPointEnabledOrNull: openfmb.commonmodule.ControlSPC?
  get() = if (hasRealPwrSetPointEnabled()) getRealPwrSetPointEnabled() else null

public val openfmb.loadmodule.LoadPointOrBuilder.resetOrNull: openfmb.commonmodule.ControlSPC?
  get() = if (hasReset()) getReset() else null

public val openfmb.loadmodule.LoadPointOrBuilder.stateOrNull: openfmb.commonmodule.Optional_StateKind?
  get() = if (hasState()) getState() else null

public val openfmb.loadmodule.LoadPointOrBuilder.startTimeOrNull: openfmb.commonmodule.ControlTimestamp?
  get() = if (hasStartTime()) getStartTime() else null

