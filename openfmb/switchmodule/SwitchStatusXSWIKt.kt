//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: switchmodule/switchmodule.proto

package openfmb.switchmodule;

@kotlin.jvm.JvmName("-initializeswitchStatusXSWI")
public inline fun switchStatusXSWI(block: openfmb.switchmodule.SwitchStatusXSWIKt.Dsl.() -> kotlin.Unit): openfmb.switchmodule.SwitchStatusXSWI =
  openfmb.switchmodule.SwitchStatusXSWIKt.Dsl._create(openfmb.switchmodule.SwitchStatusXSWI.newBuilder()).apply { block() }._build()
public object SwitchStatusXSWIKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.switchmodule.SwitchStatusXSWI.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.switchmodule.SwitchStatusXSWI.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.switchmodule.SwitchStatusXSWI = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var logicalNodeForEventAndStatus: openfmb.commonmodule.LogicalNodeForEventAndStatus
      @JvmName("getLogicalNodeForEventAndStatus")
      get() = _builder.getLogicalNodeForEventAndStatus()
      @JvmName("setLogicalNodeForEventAndStatus")
      set(value) {
        _builder.setLogicalNodeForEventAndStatus(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearLogicalNodeForEventAndStatus() {
      _builder.clearLogicalNodeForEventAndStatus()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the logicalNodeForEventAndStatus field is set.
     */
    public fun hasLogicalNodeForEventAndStatus(): kotlin.Boolean {
      return _builder.hasLogicalNodeForEventAndStatus()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ENS_DynamicTestKind DynamicTest = 2;</code>
     */
    public var dynamicTest: openfmb.commonmodule.ENS_DynamicTestKind
      @JvmName("getDynamicTest")
      get() = _builder.getDynamicTest()
      @JvmName("setDynamicTest")
      set(value) {
        _builder.setDynamicTest(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ENS_DynamicTestKind DynamicTest = 2;</code>
     */
    public fun clearDynamicTest() {
      _builder.clearDynamicTest()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ENS_DynamicTestKind DynamicTest = 2;</code>
     * @return Whether the dynamicTest field is set.
     */
    public fun hasDynamicTest(): kotlin.Boolean {
      return _builder.hasDynamicTest()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.PhaseDPS Pos = 4;</code>
     */
    public var pos: openfmb.commonmodule.PhaseDPS
      @JvmName("getPos")
      get() = _builder.getPos()
      @JvmName("setPos")
      set(value) {
        _builder.setPos(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.PhaseDPS Pos = 4;</code>
     */
    public fun clearPos() {
      _builder.clearPos()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.PhaseDPS Pos = 4;</code>
     * @return Whether the pos field is set.
     */
    public fun hasPos(): kotlin.Boolean {
      return _builder.hasPos()
    }

    /**
     * <pre>
     * Fault latch: LT01=51A OR 51B OR 51C
     * </pre>
     *
     * <code>.commonmodule.PhaseSPS ProtectionPickup = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var protectionPickup: openfmb.commonmodule.PhaseSPS
      @JvmName("getProtectionPickup")
      get() = _builder.getProtectionPickup()
      @JvmName("setProtectionPickup")
      set(value) {
        _builder.setProtectionPickup(value)
      }
    /**
     * <pre>
     * Fault latch: LT01=51A OR 51B OR 51C
     * </pre>
     *
     * <code>.commonmodule.PhaseSPS ProtectionPickup = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearProtectionPickup() {
      _builder.clearProtectionPickup()
    }
    /**
     * <pre>
     * Fault latch: LT01=51A OR 51B OR 51C
     * </pre>
     *
     * <code>.commonmodule.PhaseSPS ProtectionPickup = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @return Whether the protectionPickup field is set.
     */
    public fun hasProtectionPickup(): kotlin.Boolean {
      return _builder.hasProtectionPickup()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.switchmodule.SwitchStatusXSWI.copy(block: openfmb.switchmodule.SwitchStatusXSWIKt.Dsl.() -> kotlin.Unit): openfmb.switchmodule.SwitchStatusXSWI =
  openfmb.switchmodule.SwitchStatusXSWIKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val openfmb.switchmodule.SwitchStatusXSWIOrBuilder.logicalNodeForEventAndStatusOrNull: openfmb.commonmodule.LogicalNodeForEventAndStatus?
  get() = if (hasLogicalNodeForEventAndStatus()) getLogicalNodeForEventAndStatus() else null

val openfmb.switchmodule.SwitchStatusXSWIOrBuilder.dynamicTestOrNull: openfmb.commonmodule.ENS_DynamicTestKind?
  get() = if (hasDynamicTest()) getDynamicTest() else null

val openfmb.switchmodule.SwitchStatusXSWIOrBuilder.posOrNull: openfmb.commonmodule.PhaseDPS?
  get() = if (hasPos()) getPos() else null

val openfmb.switchmodule.SwitchStatusXSWIOrBuilder.protectionPickupOrNull: openfmb.commonmodule.PhaseSPS?
  get() = if (hasProtectionPickup()) getProtectionPickup() else null

