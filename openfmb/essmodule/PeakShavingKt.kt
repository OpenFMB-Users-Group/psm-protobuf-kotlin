// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: essmodule/essmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.essmodule;

@kotlin.jvm.JvmName("-initializepeakShaving")
public inline fun peakShaving(block: openfmb.essmodule.PeakShavingKt.Dsl.() -> kotlin.Unit): openfmb.essmodule.PeakShaving =
  openfmb.essmodule.PeakShavingKt.Dsl._create(openfmb.essmodule.PeakShaving.newBuilder()).apply { block() }._build()
/**
 * ```
 * ESS inverter high level function to maintain power level by charging or discharging
 * ```
 *
 * Protobuf type `essmodule.PeakShaving`
 */
public object PeakShavingKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.essmodule.PeakShaving.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.essmodule.PeakShaving.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.essmodule.PeakShaving = _builder.build()

    /**
     * ```
     * uint/1kW  If the supervised power goes below this limit, the ESS will charge to maintain this limit.
     * ```
     *
     * `.google.protobuf.FloatValue baseShavingLimit = 1;`
     */
    public var baseShavingLimit: com.google.protobuf.FloatValue
      @JvmName("getBaseShavingLimit")
      get() = _builder.getBaseShavingLimit()
      @JvmName("setBaseShavingLimit")
      set(value) {
        _builder.setBaseShavingLimit(value)
      }
    /**
     * ```
     * uint/1kW  If the supervised power goes below this limit, the ESS will charge to maintain this limit.
     * ```
     *
     * `.google.protobuf.FloatValue baseShavingLimit = 1;`
     */
    public fun clearBaseShavingLimit() {
      _builder.clearBaseShavingLimit()
    }
    /**
     * ```
     * uint/1kW  If the supervised power goes below this limit, the ESS will charge to maintain this limit.
     * ```
     *
     * `.google.protobuf.FloatValue baseShavingLimit = 1;`
     * @return Whether the baseShavingLimit field is set.
     */
    public fun hasBaseShavingLimit(): kotlin.Boolean {
      return _builder.hasBaseShavingLimit()
    }

    /**
     * ```
     * Control value (TRUE or FALSE)
     * ```
     *
     * `.google.protobuf.BoolValue peakShavingCtl = 2;`
     */
    public var peakShavingCtl: com.google.protobuf.BoolValue
      @JvmName("getPeakShavingCtl")
      get() = _builder.getPeakShavingCtl()
      @JvmName("setPeakShavingCtl")
      set(value) {
        _builder.setPeakShavingCtl(value)
      }
    /**
     * ```
     * Control value (TRUE or FALSE)
     * ```
     *
     * `.google.protobuf.BoolValue peakShavingCtl = 2;`
     */
    public fun clearPeakShavingCtl() {
      _builder.clearPeakShavingCtl()
    }
    /**
     * ```
     * Control value (TRUE or FALSE)
     * ```
     *
     * `.google.protobuf.BoolValue peakShavingCtl = 2;`
     * @return Whether the peakShavingCtl field is set.
     */
    public fun hasPeakShavingCtl(): kotlin.Boolean {
      return _builder.hasPeakShavingCtl()
    }

    /**
     * ```
     * uint/1kW  If the supervised power goes above this limit, the ESS will discharge to maintain this
     * limit.
     * ```
     *
     * `.google.protobuf.FloatValue peakShavingLimit = 3;`
     */
    public var peakShavingLimit: com.google.protobuf.FloatValue
      @JvmName("getPeakShavingLimit")
      get() = _builder.getPeakShavingLimit()
      @JvmName("setPeakShavingLimit")
      set(value) {
        _builder.setPeakShavingLimit(value)
      }
    /**
     * ```
     * uint/1kW  If the supervised power goes above this limit, the ESS will discharge to maintain this
     * limit.
     * ```
     *
     * `.google.protobuf.FloatValue peakShavingLimit = 3;`
     */
    public fun clearPeakShavingLimit() {
      _builder.clearPeakShavingLimit()
    }
    /**
     * ```
     * uint/1kW  If the supervised power goes above this limit, the ESS will discharge to maintain this
     * limit.
     * ```
     *
     * `.google.protobuf.FloatValue peakShavingLimit = 3;`
     * @return Whether the peakShavingLimit field is set.
     */
    public fun hasPeakShavingLimit(): kotlin.Boolean {
      return _builder.hasPeakShavingLimit()
    }

    /**
     * ```
     * uint/1kW  If the supervised power is between the band defined by these two limits then SOC
     * management is allowed.
     * ```
     *
     * `.google.protobuf.FloatValue socManagementAllowedHighLimit = 4;`
     */
    public var socManagementAllowedHighLimit: com.google.protobuf.FloatValue
      @JvmName("getSocManagementAllowedHighLimit")
      get() = _builder.getSocManagementAllowedHighLimit()
      @JvmName("setSocManagementAllowedHighLimit")
      set(value) {
        _builder.setSocManagementAllowedHighLimit(value)
      }
    /**
     * ```
     * uint/1kW  If the supervised power is between the band defined by these two limits then SOC
     * management is allowed.
     * ```
     *
     * `.google.protobuf.FloatValue socManagementAllowedHighLimit = 4;`
     */
    public fun clearSocManagementAllowedHighLimit() {
      _builder.clearSocManagementAllowedHighLimit()
    }
    /**
     * ```
     * uint/1kW  If the supervised power is between the band defined by these two limits then SOC
     * management is allowed.
     * ```
     *
     * `.google.protobuf.FloatValue socManagementAllowedHighLimit = 4;`
     * @return Whether the socManagementAllowedHighLimit field is set.
     */
    public fun hasSocManagementAllowedHighLimit(): kotlin.Boolean {
      return _builder.hasSocManagementAllowedHighLimit()
    }

    /**
     * ```
     * uint/1kW  If the supervised power is between the band defined by these two limits then SOC
     * management is allowed.
     * ```
     *
     * `.google.protobuf.FloatValue socManagementAllowedLowLimit = 5;`
     */
    public var socManagementAllowedLowLimit: com.google.protobuf.FloatValue
      @JvmName("getSocManagementAllowedLowLimit")
      get() = _builder.getSocManagementAllowedLowLimit()
      @JvmName("setSocManagementAllowedLowLimit")
      set(value) {
        _builder.setSocManagementAllowedLowLimit(value)
      }
    /**
     * ```
     * uint/1kW  If the supervised power is between the band defined by these two limits then SOC
     * management is allowed.
     * ```
     *
     * `.google.protobuf.FloatValue socManagementAllowedLowLimit = 5;`
     */
    public fun clearSocManagementAllowedLowLimit() {
      _builder.clearSocManagementAllowedLowLimit()
    }
    /**
     * ```
     * uint/1kW  If the supervised power is between the band defined by these two limits then SOC
     * management is allowed.
     * ```
     *
     * `.google.protobuf.FloatValue socManagementAllowedLowLimit = 5;`
     * @return Whether the socManagementAllowedLowLimit field is set.
     */
    public fun hasSocManagementAllowedLowLimit(): kotlin.Boolean {
      return _builder.hasSocManagementAllowedLowLimit()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.essmodule.PeakShaving.copy(block: openfmb.essmodule.PeakShavingKt.Dsl.() -> kotlin.Unit): openfmb.essmodule.PeakShaving =
  openfmb.essmodule.PeakShavingKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.essmodule.PeakShavingOrBuilder.baseShavingLimitOrNull: com.google.protobuf.FloatValue?
  get() = if (hasBaseShavingLimit()) getBaseShavingLimit() else null

public val openfmb.essmodule.PeakShavingOrBuilder.peakShavingCtlOrNull: com.google.protobuf.BoolValue?
  get() = if (hasPeakShavingCtl()) getPeakShavingCtl() else null

public val openfmb.essmodule.PeakShavingOrBuilder.peakShavingLimitOrNull: com.google.protobuf.FloatValue?
  get() = if (hasPeakShavingLimit()) getPeakShavingLimit() else null

public val openfmb.essmodule.PeakShavingOrBuilder.socManagementAllowedHighLimitOrNull: com.google.protobuf.FloatValue?
  get() = if (hasSocManagementAllowedHighLimit()) getSocManagementAllowedHighLimit() else null

public val openfmb.essmodule.PeakShavingOrBuilder.socManagementAllowedLowLimitOrNull: com.google.protobuf.FloatValue?
  get() = if (hasSocManagementAllowedLowLimit()) getSocManagementAllowedLowLimit() else null

