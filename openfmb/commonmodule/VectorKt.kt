//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializevector")
public inline fun vector(block: openfmb.commonmodule.VectorKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.Vector =
  openfmb.commonmodule.VectorKt.Dsl._create(openfmb.commonmodule.Vector.newBuilder()).apply { block() }._build()
public object VectorKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.Vector.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.Vector.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.Vector = _builder.build()

    /**
     * <pre>
     * (range=[-180...180]) Angle of the complex value (Unit.SIUnit='deg' and Unit.multiplier='');
     * angle reference is defined in the context where this type is used.
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue ang = 1;</code>
     */
    public var ang: com.google.protobuf.DoubleValue
      @JvmName("getAng")
      get() = _builder.getAng()
      @JvmName("setAng")
      set(value) {
        _builder.setAng(value)
      }
    /**
     * <pre>
     * (range=[-180...180]) Angle of the complex value (Unit.SIUnit='deg' and Unit.multiplier='');
     * angle reference is defined in the context where this type is used.
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue ang = 1;</code>
     */
    public fun clearAng() {
      _builder.clearAng()
    }
    /**
     * <pre>
     * (range=[-180...180]) Angle of the complex value (Unit.SIUnit='deg' and Unit.multiplier='');
     * angle reference is defined in the context where this type is used.
     * </pre>
     *
     * <code>.google.protobuf.DoubleValue ang = 1;</code>
     * @return Whether the ang field is set.
     */
    public fun hasAng(): kotlin.Boolean {
      return _builder.hasAng()
    }

    /**
     * <pre>
     * Magnitude of the complex value.
     * </pre>
     *
     * <code>double mag = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var mag: kotlin.Double
      @JvmName("getMag")
      get() = _builder.getMag()
      @JvmName("setMag")
      set(value) {
        _builder.setMag(value)
      }
    /**
     * <pre>
     * Magnitude of the complex value.
     * </pre>
     *
     * <code>double mag = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearMag() {
      _builder.clearMag()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.Vector.copy(block: openfmb.commonmodule.VectorKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.Vector =
  openfmb.commonmodule.VectorKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val openfmb.commonmodule.VectorOrBuilder.angOrNull: com.google.protobuf.DoubleValue?
  get() = if (hasAng()) getAng() else null

