// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: environmentmodule/environmentmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.environmentmodule;

@kotlin.jvm.JvmName("-initializeenvironmentReading")
public inline fun environmentReading(block: openfmb.environmentmodule.EnvironmentReadingKt.Dsl.() -> kotlin.Unit): openfmb.environmentmodule.EnvironmentReading =
  openfmb.environmentmodule.EnvironmentReadingKt.Dsl._create(openfmb.environmentmodule.EnvironmentReading.newBuilder()).apply { block() }._build()
/**
 * ```
 * Environment sensor reading value
 * ```
 *
 * Protobuf type `environmentmodule.EnvironmentReading`
 */
public object EnvironmentReadingKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.environmentmodule.EnvironmentReading.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.environmentmodule.EnvironmentReading.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.environmentmodule.EnvironmentReading = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];`
     */
    public var conductingEquipmentTerminalReading: openfmb.commonmodule.ConductingEquipmentTerminalReading
      @kotlin.jvm.JvmName("getConductingEquipmentTerminalReading")
        get() = _builder.conductingEquipmentTerminalReading
      @kotlin.jvm.JvmName("setConductingEquipmentTerminalReading")
        set(value) {
        _builder.conductingEquipmentTerminalReading = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearConductingEquipmentTerminalReading() {
      _builder.clearConductingEquipmentTerminalReading()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the conductingEquipmentTerminalReading field is set.
     */
    public fun hasConductingEquipmentTerminalReading(): kotlin.Boolean {
      return _builder.hasConductingEquipmentTerminalReading()
    }

    public val EnvironmentReadingKt.Dsl.conductingEquipmentTerminalReadingOrNull: openfmb.commonmodule.ConductingEquipmentTerminalReading?
      get() = _builder.conductingEquipmentTerminalReadingOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ReadingMENV readingMENV = 2;`
     */
    public var readingMENV: openfmb.commonmodule.ReadingMENV
      @kotlin.jvm.JvmName("getReadingMENV")
        get() = _builder.readingMENV
      @kotlin.jvm.JvmName("setReadingMENV")
        set(value) {
        _builder.readingMENV = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ReadingMENV readingMENV = 2;`
     */
    public fun clearReadingMENV() {
      _builder.clearReadingMENV()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ReadingMENV readingMENV = 2;`
     * @return Whether the readingMENV field is set.
     */
    public fun hasReadingMENV(): kotlin.Boolean {
      return _builder.hasReadingMENV()
    }

    public val EnvironmentReadingKt.Dsl.readingMENVOrNull: openfmb.commonmodule.ReadingMENV?
      get() = _builder.readingMENVOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ReadingMMET readingMMET = 3;`
     */
    public var readingMMET: openfmb.commonmodule.ReadingMMET
      @kotlin.jvm.JvmName("getReadingMMET")
        get() = _builder.readingMMET
      @kotlin.jvm.JvmName("setReadingMMET")
        set(value) {
        _builder.readingMMET = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ReadingMMET readingMMET = 3;`
     */
    public fun clearReadingMMET() {
      _builder.clearReadingMMET()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ReadingMMET readingMMET = 3;`
     * @return Whether the readingMMET field is set.
     */
    public fun hasReadingMMET(): kotlin.Boolean {
      return _builder.hasReadingMMET()
    }

    public val EnvironmentReadingKt.Dsl.readingMMETOrNull: openfmb.commonmodule.ReadingMMET?
      get() = _builder.readingMMETOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.environmentmodule.EnvironmentReading.copy(block: `openfmb.environmentmodule`.EnvironmentReadingKt.Dsl.() -> kotlin.Unit): openfmb.environmentmodule.EnvironmentReading =
  `openfmb.environmentmodule`.EnvironmentReadingKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.environmentmodule.EnvironmentReadingOrBuilder.conductingEquipmentTerminalReadingOrNull: openfmb.commonmodule.ConductingEquipmentTerminalReading?
  get() = if (hasConductingEquipmentTerminalReading()) getConductingEquipmentTerminalReading() else null

public val openfmb.environmentmodule.EnvironmentReadingOrBuilder.readingMENVOrNull: openfmb.commonmodule.ReadingMENV?
  get() = if (hasReadingMENV()) getReadingMENV() else null

public val openfmb.environmentmodule.EnvironmentReadingOrBuilder.readingMMETOrNull: openfmb.commonmodule.ReadingMMET?
  get() = if (hasReadingMMET()) getReadingMMET() else null

