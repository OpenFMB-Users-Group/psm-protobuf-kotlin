// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializeoperationDCTE")
public inline fun operationDCTE(block: openfmb.commonmodule.OperationDCTEKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.OperationDCTE =
  openfmb.commonmodule.OperationDCTEKt.Dsl._create(openfmb.commonmodule.OperationDCTE.newBuilder()).apply { block() }._build()
/**
 * ```
 * MISSING DOCUMENTATION!!!
 * ```
 *
 * Protobuf type `commonmodule.OperationDCTE`
 */
public object OperationDCTEKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.OperationDCTE.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.OperationDCTE.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.OperationDCTE = _builder.build()

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ControlING rndDlTmms = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var rndDlTmms: openfmb.commonmodule.ControlING
      @kotlin.jvm.JvmName("getRndDlTmms")
        get() = _builder.rndDlTmms
      @kotlin.jvm.JvmName("setRndDlTmms")
        set(value) {
        _builder.rndDlTmms = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ControlING rndDlTmms = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearRndDlTmms() {
      _builder.clearRndDlTmms()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ControlING rndDlTmms = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the rndDlTmms field is set.
     */
    public fun hasRndDlTmms(): kotlin.Boolean {
      return _builder.hasRndDlTmms()
    }

    public val OperationDCTEKt.Dsl.rndDlTmmsOrNull: openfmb.commonmodule.ControlING?
      get() = _builder.rndDlTmmsOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ControlING rtnDlTmms = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var rtnDlTmms: openfmb.commonmodule.ControlING
      @kotlin.jvm.JvmName("getRtnDlTmms")
        get() = _builder.rtnDlTmms
      @kotlin.jvm.JvmName("setRtnDlTmms")
        set(value) {
        _builder.rtnDlTmms = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ControlING rtnDlTmms = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearRtnDlTmms() {
      _builder.clearRtnDlTmms()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ControlING rtnDlTmms = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the rtnDlTmms field is set.
     */
    public fun hasRtnDlTmms(): kotlin.Boolean {
      return _builder.hasRtnDlTmms()
    }

    public val OperationDCTEKt.Dsl.rtnDlTmmsOrNull: openfmb.commonmodule.ControlING?
      get() = _builder.rtnDlTmmsOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ControlING rtnRmpTmms = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var rtnRmpTmms: openfmb.commonmodule.ControlING
      @kotlin.jvm.JvmName("getRtnRmpTmms")
        get() = _builder.rtnRmpTmms
      @kotlin.jvm.JvmName("setRtnRmpTmms")
        set(value) {
        _builder.rtnRmpTmms = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ControlING rtnRmpTmms = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearRtnRmpTmms() {
      _builder.clearRtnRmpTmms()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ControlING rtnRmpTmms = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the rtnRmpTmms field is set.
     */
    public fun hasRtnRmpTmms(): kotlin.Boolean {
      return _builder.hasRtnRmpTmms()
    }

    public val OperationDCTEKt.Dsl.rtnRmpTmmsOrNull: openfmb.commonmodule.ControlING?
      get() = _builder.rtnRmpTmmsOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.OperationDCTE.copy(block: `openfmb.commonmodule`.OperationDCTEKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.OperationDCTE =
  `openfmb.commonmodule`.OperationDCTEKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.OperationDCTEOrBuilder.rndDlTmmsOrNull: openfmb.commonmodule.ControlING?
  get() = if (hasRndDlTmms()) getRndDlTmms() else null

public val openfmb.commonmodule.OperationDCTEOrBuilder.rtnDlTmmsOrNull: openfmb.commonmodule.ControlING?
  get() = if (hasRtnDlTmms()) getRtnDlTmms() else null

public val openfmb.commonmodule.OperationDCTEOrBuilder.rtnRmpTmmsOrNull: openfmb.commonmodule.ControlING?
  get() = if (hasRtnRmpTmms()) getRtnRmpTmms() else null

