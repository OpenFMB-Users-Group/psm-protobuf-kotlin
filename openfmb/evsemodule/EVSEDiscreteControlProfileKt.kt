// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: evsemodule/evsemodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.evsemodule;

@kotlin.jvm.JvmName("-initializeeVSEDiscreteControlProfile")
public inline fun eVSEDiscreteControlProfile(block: openfmb.evsemodule.EVSEDiscreteControlProfileKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.EVSEDiscreteControlProfile =
  openfmb.evsemodule.EVSEDiscreteControlProfileKt.Dsl._create(openfmb.evsemodule.EVSEDiscreteControlProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * MISSING DOCUMENTATION!!!
 * ```
 *
 * Protobuf type `evsemodule.EVSEDiscreteControlProfile`
 */
public object EVSEDiscreteControlProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.evsemodule.EVSEDiscreteControlProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.evsemodule.EVSEDiscreteControlProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.evsemodule.EVSEDiscreteControlProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var controlMessageInfo: openfmb.commonmodule.ControlMessageInfo
      @kotlin.jvm.JvmName("getControlMessageInfo")
        get() = _builder.controlMessageInfo
      @kotlin.jvm.JvmName("setControlMessageInfo")
        set(value) {
        _builder.controlMessageInfo = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearControlMessageInfo() {
      _builder.clearControlMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the controlMessageInfo field is set.
     */
    public fun hasControlMessageInfo(): kotlin.Boolean {
      return _builder.hasControlMessageInfo()
    }

    public val EVSEDiscreteControlProfileKt.Dsl.controlMessageInfoOrNull: openfmb.commonmodule.ControlMessageInfo?
      get() = _builder.controlMessageInfoOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EVSE evse = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var evse: openfmb.evsemodule.EVSE
      @kotlin.jvm.JvmName("getEvse")
        get() = _builder.evse
      @kotlin.jvm.JvmName("setEvse")
        set(value) {
        _builder.evse = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EVSE evse = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearEvse() {
      _builder.clearEvse()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EVSE evse = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the evse field is set.
     */
    public fun hasEvse(): kotlin.Boolean {
      return _builder.hasEvse()
    }

    public val EVSEDiscreteControlProfileKt.Dsl.evseOrNull: openfmb.evsemodule.EVSE?
      get() = _builder.evseOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EVSEDiscreteControl evseDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var evseDiscreteControl: openfmb.evsemodule.EVSEDiscreteControl
      @kotlin.jvm.JvmName("getEvseDiscreteControl")
        get() = _builder.evseDiscreteControl
      @kotlin.jvm.JvmName("setEvseDiscreteControl")
        set(value) {
        _builder.evseDiscreteControl = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EVSEDiscreteControl evseDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearEvseDiscreteControl() {
      _builder.clearEvseDiscreteControl()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EVSEDiscreteControl evseDiscreteControl = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the evseDiscreteControl field is set.
     */
    public fun hasEvseDiscreteControl(): kotlin.Boolean {
      return _builder.hasEvseDiscreteControl()
    }

    public val EVSEDiscreteControlProfileKt.Dsl.evseDiscreteControlOrNull: openfmb.evsemodule.EVSEDiscreteControl?
      get() = _builder.evseDiscreteControlOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.evsemodule.EVSEDiscreteControlProfile.copy(block: `openfmb.evsemodule`.EVSEDiscreteControlProfileKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.EVSEDiscreteControlProfile =
  `openfmb.evsemodule`.EVSEDiscreteControlProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.evsemodule.EVSEDiscreteControlProfileOrBuilder.controlMessageInfoOrNull: openfmb.commonmodule.ControlMessageInfo?
  get() = if (hasControlMessageInfo()) getControlMessageInfo() else null

public val openfmb.evsemodule.EVSEDiscreteControlProfileOrBuilder.evseOrNull: openfmb.evsemodule.EVSE?
  get() = if (hasEvse()) getEvse() else null

public val openfmb.evsemodule.EVSEDiscreteControlProfileOrBuilder.evseDiscreteControlOrNull: openfmb.evsemodule.EVSEDiscreteControl?
  get() = if (hasEvseDiscreteControl()) getEvseDiscreteControl() else null

