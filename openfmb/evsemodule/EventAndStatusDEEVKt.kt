// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: evsemodule/evsemodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.evsemodule;

@kotlin.jvm.JvmName("-initializeeventAndStatusDEEV")
public inline fun eventAndStatusDEEV(block: openfmb.evsemodule.EventAndStatusDEEVKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.EventAndStatusDEEV =
  openfmb.evsemodule.EventAndStatusDEEVKt.Dsl._create(openfmb.evsemodule.EventAndStatusDEEV.newBuilder()).apply { block() }._build()
/**
 * ```
 * Specialized 61850 DEEV class
 * ```
 *
 * Protobuf type `evsemodule.EventAndStatusDEEV`
 */
public object EventAndStatusDEEVKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.evsemodule.EventAndStatusDEEV.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.evsemodule.EventAndStatusDEEV.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.evsemodule.EventAndStatusDEEV = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];`
     */
    public var logicalNodeForEventAndStatus: openfmb.commonmodule.LogicalNodeForEventAndStatus
      @kotlin.jvm.JvmName("getLogicalNodeForEventAndStatus")
        get() = _builder.logicalNodeForEventAndStatus
      @kotlin.jvm.JvmName("setLogicalNodeForEventAndStatus")
        set(value) {
        _builder.logicalNodeForEventAndStatus = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearLogicalNodeForEventAndStatus() {
      _builder.clearLogicalNodeForEventAndStatus()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the logicalNodeForEventAndStatus field is set.
     */
    public fun hasLogicalNodeForEventAndStatus(): kotlin.Boolean {
      return _builder.hasLogicalNodeForEventAndStatus()
    }

    public val EventAndStatusDEEVKt.Dsl.logicalNodeForEventAndStatusOrNull: openfmb.commonmodule.LogicalNodeForEventAndStatus?
      get() = _builder.logicalNodeForEventAndStatusOrNull

    /**
     * ```
     * In ISO 15118 compliant implementations, the EVId refers to the EVCCID Identifier as defined in
     * [ISO 15118-2:2014]  Specifies the EV’s identification in a readable format. It contains the MAC
     * address of the EVCC as six hexBinary encoded bytes, i.e. the element shall have a length of six
     * bytes.
     * ```
     *
     * `.google.protobuf.StringValue EVId = 2 [(.uml.option_uuid) = true];`
     */
    public var eVId: com.google.protobuf.StringValue
      @kotlin.jvm.JvmName("getEVId")
        get() = _builder.evId
      @kotlin.jvm.JvmName("setEVId")
        set(value) {
        _builder.evId = value
      }
    /**
     * ```
     * In ISO 15118 compliant implementations, the EVId refers to the EVCCID Identifier as defined in
     * [ISO 15118-2:2014]  Specifies the EV’s identification in a readable format. It contains the MAC
     * address of the EVCC as six hexBinary encoded bytes, i.e. the element shall have a length of six
     * bytes.
     * ```
     *
     * `.google.protobuf.StringValue EVId = 2 [(.uml.option_uuid) = true];`
     */
    public fun clearEVId() {
      _builder.clearEVId()
    }
    /**
     * ```
     * In ISO 15118 compliant implementations, the EVId refers to the EVCCID Identifier as defined in
     * [ISO 15118-2:2014]  Specifies the EV’s identification in a readable format. It contains the MAC
     * address of the EVCC as six hexBinary encoded bytes, i.e. the element shall have a length of six
     * bytes.
     * ```
     *
     * `.google.protobuf.StringValue EVId = 2 [(.uml.option_uuid) = true];`
     * @return Whether the eVId field is set.
     */
    public fun hasEVId(): kotlin.Boolean {
      return _builder.hasEVId()
    }

    public val EventAndStatusDEEVKt.Dsl.eVIdOrNull: com.google.protobuf.StringValue?
      get() = _builder.eVIdOrNull

    /**
     * ```
     * In ISO 15118-2:2014 compliant implementations, EMobility Account Identifier as defined in Annex
     * H.1 of [ISO 15118-2:2014] This element identifies the charging contract.
     * ```
     *
     * `.google.protobuf.StringValue EMAId = 3 [(.uml.option_uuid) = true];`
     */
    public var eMAId: com.google.protobuf.StringValue
      @kotlin.jvm.JvmName("getEMAId")
        get() = _builder.emaId
      @kotlin.jvm.JvmName("setEMAId")
        set(value) {
        _builder.emaId = value
      }
    /**
     * ```
     * In ISO 15118-2:2014 compliant implementations, EMobility Account Identifier as defined in Annex
     * H.1 of [ISO 15118-2:2014] This element identifies the charging contract.
     * ```
     *
     * `.google.protobuf.StringValue EMAId = 3 [(.uml.option_uuid) = true];`
     */
    public fun clearEMAId() {
      _builder.clearEMAId()
    }
    /**
     * ```
     * In ISO 15118-2:2014 compliant implementations, EMobility Account Identifier as defined in Annex
     * H.1 of [ISO 15118-2:2014] This element identifies the charging contract.
     * ```
     *
     * `.google.protobuf.StringValue EMAId = 3 [(.uml.option_uuid) = true];`
     * @return Whether the eMAId field is set.
     */
    public fun hasEMAId(): kotlin.Boolean {
      return _builder.hasEMAId()
    }

    public val EventAndStatusDEEVKt.Dsl.eMAIdOrNull: com.google.protobuf.StringValue?
      get() = _builder.eMAIdOrNull

    /**
     * ```
     * Selected connection type according to 61851-1
     * ```
     *
     * `.evsemodule.ENS_EVConnectionChargingKind ConnTypSel = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var connTypSel: openfmb.evsemodule.ENS_EVConnectionChargingKind
      @kotlin.jvm.JvmName("getConnTypSel")
        get() = _builder.connTypSel
      @kotlin.jvm.JvmName("setConnTypSel")
        set(value) {
        _builder.connTypSel = value
      }
    /**
     * ```
     * Selected connection type according to 61851-1
     * ```
     *
     * `.evsemodule.ENS_EVConnectionChargingKind ConnTypSel = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearConnTypSel() {
      _builder.clearConnTypSel()
    }
    /**
     * ```
     * Selected connection type according to 61851-1
     * ```
     *
     * `.evsemodule.ENS_EVConnectionChargingKind ConnTypSel = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the connTypSel field is set.
     */
    public fun hasConnTypSel(): kotlin.Boolean {
      return _builder.hasConnTypSel()
    }

    public val EventAndStatusDEEVKt.Dsl.connTypSelOrNull: openfmb.evsemodule.ENS_EVConnectionChargingKind?
      get() = _builder.connTypSelOrNull

    /**
     * ```
     * Departure time is used to indicate when the vehicle intends to finish the charging process. A
     * value of zero (0) indicates that the charging process shall be finished as fast as possible.
     * ```
     *
     * `.commonmodule.ClearingTime DptTm = 5;`
     */
    public var dptTm: openfmb.commonmodule.ClearingTime
      @kotlin.jvm.JvmName("getDptTm")
        get() = _builder.dptTm
      @kotlin.jvm.JvmName("setDptTm")
        set(value) {
        _builder.dptTm = value
      }
    /**
     * ```
     * Departure time is used to indicate when the vehicle intends to finish the charging process. A
     * value of zero (0) indicates that the charging process shall be finished as fast as possible.
     * ```
     *
     * `.commonmodule.ClearingTime DptTm = 5;`
     */
    public fun clearDptTm() {
      _builder.clearDptTm()
    }
    /**
     * ```
     * Departure time is used to indicate when the vehicle intends to finish the charging process. A
     * value of zero (0) indicates that the charging process shall be finished as fast as possible.
     * ```
     *
     * `.commonmodule.ClearingTime DptTm = 5;`
     * @return Whether the dptTm field is set.
     */
    public fun hasDptTm(): kotlin.Boolean {
      return _builder.hasDptTm()
    }

    public val EventAndStatusDEEVKt.Dsl.dptTmOrNull: openfmb.commonmodule.ClearingTime?
      get() = _builder.dptTmOrNull

    /**
     * ```
     * Amount of energy required by the EV until the departure time has been reached or the EV
     * battery's SOC is at 100%. This might include the amount of energy the EV consumes for other vehicle
     * features than solely charging the EV battery.
     * ```
     *
     * `.commonmodule.MV WHReq = 6;`
     */
    public var wHReq: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getWHReq")
        get() = _builder.whReq
      @kotlin.jvm.JvmName("setWHReq")
        set(value) {
        _builder.whReq = value
      }
    /**
     * ```
     * Amount of energy required by the EV until the departure time has been reached or the EV
     * battery's SOC is at 100%. This might include the amount of energy the EV consumes for other vehicle
     * features than solely charging the EV battery.
     * ```
     *
     * `.commonmodule.MV WHReq = 6;`
     */
    public fun clearWHReq() {
      _builder.clearWHReq()
    }
    /**
     * ```
     * Amount of energy required by the EV until the departure time has been reached or the EV
     * battery's SOC is at 100%. This might include the amount of energy the EV consumes for other vehicle
     * features than solely charging the EV battery.
     * ```
     *
     * `.commonmodule.MV WHReq = 6;`
     * @return Whether the wHReq field is set.
     */
    public fun hasWHReq(): kotlin.Boolean {
      return _builder.hasWHReq()
    }

    public val EventAndStatusDEEVKt.Dsl.wHReqOrNull: openfmb.commonmodule.MV?
      get() = _builder.wHReqOrNull

    /**
     * ```
     * Energy available of the EV
     * ```
     *
     * `.commonmodule.MV WHAvail = 7;`
     */
    public var wHAvail: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getWHAvail")
        get() = _builder.whAvail
      @kotlin.jvm.JvmName("setWHAvail")
        set(value) {
        _builder.whAvail = value
      }
    /**
     * ```
     * Energy available of the EV
     * ```
     *
     * `.commonmodule.MV WHAvail = 7;`
     */
    public fun clearWHAvail() {
      _builder.clearWHAvail()
    }
    /**
     * ```
     * Energy available of the EV
     * ```
     *
     * `.commonmodule.MV WHAvail = 7;`
     * @return Whether the wHAvail field is set.
     */
    public fun hasWHAvail(): kotlin.Boolean {
      return _builder.hasWHAvail()
    }

    public val EventAndStatusDEEVKt.Dsl.wHAvailOrNull: openfmb.commonmodule.MV?
      get() = _builder.wHAvailOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.MV Soc = 8;`
     */
    public var soc: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getSoc")
        get() = _builder.soc
      @kotlin.jvm.JvmName("setSoc")
        set(value) {
        _builder.soc = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.MV Soc = 8;`
     */
    public fun clearSoc() {
      _builder.clearSoc()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.MV Soc = 8;`
     * @return Whether the soc field is set.
     */
    public fun hasSoc(): kotlin.Boolean {
      return _builder.hasSoc()
    }

    public val EventAndStatusDEEVKt.Dsl.socOrNull: openfmb.commonmodule.MV?
      get() = _builder.socOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.evsemodule.EventAndStatusDEEV.copy(block: `openfmb.evsemodule`.EventAndStatusDEEVKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.EventAndStatusDEEV =
  `openfmb.evsemodule`.EventAndStatusDEEVKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.evsemodule.EventAndStatusDEEVOrBuilder.logicalNodeForEventAndStatusOrNull: openfmb.commonmodule.LogicalNodeForEventAndStatus?
  get() = if (hasLogicalNodeForEventAndStatus()) getLogicalNodeForEventAndStatus() else null

public val openfmb.evsemodule.EventAndStatusDEEVOrBuilder.eVIdOrNull: com.google.protobuf.StringValue?
  get() = if (hasEVId()) getEVId() else null

public val openfmb.evsemodule.EventAndStatusDEEVOrBuilder.eMAIdOrNull: com.google.protobuf.StringValue?
  get() = if (hasEMAId()) getEMAId() else null

public val openfmb.evsemodule.EventAndStatusDEEVOrBuilder.connTypSelOrNull: openfmb.evsemodule.ENS_EVConnectionChargingKind?
  get() = if (hasConnTypSel()) getConnTypSel() else null

public val openfmb.evsemodule.EventAndStatusDEEVOrBuilder.dptTmOrNull: openfmb.commonmodule.ClearingTime?
  get() = if (hasDptTm()) getDptTm() else null

public val openfmb.evsemodule.EventAndStatusDEEVOrBuilder.wHReqOrNull: openfmb.commonmodule.MV?
  get() = if (hasWHReq()) getWHReq() else null

public val openfmb.evsemodule.EventAndStatusDEEVOrBuilder.wHAvailOrNull: openfmb.commonmodule.MV?
  get() = if (hasWHAvail()) getWHAvail() else null

public val openfmb.evsemodule.EventAndStatusDEEVOrBuilder.socOrNull: openfmb.commonmodule.MV?
  get() = if (hasSoc()) getSoc() else null

