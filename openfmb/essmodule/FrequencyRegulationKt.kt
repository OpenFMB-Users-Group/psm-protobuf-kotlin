// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: essmodule/essmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.essmodule;

@kotlin.jvm.JvmName("-initializefrequencyRegulation")
public inline fun frequencyRegulation(block: openfmb.essmodule.FrequencyRegulationKt.Dsl.() -> kotlin.Unit): openfmb.essmodule.FrequencyRegulation =
  openfmb.essmodule.FrequencyRegulationKt.Dsl._create(openfmb.essmodule.FrequencyRegulation.newBuilder()).apply { block() }._build()
/**
 * ```
 * ESS inverter high level function to maintain frequency within dead bands.
 * ```
 *
 * Protobuf type `essmodule.FrequencyRegulation`
 */
public object FrequencyRegulationKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.essmodule.FrequencyRegulation.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.essmodule.FrequencyRegulation.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.essmodule.FrequencyRegulation = _builder.build()

    /**
     * ```
     * uint/0.01Hz  Frequency regulation is performed when the grid frequency goes beyond the dead
     * bands. The dead bands are defined as follows: Upper DB = frequency set point + dead band plus Lower
     * DB = frequency set point – dead band minus
     * ```
     *
     * `.google.protobuf.FloatValue frequencyDeadBandMinus = 1;`
     */
    public var frequencyDeadBandMinus: com.google.protobuf.FloatValue
      @JvmName("getFrequencyDeadBandMinus")
      get() = _builder.getFrequencyDeadBandMinus()
      @JvmName("setFrequencyDeadBandMinus")
      set(value) {
        _builder.setFrequencyDeadBandMinus(value)
      }
    /**
     * ```
     * uint/0.01Hz  Frequency regulation is performed when the grid frequency goes beyond the dead
     * bands. The dead bands are defined as follows: Upper DB = frequency set point + dead band plus Lower
     * DB = frequency set point – dead band minus
     * ```
     *
     * `.google.protobuf.FloatValue frequencyDeadBandMinus = 1;`
     */
    public fun clearFrequencyDeadBandMinus() {
      _builder.clearFrequencyDeadBandMinus()
    }
    /**
     * ```
     * uint/0.01Hz  Frequency regulation is performed when the grid frequency goes beyond the dead
     * bands. The dead bands are defined as follows: Upper DB = frequency set point + dead band plus Lower
     * DB = frequency set point – dead band minus
     * ```
     *
     * `.google.protobuf.FloatValue frequencyDeadBandMinus = 1;`
     * @return Whether the frequencyDeadBandMinus field is set.
     */
    public fun hasFrequencyDeadBandMinus(): kotlin.Boolean {
      return _builder.hasFrequencyDeadBandMinus()
    }

    /**
     * ```
     * uint/0.01Hz  Frequency regulation is performed when the grid frequency goes beyond the dead
     * bands. The dead bands are defined as follows: Upper DB = frequency set point + dead band plus Lower
     * DB = frequency set point – dead band minus
     * ```
     *
     * `.google.protobuf.FloatValue frequencyDeadBandPlus = 2;`
     */
    public var frequencyDeadBandPlus: com.google.protobuf.FloatValue
      @JvmName("getFrequencyDeadBandPlus")
      get() = _builder.getFrequencyDeadBandPlus()
      @JvmName("setFrequencyDeadBandPlus")
      set(value) {
        _builder.setFrequencyDeadBandPlus(value)
      }
    /**
     * ```
     * uint/0.01Hz  Frequency regulation is performed when the grid frequency goes beyond the dead
     * bands. The dead bands are defined as follows: Upper DB = frequency set point + dead band plus Lower
     * DB = frequency set point – dead band minus
     * ```
     *
     * `.google.protobuf.FloatValue frequencyDeadBandPlus = 2;`
     */
    public fun clearFrequencyDeadBandPlus() {
      _builder.clearFrequencyDeadBandPlus()
    }
    /**
     * ```
     * uint/0.01Hz  Frequency regulation is performed when the grid frequency goes beyond the dead
     * bands. The dead bands are defined as follows: Upper DB = frequency set point + dead band plus Lower
     * DB = frequency set point – dead band minus
     * ```
     *
     * `.google.protobuf.FloatValue frequencyDeadBandPlus = 2;`
     * @return Whether the frequencyDeadBandPlus field is set.
     */
    public fun hasFrequencyDeadBandPlus(): kotlin.Boolean {
      return _builder.hasFrequencyDeadBandPlus()
    }

    /**
     * ```
     * Control value (TRUE or FALSE)
     * ```
     *
     * `.google.protobuf.BoolValue frequencyRegulationCtl = 3;`
     */
    public var frequencyRegulationCtl: com.google.protobuf.BoolValue
      @JvmName("getFrequencyRegulationCtl")
      get() = _builder.getFrequencyRegulationCtl()
      @JvmName("setFrequencyRegulationCtl")
      set(value) {
        _builder.setFrequencyRegulationCtl(value)
      }
    /**
     * ```
     * Control value (TRUE or FALSE)
     * ```
     *
     * `.google.protobuf.BoolValue frequencyRegulationCtl = 3;`
     */
    public fun clearFrequencyRegulationCtl() {
      _builder.clearFrequencyRegulationCtl()
    }
    /**
     * ```
     * Control value (TRUE or FALSE)
     * ```
     *
     * `.google.protobuf.BoolValue frequencyRegulationCtl = 3;`
     * @return Whether the frequencyRegulationCtl field is set.
     */
    public fun hasFrequencyRegulationCtl(): kotlin.Boolean {
      return _builder.hasFrequencyRegulationCtl()
    }

    /**
     * ```
     * uint/0.01Hz  Target frequency
     * ```
     *
     * `.google.protobuf.FloatValue frequencySetPoint = 4;`
     */
    public var frequencySetPoint: com.google.protobuf.FloatValue
      @JvmName("getFrequencySetPoint")
      get() = _builder.getFrequencySetPoint()
      @JvmName("setFrequencySetPoint")
      set(value) {
        _builder.setFrequencySetPoint(value)
      }
    /**
     * ```
     * uint/0.01Hz  Target frequency
     * ```
     *
     * `.google.protobuf.FloatValue frequencySetPoint = 4;`
     */
    public fun clearFrequencySetPoint() {
      _builder.clearFrequencySetPoint()
    }
    /**
     * ```
     * uint/0.01Hz  Target frequency
     * ```
     *
     * `.google.protobuf.FloatValue frequencySetPoint = 4;`
     * @return Whether the frequencySetPoint field is set.
     */
    public fun hasFrequencySetPoint(): kotlin.Boolean {
      return _builder.hasFrequencySetPoint()
    }

    /**
     * ```
     * uint/0.01Hz  Other modes of operation, such as peak shaving, smoothing or SOC management may
     * operate if the grid frequency is within the stable band. Upper stable band = frequency set point +
     * band plus Lower stable band = frequency set point – band minus
     * ```
     *
     * `.google.protobuf.FloatValue gridFrequencyStableBandMinus = 5;`
     */
    public var gridFrequencyStableBandMinus: com.google.protobuf.FloatValue
      @JvmName("getGridFrequencyStableBandMinus")
      get() = _builder.getGridFrequencyStableBandMinus()
      @JvmName("setGridFrequencyStableBandMinus")
      set(value) {
        _builder.setGridFrequencyStableBandMinus(value)
      }
    /**
     * ```
     * uint/0.01Hz  Other modes of operation, such as peak shaving, smoothing or SOC management may
     * operate if the grid frequency is within the stable band. Upper stable band = frequency set point +
     * band plus Lower stable band = frequency set point – band minus
     * ```
     *
     * `.google.protobuf.FloatValue gridFrequencyStableBandMinus = 5;`
     */
    public fun clearGridFrequencyStableBandMinus() {
      _builder.clearGridFrequencyStableBandMinus()
    }
    /**
     * ```
     * uint/0.01Hz  Other modes of operation, such as peak shaving, smoothing or SOC management may
     * operate if the grid frequency is within the stable band. Upper stable band = frequency set point +
     * band plus Lower stable band = frequency set point – band minus
     * ```
     *
     * `.google.protobuf.FloatValue gridFrequencyStableBandMinus = 5;`
     * @return Whether the gridFrequencyStableBandMinus field is set.
     */
    public fun hasGridFrequencyStableBandMinus(): kotlin.Boolean {
      return _builder.hasGridFrequencyStableBandMinus()
    }

    /**
     * ```
     * uint/0.01Hz  Other modes of operation, such as peak shaving, smoothing or SOC management may
     * operate if the grid frequency is within the stable band. Upper stable band = frequency set point +
     * band plus Lower stable band = frequency set point – band minus
     * ```
     *
     * `.google.protobuf.FloatValue gridFrequencyStableBandPlus = 6;`
     */
    public var gridFrequencyStableBandPlus: com.google.protobuf.FloatValue
      @JvmName("getGridFrequencyStableBandPlus")
      get() = _builder.getGridFrequencyStableBandPlus()
      @JvmName("setGridFrequencyStableBandPlus")
      set(value) {
        _builder.setGridFrequencyStableBandPlus(value)
      }
    /**
     * ```
     * uint/0.01Hz  Other modes of operation, such as peak shaving, smoothing or SOC management may
     * operate if the grid frequency is within the stable band. Upper stable band = frequency set point +
     * band plus Lower stable band = frequency set point – band minus
     * ```
     *
     * `.google.protobuf.FloatValue gridFrequencyStableBandPlus = 6;`
     */
    public fun clearGridFrequencyStableBandPlus() {
      _builder.clearGridFrequencyStableBandPlus()
    }
    /**
     * ```
     * uint/0.01Hz  Other modes of operation, such as peak shaving, smoothing or SOC management may
     * operate if the grid frequency is within the stable band. Upper stable band = frequency set point +
     * band plus Lower stable band = frequency set point – band minus
     * ```
     *
     * `.google.protobuf.FloatValue gridFrequencyStableBandPlus = 6;`
     * @return Whether the gridFrequencyStableBandPlus field is set.
     */
    public fun hasGridFrequencyStableBandPlus(): kotlin.Boolean {
      return _builder.hasGridFrequencyStableBandPlus()
    }

    /**
     * ```
     * uint/0.1%  The droops define the reaction of the PCS to under/over frequency events. A droop of
     * 1% means that the PCS will output 100% power if the frequency is 1% of the nominal frequency away
     * from the upper or lower dead band. The minimum droop value possible is 0.8%.
     * ```
     *
     * `.google.protobuf.FloatValue overFrequencyDroop = 7;`
     */
    public var overFrequencyDroop: com.google.protobuf.FloatValue
      @JvmName("getOverFrequencyDroop")
      get() = _builder.getOverFrequencyDroop()
      @JvmName("setOverFrequencyDroop")
      set(value) {
        _builder.setOverFrequencyDroop(value)
      }
    /**
     * ```
     * uint/0.1%  The droops define the reaction of the PCS to under/over frequency events. A droop of
     * 1% means that the PCS will output 100% power if the frequency is 1% of the nominal frequency away
     * from the upper or lower dead band. The minimum droop value possible is 0.8%.
     * ```
     *
     * `.google.protobuf.FloatValue overFrequencyDroop = 7;`
     */
    public fun clearOverFrequencyDroop() {
      _builder.clearOverFrequencyDroop()
    }
    /**
     * ```
     * uint/0.1%  The droops define the reaction of the PCS to under/over frequency events. A droop of
     * 1% means that the PCS will output 100% power if the frequency is 1% of the nominal frequency away
     * from the upper or lower dead band. The minimum droop value possible is 0.8%.
     * ```
     *
     * `.google.protobuf.FloatValue overFrequencyDroop = 7;`
     * @return Whether the overFrequencyDroop field is set.
     */
    public fun hasOverFrequencyDroop(): kotlin.Boolean {
      return _builder.hasOverFrequencyDroop()
    }

    /**
     * ```
     * uint/0.1%  The droops define the reaction of the PCS to under/over voltage events. A droop of 1%
     * means that the PCS will output 100% power if the voltage is 1% of the nominal voltage away from the
     * upper or lower dead band. The minimum droop value possible is 0.8%.
     * ```
     *
     * `.google.protobuf.FloatValue underFrequencyDroop = 8;`
     */
    public var underFrequencyDroop: com.google.protobuf.FloatValue
      @JvmName("getUnderFrequencyDroop")
      get() = _builder.getUnderFrequencyDroop()
      @JvmName("setUnderFrequencyDroop")
      set(value) {
        _builder.setUnderFrequencyDroop(value)
      }
    /**
     * ```
     * uint/0.1%  The droops define the reaction of the PCS to under/over voltage events. A droop of 1%
     * means that the PCS will output 100% power if the voltage is 1% of the nominal voltage away from the
     * upper or lower dead band. The minimum droop value possible is 0.8%.
     * ```
     *
     * `.google.protobuf.FloatValue underFrequencyDroop = 8;`
     */
    public fun clearUnderFrequencyDroop() {
      _builder.clearUnderFrequencyDroop()
    }
    /**
     * ```
     * uint/0.1%  The droops define the reaction of the PCS to under/over voltage events. A droop of 1%
     * means that the PCS will output 100% power if the voltage is 1% of the nominal voltage away from the
     * upper or lower dead band. The minimum droop value possible is 0.8%.
     * ```
     *
     * `.google.protobuf.FloatValue underFrequencyDroop = 8;`
     * @return Whether the underFrequencyDroop field is set.
     */
    public fun hasUnderFrequencyDroop(): kotlin.Boolean {
      return _builder.hasUnderFrequencyDroop()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.essmodule.FrequencyRegulation.copy(block: openfmb.essmodule.FrequencyRegulationKt.Dsl.() -> kotlin.Unit): openfmb.essmodule.FrequencyRegulation =
  openfmb.essmodule.FrequencyRegulationKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.essmodule.FrequencyRegulationOrBuilder.frequencyDeadBandMinusOrNull: com.google.protobuf.FloatValue?
  get() = if (hasFrequencyDeadBandMinus()) getFrequencyDeadBandMinus() else null

public val openfmb.essmodule.FrequencyRegulationOrBuilder.frequencyDeadBandPlusOrNull: com.google.protobuf.FloatValue?
  get() = if (hasFrequencyDeadBandPlus()) getFrequencyDeadBandPlus() else null

public val openfmb.essmodule.FrequencyRegulationOrBuilder.frequencyRegulationCtlOrNull: com.google.protobuf.BoolValue?
  get() = if (hasFrequencyRegulationCtl()) getFrequencyRegulationCtl() else null

public val openfmb.essmodule.FrequencyRegulationOrBuilder.frequencySetPointOrNull: com.google.protobuf.FloatValue?
  get() = if (hasFrequencySetPoint()) getFrequencySetPoint() else null

public val openfmb.essmodule.FrequencyRegulationOrBuilder.gridFrequencyStableBandMinusOrNull: com.google.protobuf.FloatValue?
  get() = if (hasGridFrequencyStableBandMinus()) getGridFrequencyStableBandMinus() else null

public val openfmb.essmodule.FrequencyRegulationOrBuilder.gridFrequencyStableBandPlusOrNull: com.google.protobuf.FloatValue?
  get() = if (hasGridFrequencyStableBandPlus()) getGridFrequencyStableBandPlus() else null

public val openfmb.essmodule.FrequencyRegulationOrBuilder.overFrequencyDroopOrNull: com.google.protobuf.FloatValue?
  get() = if (hasOverFrequencyDroop()) getOverFrequencyDroop() else null

public val openfmb.essmodule.FrequencyRegulationOrBuilder.underFrequencyDroopOrNull: com.google.protobuf.FloatValue?
  get() = if (hasUnderFrequencyDroop()) getUnderFrequencyDroop() else null

