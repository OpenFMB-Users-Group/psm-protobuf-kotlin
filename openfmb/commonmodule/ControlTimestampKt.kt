// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializecontrolTimestamp")
public inline fun controlTimestamp(block: openfmb.commonmodule.ControlTimestampKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ControlTimestamp =
  openfmb.commonmodule.ControlTimestampKt.Dsl._create(openfmb.commonmodule.ControlTimestamp.newBuilder()).apply { block() }._build()
/**
 * ```
 * UTC time with the epoch of midnight (00:00:00) of 1970-01-01. The presentation is defined in the
 * SCSMs.The NULL time stamp has all fields set to 0 (zero).The relation between a timestamp value, the
 * synchronization of an internal time with an external time source (for example, UTC time), and other
 * information related to time model are available as requirements in Clause 21.  ControlTimestamp is a
 * timestamp for future time point so it does not contain the time quality as the one contained in the
 * normal Timestamp data type.
 * ```
 *
 * Protobuf type `commonmodule.ControlTimestamp`
 */
public object ControlTimestampKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.ControlTimestamp.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.ControlTimestamp.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.ControlTimestamp = _builder.build()

    /**
     * ```
     * Second since epoch (1970-01-01T00:00:00Z)
     * ```
     *
     * `uint64 seconds = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var seconds: kotlin.Long
      @kotlin.jvm.JvmName("getSeconds")
        get() = _builder.seconds
      @kotlin.jvm.JvmName("setSeconds")
        set(value) {
        _builder.seconds = value
      }
    /**
     * ```
     * Second since epoch (1970-01-01T00:00:00Z)
     * ```
     *
     * `uint64 seconds = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearSeconds() {
      _builder.clearSeconds()
    }

    /**
     * ```
     * Partial (sub) second expressed in nanoseconds (10<sup>-9</sup> second).
     * ```
     *
     * `uint32 nanoseconds = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var nanoseconds: kotlin.Int
      @kotlin.jvm.JvmName("getNanoseconds")
        get() = _builder.nanoseconds
      @kotlin.jvm.JvmName("setNanoseconds")
        set(value) {
        _builder.nanoseconds = value
      }
    /**
     * ```
     * Partial (sub) second expressed in nanoseconds (10<sup>-9</sup> second).
     * ```
     *
     * `uint32 nanoseconds = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearNanoseconds() {
      _builder.clearNanoseconds()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.ControlTimestamp.copy(block: `openfmb.commonmodule`.ControlTimestampKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ControlTimestamp =
  `openfmb.commonmodule`.ControlTimestampKt.Dsl._create(this.toBuilder()).apply { block() }._build()

