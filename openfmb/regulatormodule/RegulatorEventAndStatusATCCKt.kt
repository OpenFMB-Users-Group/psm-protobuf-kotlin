// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: regulatormodule/regulatormodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.regulatormodule;

@kotlin.jvm.JvmName("-initializeregulatorEventAndStatusATCC")
public inline fun regulatorEventAndStatusATCC(block: openfmb.regulatormodule.RegulatorEventAndStatusATCCKt.Dsl.() -> kotlin.Unit): openfmb.regulatormodule.RegulatorEventAndStatusATCC =
  openfmb.regulatormodule.RegulatorEventAndStatusATCCKt.Dsl._create(openfmb.regulatormodule.RegulatorEventAndStatusATCC.newBuilder()).apply { block() }._build()
/**
 * ```
 * LN: Automatic tap changer controller   Name: ATCC
 * ```
 *
 * Protobuf type `regulatormodule.RegulatorEventAndStatusATCC`
 */
public object RegulatorEventAndStatusATCCKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.regulatormodule.RegulatorEventAndStatusATCC.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.regulatormodule.RegulatorEventAndStatusATCC.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.regulatormodule.RegulatorEventAndStatusATCC = _builder.build()

    /**
     * ```
     * Centre of voltage control bandwidth (forward power flow presumed).
     * ```
     *
     * `.commonmodule.ASG BndCtr = 1;`
     */
    public var bndCtr: openfmb.commonmodule.ASG
      @JvmName("getBndCtr")
      get() = _builder.getBndCtr()
      @JvmName("setBndCtr")
      set(value) {
        _builder.setBndCtr(value)
      }
    /**
     * ```
     * Centre of voltage control bandwidth (forward power flow presumed).
     * ```
     *
     * `.commonmodule.ASG BndCtr = 1;`
     */
    public fun clearBndCtr() {
      _builder.clearBndCtr()
    }
    /**
     * ```
     * Centre of voltage control bandwidth (forward power flow presumed).
     * ```
     *
     * `.commonmodule.ASG BndCtr = 1;`
     * @return Whether the bndCtr field is set.
     */
    public fun hasBndCtr(): kotlin.Boolean {
      return _builder.hasBndCtr()
    }

    /**
     * ```
     * Control (secondary) voltage bandwidth (i.e., range), given either as voltage value or percentage
     * of the nominal voltage (forward power flow presumed).
     * ```
     *
     * `.commonmodule.ASG BndWid = 2;`
     */
    public var bndWid: openfmb.commonmodule.ASG
      @JvmName("getBndWid")
      get() = _builder.getBndWid()
      @JvmName("setBndWid")
      set(value) {
        _builder.setBndWid(value)
      }
    /**
     * ```
     * Control (secondary) voltage bandwidth (i.e., range), given either as voltage value or percentage
     * of the nominal voltage (forward power flow presumed).
     * ```
     *
     * `.commonmodule.ASG BndWid = 2;`
     */
    public fun clearBndWid() {
      _builder.clearBndWid()
    }
    /**
     * ```
     * Control (secondary) voltage bandwidth (i.e., range), given either as voltage value or percentage
     * of the nominal voltage (forward power flow presumed).
     * ```
     *
     * `.commonmodule.ASG BndWid = 2;`
     * @return Whether the bndWid field is set.
     */
    public fun hasBndWid(): kotlin.Boolean {
      return _builder.hasBndWid()
    }

    /**
     * ```
     * Compensated Voltage Secondary compared with set point plus or minus Bandwidth
     * ```
     *
     * `.commonmodule.PhaseSPS BndWidHi = 3;`
     */
    public var bndWidHi: openfmb.commonmodule.PhaseSPS
      @JvmName("getBndWidHi")
      get() = _builder.getBndWidHi()
      @JvmName("setBndWidHi")
      set(value) {
        _builder.setBndWidHi(value)
      }
    /**
     * ```
     * Compensated Voltage Secondary compared with set point plus or minus Bandwidth
     * ```
     *
     * `.commonmodule.PhaseSPS BndWidHi = 3;`
     */
    public fun clearBndWidHi() {
      _builder.clearBndWidHi()
    }
    /**
     * ```
     * Compensated Voltage Secondary compared with set point plus or minus Bandwidth
     * ```
     *
     * `.commonmodule.PhaseSPS BndWidHi = 3;`
     * @return Whether the bndWidHi field is set.
     */
    public fun hasBndWidHi(): kotlin.Boolean {
      return _builder.hasBndWidHi()
    }

    /**
     * ```
     * Compensated Voltage Secondary compared with set point plus or minus Bandwidth
     * ```
     *
     * `.commonmodule.PhaseSPS BndWidLo = 4;`
     */
    public var bndWidLo: openfmb.commonmodule.PhaseSPS
      @JvmName("getBndWidLo")
      get() = _builder.getBndWidLo()
      @JvmName("setBndWidLo")
      set(value) {
        _builder.setBndWidLo(value)
      }
    /**
     * ```
     * Compensated Voltage Secondary compared with set point plus or minus Bandwidth
     * ```
     *
     * `.commonmodule.PhaseSPS BndWidLo = 4;`
     */
    public fun clearBndWidLo() {
      _builder.clearBndWidLo()
    }
    /**
     * ```
     * Compensated Voltage Secondary compared with set point plus or minus Bandwidth
     * ```
     *
     * `.commonmodule.PhaseSPS BndWidLo = 4;`
     * @return Whether the bndWidLo field is set.
     */
    public fun hasBndWidLo(): kotlin.Boolean {
      return _builder.hasBndWidLo()
    }

    /**
     * ```
     * Current Power Direction is the direction that regulator is regulating.
     * ```
     *
     * `.commonmodule.PhaseSPS DirCtlRev = 5;`
     */
    public var dirCtlRev: openfmb.commonmodule.PhaseSPS
      @JvmName("getDirCtlRev")
      get() = _builder.getDirCtlRev()
      @JvmName("setDirCtlRev")
      set(value) {
        _builder.setDirCtlRev(value)
      }
    /**
     * ```
     * Current Power Direction is the direction that regulator is regulating.
     * ```
     *
     * `.commonmodule.PhaseSPS DirCtlRev = 5;`
     */
    public fun clearDirCtlRev() {
      _builder.clearDirCtlRev()
    }
    /**
     * ```
     * Current Power Direction is the direction that regulator is regulating.
     * ```
     *
     * `.commonmodule.PhaseSPS DirCtlRev = 5;`
     * @return Whether the dirCtlRev field is set.
     */
    public fun hasDirCtlRev(): kotlin.Boolean {
      return _builder.hasDirCtlRev()
    }

    /**
     * ```
     * True if direction is indeterminate.
     * ```
     *
     * `.commonmodule.PhaseSPS DirIndt = 6;`
     */
    public var dirIndt: openfmb.commonmodule.PhaseSPS
      @JvmName("getDirIndt")
      get() = _builder.getDirIndt()
      @JvmName("setDirIndt")
      set(value) {
        _builder.setDirIndt(value)
      }
    /**
     * ```
     * True if direction is indeterminate.
     * ```
     *
     * `.commonmodule.PhaseSPS DirIndt = 6;`
     */
    public fun clearDirIndt() {
      _builder.clearDirIndt()
    }
    /**
     * ```
     * True if direction is indeterminate.
     * ```
     *
     * `.commonmodule.PhaseSPS DirIndt = 6;`
     * @return Whether the dirIndt field is set.
     */
    public fun hasDirIndt(): kotlin.Boolean {
      return _builder.hasDirIndt()
    }

    /**
     * ```
     * True if the current direction is the same as the System Direction
     * ```
     *
     * `.commonmodule.PhaseSPS DirRev = 7;`
     */
    public var dirRev: openfmb.commonmodule.PhaseSPS
      @JvmName("getDirRev")
      get() = _builder.getDirRev()
      @JvmName("setDirRev")
      set(value) {
        _builder.setDirRev(value)
      }
    /**
     * ```
     * True if the current direction is the same as the System Direction
     * ```
     *
     * `.commonmodule.PhaseSPS DirRev = 7;`
     */
    public fun clearDirRev() {
      _builder.clearDirRev()
    }
    /**
     * ```
     * True if the current direction is the same as the System Direction
     * ```
     *
     * `.commonmodule.PhaseSPS DirRev = 7;`
     * @return Whether the dirRev field is set.
     */
    public fun hasDirRev(): kotlin.Boolean {
      return _builder.hasDirRev()
    }

    /**
     * ```
     * Line drop voltage due to line resistance component (forward power flow presumed) at rated current.
     * ```
     *
     * `.commonmodule.ASG LDCR = 8;`
     */
    public var lDCR: openfmb.commonmodule.ASG
      @JvmName("getLDCR")
      get() = _builder.getLDCR()
      @JvmName("setLDCR")
      set(value) {
        _builder.setLDCR(value)
      }
    /**
     * ```
     * Line drop voltage due to line resistance component (forward power flow presumed) at rated current.
     * ```
     *
     * `.commonmodule.ASG LDCR = 8;`
     */
    public fun clearLDCR() {
      _builder.clearLDCR()
    }
    /**
     * ```
     * Line drop voltage due to line resistance component (forward power flow presumed) at rated current.
     * ```
     *
     * `.commonmodule.ASG LDCR = 8;`
     * @return Whether the lDCR field is set.
     */
    public fun hasLDCR(): kotlin.Boolean {
      return _builder.hasLDCR()
    }

    /**
     * ```
     * Line drop voltage due to line reactance component (forward power flow presumed) at rated current.
     * ```
     *
     * `.commonmodule.ASG LDCX = 9;`
     */
    public var lDCX: openfmb.commonmodule.ASG
      @JvmName("getLDCX")
      get() = _builder.getLDCX()
      @JvmName("setLDCX")
      set(value) {
        _builder.setLDCX(value)
      }
    /**
     * ```
     * Line drop voltage due to line reactance component (forward power flow presumed) at rated current.
     * ```
     *
     * `.commonmodule.ASG LDCX = 9;`
     */
    public fun clearLDCX() {
      _builder.clearLDCX()
    }
    /**
     * ```
     * Line drop voltage due to line reactance component (forward power flow presumed) at rated current.
     * ```
     *
     * `.commonmodule.ASG LDCX = 9;`
     * @return Whether the lDCX field is set.
     */
    public fun hasLDCX(): kotlin.Boolean {
      return _builder.hasLDCX()
    }

    /**
     * ```
     * (controllable) If true, transformers operate in parallel, otherwise they operate independently.
     * ```
     *
     * `.commonmodule.StatusSPS ParOp = 10;`
     */
    public var parOp: openfmb.commonmodule.StatusSPS
      @JvmName("getParOp")
      get() = _builder.getParOp()
      @JvmName("setParOp")
      set(value) {
        _builder.setParOp(value)
      }
    /**
     * ```
     * (controllable) If true, transformers operate in parallel, otherwise they operate independently.
     * ```
     *
     * `.commonmodule.StatusSPS ParOp = 10;`
     */
    public fun clearParOp() {
      _builder.clearParOp()
    }
    /**
     * ```
     * (controllable) If true, transformers operate in parallel, otherwise they operate independently.
     * ```
     *
     * `.commonmodule.StatusSPS ParOp = 10;`
     * @return Whether the parOp field is set.
     */
    public fun hasParOp(): kotlin.Boolean {
      return _builder.hasParOp()
    }

    /**
     * ```
     * Ramp rates
     * ```
     *
     * `.commonmodule.RampRate rampRates = 11;`
     */
    public var rampRates: openfmb.commonmodule.RampRate
      @JvmName("getRampRates")
      get() = _builder.getRampRates()
      @JvmName("setRampRates")
      set(value) {
        _builder.setRampRates(value)
      }
    /**
     * ```
     * Ramp rates
     * ```
     *
     * `.commonmodule.RampRate rampRates = 11;`
     */
    public fun clearRampRates() {
      _builder.clearRampRates()
    }
    /**
     * ```
     * Ramp rates
     * ```
     *
     * `.commonmodule.RampRate rampRates = 11;`
     * @return Whether the rampRates field is set.
     */
    public fun hasRampRates(): kotlin.Boolean {
      return _builder.hasRampRates()
    }

    /**
     * ```
     * State
     * ```
     *
     * `.commonmodule.Optional_StateKind state = 12;`
     */
    public var state: openfmb.commonmodule.Optional_StateKind
      @JvmName("getState")
      get() = _builder.getState()
      @JvmName("setState")
      set(value) {
        _builder.setState(value)
      }
    /**
     * ```
     * State
     * ```
     *
     * `.commonmodule.Optional_StateKind state = 12;`
     */
    public fun clearState() {
      _builder.clearState()
    }
    /**
     * ```
     * State
     * ```
     *
     * `.commonmodule.Optional_StateKind state = 12;`
     * @return Whether the state field is set.
     */
    public fun hasState(): kotlin.Boolean {
      return _builder.hasState()
    }

    /**
     * ```
     * OpenFMB extension:  Status for the time to wait before operating (CtrlDlTmms)
     * ```
     *
     * `.commonmodule.StatusINC StDlTmms = 13;`
     */
    public var stDlTmms: openfmb.commonmodule.StatusINC
      @JvmName("getStDlTmms")
      get() = _builder.getStDlTmms()
      @JvmName("setStDlTmms")
      set(value) {
        _builder.setStDlTmms(value)
      }
    /**
     * ```
     * OpenFMB extension:  Status for the time to wait before operating (CtrlDlTmms)
     * ```
     *
     * `.commonmodule.StatusINC StDlTmms = 13;`
     */
    public fun clearStDlTmms() {
      _builder.clearStDlTmms()
    }
    /**
     * ```
     * OpenFMB extension:  Status for the time to wait before operating (CtrlDlTmms)
     * ```
     *
     * `.commonmodule.StatusINC StDlTmms = 13;`
     * @return Whether the stDlTmms field is set.
     */
    public fun hasStDlTmms(): kotlin.Boolean {
      return _builder.hasStDlTmms()
    }

    /**
     * ```
     * If true, there was an error in tap position change, or in tap indication (for instance, wrong
     * Binary Coded Decimal (BCD) code).
     * ```
     *
     * `.commonmodule.StatusSPS TapOpErr = 14;`
     */
    public var tapOpErr: openfmb.commonmodule.StatusSPS
      @JvmName("getTapOpErr")
      get() = _builder.getTapOpErr()
      @JvmName("setTapOpErr")
      set(value) {
        _builder.setTapOpErr(value)
      }
    /**
     * ```
     * If true, there was an error in tap position change, or in tap indication (for instance, wrong
     * Binary Coded Decimal (BCD) code).
     * ```
     *
     * `.commonmodule.StatusSPS TapOpErr = 14;`
     */
    public fun clearTapOpErr() {
      _builder.clearTapOpErr()
    }
    /**
     * ```
     * If true, there was an error in tap position change, or in tap indication (for instance, wrong
     * Binary Coded Decimal (BCD) code).
     * ```
     *
     * `.commonmodule.StatusSPS TapOpErr = 14;`
     * @return Whether the tapOpErr field is set.
     */
    public fun hasTapOpErr(): kotlin.Boolean {
      return _builder.hasTapOpErr()
    }

    /**
     * ```
     * (controllable) Tap position change to the specified value.
     * ```
     *
     * `.commonmodule.PhaseINS TapPos = 15;`
     */
    public var tapPos: openfmb.commonmodule.PhaseINS
      @JvmName("getTapPos")
      get() = _builder.getTapPos()
      @JvmName("setTapPos")
      set(value) {
        _builder.setTapPos(value)
      }
    /**
     * ```
     * (controllable) Tap position change to the specified value.
     * ```
     *
     * `.commonmodule.PhaseINS TapPos = 15;`
     */
    public fun clearTapPos() {
      _builder.clearTapPos()
    }
    /**
     * ```
     * (controllable) Tap position change to the specified value.
     * ```
     *
     * `.commonmodule.PhaseINS TapPos = 15;`
     * @return Whether the tapPos field is set.
     */
    public fun hasTapPos(): kotlin.Boolean {
      return _builder.hasTapPos()
    }

    /**
     * ```
     * Load Voltage Secondary compared with VolLmtHi
     * ```
     *
     * `.commonmodule.PhaseSPS VolLmtHi = 16;`
     */
    public var volLmtHi: openfmb.commonmodule.PhaseSPS
      @JvmName("getVolLmtHi")
      get() = _builder.getVolLmtHi()
      @JvmName("setVolLmtHi")
      set(value) {
        _builder.setVolLmtHi(value)
      }
    /**
     * ```
     * Load Voltage Secondary compared with VolLmtHi
     * ```
     *
     * `.commonmodule.PhaseSPS VolLmtHi = 16;`
     */
    public fun clearVolLmtHi() {
      _builder.clearVolLmtHi()
    }
    /**
     * ```
     * Load Voltage Secondary compared with VolLmtHi
     * ```
     *
     * `.commonmodule.PhaseSPS VolLmtHi = 16;`
     * @return Whether the volLmtHi field is set.
     */
    public fun hasVolLmtHi(): kotlin.Boolean {
      return _builder.hasVolLmtHi()
    }

    /**
     * ```
     * Load Voltage Secondary compared with VolLmtLo
     * ```
     *
     * `.commonmodule.PhaseSPS VolLmtLo = 17;`
     */
    public var volLmtLo: openfmb.commonmodule.PhaseSPS
      @JvmName("getVolLmtLo")
      get() = _builder.getVolLmtLo()
      @JvmName("setVolLmtLo")
      set(value) {
        _builder.setVolLmtLo(value)
      }
    /**
     * ```
     * Load Voltage Secondary compared with VolLmtLo
     * ```
     *
     * `.commonmodule.PhaseSPS VolLmtLo = 17;`
     */
    public fun clearVolLmtLo() {
      _builder.clearVolLmtLo()
    }
    /**
     * ```
     * Load Voltage Secondary compared with VolLmtLo
     * ```
     *
     * `.commonmodule.PhaseSPS VolLmtLo = 17;`
     * @return Whether the volLmtLo field is set.
     */
    public fun hasVolLmtLo(): kotlin.Boolean {
      return _builder.hasVolLmtLo()
    }

    /**
     * ```
     * (controllable) Voltage setpoint. Analog value (MX) feeds back the setpoint of the controller.
     * ```
     *
     * `.commonmodule.PhaseAPC VolSpt = 18;`
     */
    public var volSpt: openfmb.commonmodule.PhaseAPC
      @JvmName("getVolSpt")
      get() = _builder.getVolSpt()
      @JvmName("setVolSpt")
      set(value) {
        _builder.setVolSpt(value)
      }
    /**
     * ```
     * (controllable) Voltage setpoint. Analog value (MX) feeds back the setpoint of the controller.
     * ```
     *
     * `.commonmodule.PhaseAPC VolSpt = 18;`
     */
    public fun clearVolSpt() {
      _builder.clearVolSpt()
    }
    /**
     * ```
     * (controllable) Voltage setpoint. Analog value (MX) feeds back the setpoint of the controller.
     * ```
     *
     * `.commonmodule.PhaseAPC VolSpt = 18;`
     * @return Whether the volSpt field is set.
     */
    public fun hasVolSpt(): kotlin.Boolean {
      return _builder.hasVolSpt()
    }

    /**
     * ```
     * Voltage set point status
     * ```
     *
     * `.commonmodule.StatusSPS voltageSetPointEnabled = 19;`
     */
    public var voltageSetPointEnabled: openfmb.commonmodule.StatusSPS
      @JvmName("getVoltageSetPointEnabled")
      get() = _builder.getVoltageSetPointEnabled()
      @JvmName("setVoltageSetPointEnabled")
      set(value) {
        _builder.setVoltageSetPointEnabled(value)
      }
    /**
     * ```
     * Voltage set point status
     * ```
     *
     * `.commonmodule.StatusSPS voltageSetPointEnabled = 19;`
     */
    public fun clearVoltageSetPointEnabled() {
      _builder.clearVoltageSetPointEnabled()
    }
    /**
     * ```
     * Voltage set point status
     * ```
     *
     * `.commonmodule.StatusSPS voltageSetPointEnabled = 19;`
     * @return Whether the voltageSetPointEnabled field is set.
     */
    public fun hasVoltageSetPointEnabled(): kotlin.Boolean {
      return _builder.hasVoltageSetPointEnabled()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun openfmb.regulatormodule.RegulatorEventAndStatusATCC.copy(block: openfmb.regulatormodule.RegulatorEventAndStatusATCCKt.Dsl.() -> kotlin.Unit): openfmb.regulatormodule.RegulatorEventAndStatusATCC =
  openfmb.regulatormodule.RegulatorEventAndStatusATCCKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.regulatormodule.RegulatorEventAndStatusATCCOrBuilder.bndCtrOrNull: openfmb.commonmodule.ASG?
  get() = if (hasBndCtr()) getBndCtr() else null

public val openfmb.regulatormodule.RegulatorEventAndStatusATCCOrBuilder.bndWidOrNull: openfmb.commonmodule.ASG?
  get() = if (hasBndWid()) getBndWid() else null

public val openfmb.regulatormodule.RegulatorEventAndStatusATCCOrBuilder.bndWidHiOrNull: openfmb.commonmodule.PhaseSPS?
  get() = if (hasBndWidHi()) getBndWidHi() else null

public val openfmb.regulatormodule.RegulatorEventAndStatusATCCOrBuilder.bndWidLoOrNull: openfmb.commonmodule.PhaseSPS?
  get() = if (hasBndWidLo()) getBndWidLo() else null

public val openfmb.regulatormodule.RegulatorEventAndStatusATCCOrBuilder.dirCtlRevOrNull: openfmb.commonmodule.PhaseSPS?
  get() = if (hasDirCtlRev()) getDirCtlRev() else null

public val openfmb.regulatormodule.RegulatorEventAndStatusATCCOrBuilder.dirIndtOrNull: openfmb.commonmodule.PhaseSPS?
  get() = if (hasDirIndt()) getDirIndt() else null

public val openfmb.regulatormodule.RegulatorEventAndStatusATCCOrBuilder.dirRevOrNull: openfmb.commonmodule.PhaseSPS?
  get() = if (hasDirRev()) getDirRev() else null

public val openfmb.regulatormodule.RegulatorEventAndStatusATCCOrBuilder.lDCROrNull: openfmb.commonmodule.ASG?
  get() = if (hasLDCR()) getLDCR() else null

public val openfmb.regulatormodule.RegulatorEventAndStatusATCCOrBuilder.lDCXOrNull: openfmb.commonmodule.ASG?
  get() = if (hasLDCX()) getLDCX() else null

public val openfmb.regulatormodule.RegulatorEventAndStatusATCCOrBuilder.parOpOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasParOp()) getParOp() else null

public val openfmb.regulatormodule.RegulatorEventAndStatusATCCOrBuilder.rampRatesOrNull: openfmb.commonmodule.RampRate?
  get() = if (hasRampRates()) getRampRates() else null

public val openfmb.regulatormodule.RegulatorEventAndStatusATCCOrBuilder.stateOrNull: openfmb.commonmodule.Optional_StateKind?
  get() = if (hasState()) getState() else null

public val openfmb.regulatormodule.RegulatorEventAndStatusATCCOrBuilder.stDlTmmsOrNull: openfmb.commonmodule.StatusINC?
  get() = if (hasStDlTmms()) getStDlTmms() else null

public val openfmb.regulatormodule.RegulatorEventAndStatusATCCOrBuilder.tapOpErrOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasTapOpErr()) getTapOpErr() else null

public val openfmb.regulatormodule.RegulatorEventAndStatusATCCOrBuilder.tapPosOrNull: openfmb.commonmodule.PhaseINS?
  get() = if (hasTapPos()) getTapPos() else null

public val openfmb.regulatormodule.RegulatorEventAndStatusATCCOrBuilder.volLmtHiOrNull: openfmb.commonmodule.PhaseSPS?
  get() = if (hasVolLmtHi()) getVolLmtHi() else null

public val openfmb.regulatormodule.RegulatorEventAndStatusATCCOrBuilder.volLmtLoOrNull: openfmb.commonmodule.PhaseSPS?
  get() = if (hasVolLmtLo()) getVolLmtLo() else null

public val openfmb.regulatormodule.RegulatorEventAndStatusATCCOrBuilder.volSptOrNull: openfmb.commonmodule.PhaseAPC?
  get() = if (hasVolSpt()) getVolSpt() else null

public val openfmb.regulatormodule.RegulatorEventAndStatusATCCOrBuilder.voltageSetPointEnabledOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasVoltageSetPointEnabled()) getVoltageSetPointEnabled() else null

