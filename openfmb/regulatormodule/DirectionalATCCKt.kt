//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: regulatormodule/regulatormodule.proto

package openfmb.regulatormodule;

@kotlin.jvm.JvmName("-initializedirectionalATCC")
public inline fun directionalATCC(block: openfmb.regulatormodule.DirectionalATCCKt.Dsl.() -> kotlin.Unit): openfmb.regulatormodule.DirectionalATCC =
  openfmb.regulatormodule.DirectionalATCCKt.Dsl._create(openfmb.regulatormodule.DirectionalATCC.newBuilder()).apply { block() }._build()
public object DirectionalATCCKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.regulatormodule.DirectionalATCC.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.regulatormodule.DirectionalATCC.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.regulatormodule.DirectionalATCC = _builder.build()

    /**
     * <pre>
     * Control (secondary) voltage bandwidth (i.e., range), given either as voltage value or percentage
     * of the nominal voltage (forward power flow presumed).
     * </pre>
     *
     * <code>.commonmodule.PhaseAPC BndWid = 1;</code>
     */
    public var bndWid: openfmb.commonmodule.PhaseAPC
      @JvmName("getBndWid")
      get() = _builder.getBndWid()
      @JvmName("setBndWid")
      set(value) {
        _builder.setBndWid(value)
      }
    /**
     * <pre>
     * Control (secondary) voltage bandwidth (i.e., range), given either as voltage value or percentage
     * of the nominal voltage (forward power flow presumed).
     * </pre>
     *
     * <code>.commonmodule.PhaseAPC BndWid = 1;</code>
     */
    public fun clearBndWid() {
      _builder.clearBndWid()
    }
    /**
     * <pre>
     * Control (secondary) voltage bandwidth (i.e., range), given either as voltage value or percentage
     * of the nominal voltage (forward power flow presumed).
     * </pre>
     *
     * <code>.commonmodule.PhaseAPC BndWid = 1;</code>
     * @return Whether the bndWid field is set.
     */
    public fun hasBndWid(): kotlin.Boolean {
      return _builder.hasBndWid()
    }

    /**
     * <pre>
     * Time to wait before operating, after reaching the control point (forward power flow presumed).
     * </pre>
     *
     * <code>.commonmodule.PhaseISC CtlDlTmms = 2;</code>
     */
    public var ctlDlTmms: openfmb.commonmodule.PhaseISC
      @JvmName("getCtlDlTmms")
      get() = _builder.getCtlDlTmms()
      @JvmName("setCtlDlTmms")
      set(value) {
        _builder.setCtlDlTmms(value)
      }
    /**
     * <pre>
     * Time to wait before operating, after reaching the control point (forward power flow presumed).
     * </pre>
     *
     * <code>.commonmodule.PhaseISC CtlDlTmms = 2;</code>
     */
    public fun clearCtlDlTmms() {
      _builder.clearCtlDlTmms()
    }
    /**
     * <pre>
     * Time to wait before operating, after reaching the control point (forward power flow presumed).
     * </pre>
     *
     * <code>.commonmodule.PhaseISC CtlDlTmms = 2;</code>
     * @return Whether the ctlDlTmms field is set.
     */
    public fun hasCtlDlTmms(): kotlin.Boolean {
      return _builder.hasCtlDlTmms()
    }

    /**
     * <pre>
     * Line drop voltage due to line resistance component (forward power flow presumed) at rated current.
     * </pre>
     *
     * <code>.commonmodule.PhaseAPC LDCR = 3;</code>
     */
    public var lDCR: openfmb.commonmodule.PhaseAPC
      @JvmName("getLDCR")
      get() = _builder.getLDCR()
      @JvmName("setLDCR")
      set(value) {
        _builder.setLDCR(value)
      }
    /**
     * <pre>
     * Line drop voltage due to line resistance component (forward power flow presumed) at rated current.
     * </pre>
     *
     * <code>.commonmodule.PhaseAPC LDCR = 3;</code>
     */
    public fun clearLDCR() {
      _builder.clearLDCR()
    }
    /**
     * <pre>
     * Line drop voltage due to line resistance component (forward power flow presumed) at rated current.
     * </pre>
     *
     * <code>.commonmodule.PhaseAPC LDCR = 3;</code>
     * @return Whether the lDCR field is set.
     */
    public fun hasLDCR(): kotlin.Boolean {
      return _builder.hasLDCR()
    }

    /**
     * <pre>
     * Line drop voltage due to line reactance component (forward power flow presumed) at rated current.
     * </pre>
     *
     * <code>.commonmodule.PhaseAPC LDCX = 4;</code>
     */
    public var lDCX: openfmb.commonmodule.PhaseAPC
      @JvmName("getLDCX")
      get() = _builder.getLDCX()
      @JvmName("setLDCX")
      set(value) {
        _builder.setLDCX(value)
      }
    /**
     * <pre>
     * Line drop voltage due to line reactance component (forward power flow presumed) at rated current.
     * </pre>
     *
     * <code>.commonmodule.PhaseAPC LDCX = 4;</code>
     */
    public fun clearLDCX() {
      _builder.clearLDCX()
    }
    /**
     * <pre>
     * Line drop voltage due to line reactance component (forward power flow presumed) at rated current.
     * </pre>
     *
     * <code>.commonmodule.PhaseAPC LDCX = 4;</code>
     * @return Whether the lDCX field is set.
     */
    public fun hasLDCX(): kotlin.Boolean {
      return _builder.hasLDCX()
    }

    /**
     * <pre>
     * (controllable) Voltage setpoint. Analog value (MX) feeds back the setpoint of the controller.
     * </pre>
     *
     * <code>.commonmodule.PhaseAPC VolSpt = 5;</code>
     */
    public var volSpt: openfmb.commonmodule.PhaseAPC
      @JvmName("getVolSpt")
      get() = _builder.getVolSpt()
      @JvmName("setVolSpt")
      set(value) {
        _builder.setVolSpt(value)
      }
    /**
     * <pre>
     * (controllable) Voltage setpoint. Analog value (MX) feeds back the setpoint of the controller.
     * </pre>
     *
     * <code>.commonmodule.PhaseAPC VolSpt = 5;</code>
     */
    public fun clearVolSpt() {
      _builder.clearVolSpt()
    }
    /**
     * <pre>
     * (controllable) Voltage setpoint. Analog value (MX) feeds back the setpoint of the controller.
     * </pre>
     *
     * <code>.commonmodule.PhaseAPC VolSpt = 5;</code>
     * @return Whether the volSpt field is set.
     */
    public fun hasVolSpt(): kotlin.Boolean {
      return _builder.hasVolSpt()
    }

    /**
     * <pre>
     * Enable voltage set point
     * </pre>
     *
     * <code>.commonmodule.PhaseDPC voltageSetPointEnabled = 6;</code>
     */
    public var voltageSetPointEnabled: openfmb.commonmodule.PhaseDPC
      @JvmName("getVoltageSetPointEnabled")
      get() = _builder.getVoltageSetPointEnabled()
      @JvmName("setVoltageSetPointEnabled")
      set(value) {
        _builder.setVoltageSetPointEnabled(value)
      }
    /**
     * <pre>
     * Enable voltage set point
     * </pre>
     *
     * <code>.commonmodule.PhaseDPC voltageSetPointEnabled = 6;</code>
     */
    public fun clearVoltageSetPointEnabled() {
      _builder.clearVoltageSetPointEnabled()
    }
    /**
     * <pre>
     * Enable voltage set point
     * </pre>
     *
     * <code>.commonmodule.PhaseDPC voltageSetPointEnabled = 6;</code>
     * @return Whether the voltageSetPointEnabled field is set.
     */
    public fun hasVoltageSetPointEnabled(): kotlin.Boolean {
      return _builder.hasVoltageSetPointEnabled()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.regulatormodule.DirectionalATCC.copy(block: openfmb.regulatormodule.DirectionalATCCKt.Dsl.() -> kotlin.Unit): openfmb.regulatormodule.DirectionalATCC =
  openfmb.regulatormodule.DirectionalATCCKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val openfmb.regulatormodule.DirectionalATCCOrBuilder.bndWidOrNull: openfmb.commonmodule.PhaseAPC?
  get() = if (hasBndWid()) getBndWid() else null

val openfmb.regulatormodule.DirectionalATCCOrBuilder.ctlDlTmmsOrNull: openfmb.commonmodule.PhaseISC?
  get() = if (hasCtlDlTmms()) getCtlDlTmms() else null

val openfmb.regulatormodule.DirectionalATCCOrBuilder.lDCROrNull: openfmb.commonmodule.PhaseAPC?
  get() = if (hasLDCR()) getLDCR() else null

val openfmb.regulatormodule.DirectionalATCCOrBuilder.lDCXOrNull: openfmb.commonmodule.PhaseAPC?
  get() = if (hasLDCX()) getLDCX() else null

val openfmb.regulatormodule.DirectionalATCCOrBuilder.volSptOrNull: openfmb.commonmodule.PhaseAPC?
  get() = if (hasVolSpt()) getVolSpt() else null

val openfmb.regulatormodule.DirectionalATCCOrBuilder.voltageSetPointEnabledOrNull: openfmb.commonmodule.PhaseDPC?
  get() = if (hasVoltageSetPointEnabled()) getVoltageSetPointEnabled() else null

