// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializerampRate")
public inline fun rampRate(block: openfmb.commonmodule.RampRateKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.RampRate =
  openfmb.commonmodule.RampRateKt.Dsl._create(openfmb.commonmodule.RampRate.newBuilder()).apply { block() }._build()
/**
 * ```
 * Grid connect mode kind
 * ```
 *
 * Protobuf type `commonmodule.RampRate`
 */
public object RampRateKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.RampRate.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.RampRate.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.RampRate = _builder.build()

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.FloatValue negativeReactivePowerKVArPerMin = 1;`
     */
    public var negativeReactivePowerKVArPerMin: com.google.protobuf.FloatValue
      @JvmName("getNegativeReactivePowerKVArPerMin")
      get() = _builder.getNegativeReactivePowerKVArPerMin()
      @JvmName("setNegativeReactivePowerKVArPerMin")
      set(value) {
        _builder.setNegativeReactivePowerKVArPerMin(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.FloatValue negativeReactivePowerKVArPerMin = 1;`
     */
    public fun clearNegativeReactivePowerKVArPerMin() {
      _builder.clearNegativeReactivePowerKVArPerMin()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.FloatValue negativeReactivePowerKVArPerMin = 1;`
     * @return Whether the negativeReactivePowerKVArPerMin field is set.
     */
    public fun hasNegativeReactivePowerKVArPerMin(): kotlin.Boolean {
      return _builder.hasNegativeReactivePowerKVArPerMin()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.FloatValue negativeRealPowerKWPerMin = 2;`
     */
    public var negativeRealPowerKWPerMin: com.google.protobuf.FloatValue
      @JvmName("getNegativeRealPowerKWPerMin")
      get() = _builder.getNegativeRealPowerKWPerMin()
      @JvmName("setNegativeRealPowerKWPerMin")
      set(value) {
        _builder.setNegativeRealPowerKWPerMin(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.FloatValue negativeRealPowerKWPerMin = 2;`
     */
    public fun clearNegativeRealPowerKWPerMin() {
      _builder.clearNegativeRealPowerKWPerMin()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.FloatValue negativeRealPowerKWPerMin = 2;`
     * @return Whether the negativeRealPowerKWPerMin field is set.
     */
    public fun hasNegativeRealPowerKWPerMin(): kotlin.Boolean {
      return _builder.hasNegativeRealPowerKWPerMin()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.FloatValue positiveReactivePowerKVArPerMin = 3;`
     */
    public var positiveReactivePowerKVArPerMin: com.google.protobuf.FloatValue
      @JvmName("getPositiveReactivePowerKVArPerMin")
      get() = _builder.getPositiveReactivePowerKVArPerMin()
      @JvmName("setPositiveReactivePowerKVArPerMin")
      set(value) {
        _builder.setPositiveReactivePowerKVArPerMin(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.FloatValue positiveReactivePowerKVArPerMin = 3;`
     */
    public fun clearPositiveReactivePowerKVArPerMin() {
      _builder.clearPositiveReactivePowerKVArPerMin()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.FloatValue positiveReactivePowerKVArPerMin = 3;`
     * @return Whether the positiveReactivePowerKVArPerMin field is set.
     */
    public fun hasPositiveReactivePowerKVArPerMin(): kotlin.Boolean {
      return _builder.hasPositiveReactivePowerKVArPerMin()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.FloatValue positiveRealPowerKWPerMin = 4;`
     */
    public var positiveRealPowerKWPerMin: com.google.protobuf.FloatValue
      @JvmName("getPositiveRealPowerKWPerMin")
      get() = _builder.getPositiveRealPowerKWPerMin()
      @JvmName("setPositiveRealPowerKWPerMin")
      set(value) {
        _builder.setPositiveRealPowerKWPerMin(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.FloatValue positiveRealPowerKWPerMin = 4;`
     */
    public fun clearPositiveRealPowerKWPerMin() {
      _builder.clearPositiveRealPowerKWPerMin()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.google.protobuf.FloatValue positiveRealPowerKWPerMin = 4;`
     * @return Whether the positiveRealPowerKWPerMin field is set.
     */
    public fun hasPositiveRealPowerKWPerMin(): kotlin.Boolean {
      return _builder.hasPositiveRealPowerKWPerMin()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun openfmb.commonmodule.RampRate.copy(block: openfmb.commonmodule.RampRateKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.RampRate =
  openfmb.commonmodule.RampRateKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.RampRateOrBuilder.negativeReactivePowerKVArPerMinOrNull: com.google.protobuf.FloatValue?
  get() = if (hasNegativeReactivePowerKVArPerMin()) getNegativeReactivePowerKVArPerMin() else null

public val openfmb.commonmodule.RampRateOrBuilder.negativeRealPowerKWPerMinOrNull: com.google.protobuf.FloatValue?
  get() = if (hasNegativeRealPowerKWPerMin()) getNegativeRealPowerKWPerMin() else null

public val openfmb.commonmodule.RampRateOrBuilder.positiveReactivePowerKVArPerMinOrNull: com.google.protobuf.FloatValue?
  get() = if (hasPositiveReactivePowerKVArPerMin()) getPositiveReactivePowerKVArPerMin() else null

public val openfmb.commonmodule.RampRateOrBuilder.positiveRealPowerKWPerMinOrNull: com.google.protobuf.FloatValue?
  get() = if (hasPositiveRealPowerKWPerMin()) getPositiveRealPowerKWPerMin() else null

