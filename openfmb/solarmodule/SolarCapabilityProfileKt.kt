//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: solarmodule/solarmodule.proto

package openfmb.solarmodule;

@kotlin.jvm.JvmName("-initializesolarCapabilityProfile")
public inline fun solarCapabilityProfile(block: openfmb.solarmodule.SolarCapabilityProfileKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarCapabilityProfile =
  openfmb.solarmodule.SolarCapabilityProfileKt.Dsl._create(openfmb.solarmodule.SolarCapabilityProfile.newBuilder()).apply { block() }._build()
public object SolarCapabilityProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.solarmodule.SolarCapabilityProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.solarmodule.SolarCapabilityProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.solarmodule.SolarCapabilityProfile = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.CapabilityMessageInfo capabilityMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var capabilityMessageInfo: openfmb.commonmodule.CapabilityMessageInfo
      @JvmName("getCapabilityMessageInfo")
      get() = _builder.getCapabilityMessageInfo()
      @JvmName("setCapabilityMessageInfo")
      set(value) {
        _builder.setCapabilityMessageInfo(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.CapabilityMessageInfo capabilityMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearCapabilityMessageInfo() {
      _builder.clearCapabilityMessageInfo()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.CapabilityMessageInfo capabilityMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the capabilityMessageInfo field is set.
     */
    public fun hasCapabilityMessageInfo(): kotlin.Boolean {
      return _builder.hasCapabilityMessageInfo()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.solarmodule.SolarCapability solarCapability = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var solarCapability: openfmb.solarmodule.SolarCapability
      @JvmName("getSolarCapability")
      get() = _builder.getSolarCapability()
      @JvmName("setSolarCapability")
      set(value) {
        _builder.setSolarCapability(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.solarmodule.SolarCapability solarCapability = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearSolarCapability() {
      _builder.clearSolarCapability()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.solarmodule.SolarCapability solarCapability = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @return Whether the solarCapability field is set.
     */
    public fun hasSolarCapability(): kotlin.Boolean {
      return _builder.hasSolarCapability()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var solarInverter: openfmb.solarmodule.SolarInverter
      @JvmName("getSolarInverter")
      get() = _builder.getSolarInverter()
      @JvmName("setSolarInverter")
      set(value) {
        _builder.setSolarInverter(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearSolarInverter() {
      _builder.clearSolarInverter()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @return Whether the solarInverter field is set.
     */
    public fun hasSolarInverter(): kotlin.Boolean {
      return _builder.hasSolarInverter()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.solarmodule.SolarCapabilityProfile.copy(block: openfmb.solarmodule.SolarCapabilityProfileKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarCapabilityProfile =
  openfmb.solarmodule.SolarCapabilityProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val openfmb.solarmodule.SolarCapabilityProfileOrBuilder.capabilityMessageInfoOrNull: openfmb.commonmodule.CapabilityMessageInfo?
  get() = if (hasCapabilityMessageInfo()) getCapabilityMessageInfo() else null

val openfmb.solarmodule.SolarCapabilityProfileOrBuilder.solarCapabilityOrNull: openfmb.solarmodule.SolarCapability?
  get() = if (hasSolarCapability()) getSolarCapability() else null

val openfmb.solarmodule.SolarCapabilityProfileOrBuilder.solarInverterOrNull: openfmb.solarmodule.SolarInverter?
  get() = if (hasSolarInverter()) getSolarInverter() else null

