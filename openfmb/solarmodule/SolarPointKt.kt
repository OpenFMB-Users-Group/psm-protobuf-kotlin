// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: solarmodule/solarmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.solarmodule;

@kotlin.jvm.JvmName("-initializesolarPoint")
public inline fun solarPoint(block: openfmb.solarmodule.SolarPointKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarPoint =
  openfmb.solarmodule.SolarPointKt.Dsl._create(openfmb.solarmodule.SolarPoint.newBuilder()).apply { block() }._build()
/**
 * ```
 * Point definition (Point)
 * ```
 *
 * Protobuf type `solarmodule.SolarPoint`
 */
public object SolarPointKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.solarmodule.SolarPoint.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.solarmodule.SolarPoint.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.solarmodule.SolarPoint = _builder.build()

    /**
     * ```
     * Grid connect mode
     * ```
     *
     * `.commonmodule.ENG_GridConnectModeKind mode = 2;`
     */
    public var mode: openfmb.commonmodule.ENG_GridConnectModeKind
      @JvmName("getMode")
      get() = _builder.getMode()
      @JvmName("setMode")
      set(value) {
        _builder.setMode(value)
      }
    /**
     * ```
     * Grid connect mode
     * ```
     *
     * `.commonmodule.ENG_GridConnectModeKind mode = 2;`
     */
    public fun clearMode() {
      _builder.clearMode()
    }
    /**
     * ```
     * Grid connect mode
     * ```
     *
     * `.commonmodule.ENG_GridConnectModeKind mode = 2;`
     * @return Whether the mode field is set.
     */
    public fun hasMode(): kotlin.Boolean {
      return _builder.hasMode()
    }

    /**
     * ```
     * Ramp rates
     * ```
     *
     * `.commonmodule.RampRate rampRates = 5;`
     */
    public var rampRates: openfmb.commonmodule.RampRate
      @JvmName("getRampRates")
      get() = _builder.getRampRates()
      @JvmName("setRampRates")
      set(value) {
        _builder.setRampRates(value)
      }
    /**
     * ```
     * Ramp rates
     * ```
     *
     * `.commonmodule.RampRate rampRates = 5;`
     */
    public fun clearRampRates() {
      _builder.clearRampRates()
    }
    /**
     * ```
     * Ramp rates
     * ```
     *
     * `.commonmodule.RampRate rampRates = 5;`
     * @return Whether the rampRates field is set.
     */
    public fun hasRampRates(): kotlin.Boolean {
      return _builder.hasRampRates()
    }

    /**
     * ```
     * Reset device
     * ```
     *
     * `.commonmodule.ControlSPC reset = 8;`
     */
    public var reset: openfmb.commonmodule.ControlSPC
      @JvmName("getReset")
      get() = _builder.getReset()
      @JvmName("setReset")
      set(value) {
        _builder.setReset(value)
      }
    /**
     * ```
     * Reset device
     * ```
     *
     * `.commonmodule.ControlSPC reset = 8;`
     */
    public fun clearReset() {
      _builder.clearReset()
    }
    /**
     * ```
     * Reset device
     * ```
     *
     * `.commonmodule.ControlSPC reset = 8;`
     * @return Whether the reset field is set.
     */
    public fun hasReset(): kotlin.Boolean {
      return _builder.hasReset()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.Optional_StateKind state = 9;`
     */
    public var state: openfmb.commonmodule.Optional_StateKind
      @JvmName("getState")
      get() = _builder.getState()
      @JvmName("setState")
      set(value) {
        _builder.setState(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.Optional_StateKind state = 9;`
     */
    public fun clearState() {
      _builder.clearState()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.Optional_StateKind state = 9;`
     * @return Whether the state field is set.
     */
    public fun hasState(): kotlin.Boolean {
      return _builder.hasState()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.EnterServiceAPC enterServiceOperation = 12;`
     */
    public var enterServiceOperation: openfmb.commonmodule.EnterServiceAPC
      @JvmName("getEnterServiceOperation")
      get() = _builder.getEnterServiceOperation()
      @JvmName("setEnterServiceOperation")
      set(value) {
        _builder.setEnterServiceOperation(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.EnterServiceAPC enterServiceOperation = 12;`
     */
    public fun clearEnterServiceOperation() {
      _builder.clearEnterServiceOperation()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.EnterServiceAPC enterServiceOperation = 12;`
     * @return Whether the enterServiceOperation field is set.
     */
    public fun hasEnterServiceOperation(): kotlin.Boolean {
      return _builder.hasEnterServiceOperation()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.HzWAPC hzWOperation = 13;`
     */
    public var hzWOperation: openfmb.commonmodule.HzWAPC
      @JvmName("getHzWOperation")
      get() = _builder.getHzWOperation()
      @JvmName("setHzWOperation")
      set(value) {
        _builder.setHzWOperation(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.HzWAPC hzWOperation = 13;`
     */
    public fun clearHzWOperation() {
      _builder.clearHzWOperation()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.HzWAPC hzWOperation = 13;`
     * @return Whether the hzWOperation field is set.
     */
    public fun hasHzWOperation(): kotlin.Boolean {
      return _builder.hasHzWOperation()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.LimitWAPC limitWOperation = 14;`
     */
    public var limitWOperation: openfmb.commonmodule.LimitWAPC
      @JvmName("getLimitWOperation")
      get() = _builder.getLimitWOperation()
      @JvmName("setLimitWOperation")
      set(value) {
        _builder.setLimitWOperation(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.LimitWAPC limitWOperation = 14;`
     */
    public fun clearLimitWOperation() {
      _builder.clearLimitWOperation()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.LimitWAPC limitWOperation = 14;`
     * @return Whether the limitWOperation field is set.
     */
    public fun hasLimitWOperation(): kotlin.Boolean {
      return _builder.hasLimitWOperation()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.PFSPC pFOperation = 15;`
     */
    public var pFOperation: openfmb.commonmodule.PFSPC
      @JvmName("getPFOperation")
      get() = _builder.getPFOperation()
      @JvmName("setPFOperation")
      set(value) {
        _builder.setPFOperation(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.PFSPC pFOperation = 15;`
     */
    public fun clearPFOperation() {
      _builder.clearPFOperation()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.PFSPC pFOperation = 15;`
     * @return Whether the pFOperation field is set.
     */
    public fun hasPFOperation(): kotlin.Boolean {
      return _builder.hasPFOperation()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.TmHzCSG tmHzTripOperation = 16;`
     */
    public var tmHzTripOperation: openfmb.commonmodule.TmHzCSG
      @JvmName("getTmHzTripOperation")
      get() = _builder.getTmHzTripOperation()
      @JvmName("setTmHzTripOperation")
      set(value) {
        _builder.setTmHzTripOperation(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.TmHzCSG tmHzTripOperation = 16;`
     */
    public fun clearTmHzTripOperation() {
      _builder.clearTmHzTripOperation()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.TmHzCSG tmHzTripOperation = 16;`
     * @return Whether the tmHzTripOperation field is set.
     */
    public fun hasTmHzTripOperation(): kotlin.Boolean {
      return _builder.hasTmHzTripOperation()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.TmVoltCSG tmVoltTripOperation = 17;`
     */
    public var tmVoltTripOperation: openfmb.commonmodule.TmVoltCSG
      @JvmName("getTmVoltTripOperation")
      get() = _builder.getTmVoltTripOperation()
      @JvmName("setTmVoltTripOperation")
      set(value) {
        _builder.setTmVoltTripOperation(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.TmVoltCSG tmVoltTripOperation = 17;`
     */
    public fun clearTmVoltTripOperation() {
      _builder.clearTmVoltTripOperation()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.TmVoltCSG tmVoltTripOperation = 17;`
     * @return Whether the tmVoltTripOperation field is set.
     */
    public fun hasTmVoltTripOperation(): kotlin.Boolean {
      return _builder.hasTmVoltTripOperation()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.VarSPC vArOperation = 18;`
     */
    public var vArOperation: openfmb.commonmodule.VarSPC
      @JvmName("getVArOperation")
      get() = _builder.getVArOperation()
      @JvmName("setVArOperation")
      set(value) {
        _builder.setVArOperation(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.VarSPC vArOperation = 18;`
     */
    public fun clearVArOperation() {
      _builder.clearVArOperation()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.VarSPC vArOperation = 18;`
     * @return Whether the vArOperation field is set.
     */
    public fun hasVArOperation(): kotlin.Boolean {
      return _builder.hasVArOperation()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.VoltVarCSG voltVarOperation = 19;`
     */
    public var voltVarOperation: openfmb.commonmodule.VoltVarCSG
      @JvmName("getVoltVarOperation")
      get() = _builder.getVoltVarOperation()
      @JvmName("setVoltVarOperation")
      set(value) {
        _builder.setVoltVarOperation(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.VoltVarCSG voltVarOperation = 19;`
     */
    public fun clearVoltVarOperation() {
      _builder.clearVoltVarOperation()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.VoltVarCSG voltVarOperation = 19;`
     * @return Whether the voltVarOperation field is set.
     */
    public fun hasVoltVarOperation(): kotlin.Boolean {
      return _builder.hasVoltVarOperation()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.VoltWCSG voltWOperation = 20;`
     */
    public var voltWOperation: openfmb.commonmodule.VoltWCSG
      @JvmName("getVoltWOperation")
      get() = _builder.getVoltWOperation()
      @JvmName("setVoltWOperation")
      set(value) {
        _builder.setVoltWOperation(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.VoltWCSG voltWOperation = 20;`
     */
    public fun clearVoltWOperation() {
      _builder.clearVoltWOperation()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.VoltWCSG voltWOperation = 20;`
     * @return Whether the voltWOperation field is set.
     */
    public fun hasVoltWOperation(): kotlin.Boolean {
      return _builder.hasVoltWOperation()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.WVarCSG wVarOperation = 21;`
     */
    public var wVarOperation: openfmb.commonmodule.WVarCSG
      @JvmName("getWVarOperation")
      get() = _builder.getWVarOperation()
      @JvmName("setWVarOperation")
      set(value) {
        _builder.setWVarOperation(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.WVarCSG wVarOperation = 21;`
     */
    public fun clearWVarOperation() {
      _builder.clearWVarOperation()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.WVarCSG wVarOperation = 21;`
     * @return Whether the wVarOperation field is set.
     */
    public fun hasWVarOperation(): kotlin.Boolean {
      return _builder.hasWVarOperation()
    }

    /**
     * ```
     * Black start enable
     * ```
     *
     * `.commonmodule.ControlSPC blackStartEnabled = 22;`
     */
    public var blackStartEnabled: openfmb.commonmodule.ControlSPC
      @JvmName("getBlackStartEnabled")
      get() = _builder.getBlackStartEnabled()
      @JvmName("setBlackStartEnabled")
      set(value) {
        _builder.setBlackStartEnabled(value)
      }
    /**
     * ```
     * Black start enable
     * ```
     *
     * `.commonmodule.ControlSPC blackStartEnabled = 22;`
     */
    public fun clearBlackStartEnabled() {
      _builder.clearBlackStartEnabled()
    }
    /**
     * ```
     * Black start enable
     * ```
     *
     * `.commonmodule.ControlSPC blackStartEnabled = 22;`
     * @return Whether the blackStartEnabled field is set.
     */
    public fun hasBlackStartEnabled(): kotlin.Boolean {
      return _builder.hasBlackStartEnabled()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.WSPC wOperation = 24;`
     */
    public var wOperation: openfmb.commonmodule.WSPC
      @JvmName("getWOperation")
      get() = _builder.getWOperation()
      @JvmName("setWOperation")
      set(value) {
        _builder.setWOperation(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.WSPC wOperation = 24;`
     */
    public fun clearWOperation() {
      _builder.clearWOperation()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.WSPC wOperation = 24;`
     * @return Whether the wOperation field is set.
     */
    public fun hasWOperation(): kotlin.Boolean {
      return _builder.hasWOperation()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun openfmb.solarmodule.SolarPoint.copy(block: openfmb.solarmodule.SolarPointKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarPoint =
  openfmb.solarmodule.SolarPointKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.solarmodule.SolarPointOrBuilder.modeOrNull: openfmb.commonmodule.ENG_GridConnectModeKind?
  get() = if (hasMode()) getMode() else null

public val openfmb.solarmodule.SolarPointOrBuilder.rampRatesOrNull: openfmb.commonmodule.RampRate?
  get() = if (hasRampRates()) getRampRates() else null

public val openfmb.solarmodule.SolarPointOrBuilder.resetOrNull: openfmb.commonmodule.ControlSPC?
  get() = if (hasReset()) getReset() else null

public val openfmb.solarmodule.SolarPointOrBuilder.stateOrNull: openfmb.commonmodule.Optional_StateKind?
  get() = if (hasState()) getState() else null

public val openfmb.solarmodule.SolarPointOrBuilder.enterServiceOperationOrNull: openfmb.commonmodule.EnterServiceAPC?
  get() = if (hasEnterServiceOperation()) getEnterServiceOperation() else null

public val openfmb.solarmodule.SolarPointOrBuilder.hzWOperationOrNull: openfmb.commonmodule.HzWAPC?
  get() = if (hasHzWOperation()) getHzWOperation() else null

public val openfmb.solarmodule.SolarPointOrBuilder.limitWOperationOrNull: openfmb.commonmodule.LimitWAPC?
  get() = if (hasLimitWOperation()) getLimitWOperation() else null

public val openfmb.solarmodule.SolarPointOrBuilder.pFOperationOrNull: openfmb.commonmodule.PFSPC?
  get() = if (hasPFOperation()) getPFOperation() else null

public val openfmb.solarmodule.SolarPointOrBuilder.tmHzTripOperationOrNull: openfmb.commonmodule.TmHzCSG?
  get() = if (hasTmHzTripOperation()) getTmHzTripOperation() else null

public val openfmb.solarmodule.SolarPointOrBuilder.tmVoltTripOperationOrNull: openfmb.commonmodule.TmVoltCSG?
  get() = if (hasTmVoltTripOperation()) getTmVoltTripOperation() else null

public val openfmb.solarmodule.SolarPointOrBuilder.vArOperationOrNull: openfmb.commonmodule.VarSPC?
  get() = if (hasVArOperation()) getVArOperation() else null

public val openfmb.solarmodule.SolarPointOrBuilder.voltVarOperationOrNull: openfmb.commonmodule.VoltVarCSG?
  get() = if (hasVoltVarOperation()) getVoltVarOperation() else null

public val openfmb.solarmodule.SolarPointOrBuilder.voltWOperationOrNull: openfmb.commonmodule.VoltWCSG?
  get() = if (hasVoltWOperation()) getVoltWOperation() else null

public val openfmb.solarmodule.SolarPointOrBuilder.wVarOperationOrNull: openfmb.commonmodule.WVarCSG?
  get() = if (hasWVarOperation()) getWVarOperation() else null

public val openfmb.solarmodule.SolarPointOrBuilder.blackStartEnabledOrNull: openfmb.commonmodule.ControlSPC?
  get() = if (hasBlackStartEnabled()) getBlackStartEnabled() else null

public val openfmb.solarmodule.SolarPointOrBuilder.wOperationOrNull: openfmb.commonmodule.WSPC?
  get() = if (hasWOperation()) getWOperation() else null

