// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: evsemodule/evsemodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.evsemodule;

@kotlin.jvm.JvmName("-initializeeVSEEventProfile")
public inline fun eVSEEventProfile(block: openfmb.evsemodule.EVSEEventProfileKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.EVSEEventProfile =
  openfmb.evsemodule.EVSEEventProfileKt.Dsl._create(openfmb.evsemodule.EVSEEventProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * MISSING DOCUMENTATION!!!
 * ```
 *
 * Protobuf type `evsemodule.EVSEEventProfile`
 */
public object EVSEEventProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.evsemodule.EVSEEventProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.evsemodule.EVSEEventProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.evsemodule.EVSEEventProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var eventMessageInfo: openfmb.commonmodule.EventMessageInfo
      @kotlin.jvm.JvmName("getEventMessageInfo")
        get() = _builder.eventMessageInfo
      @kotlin.jvm.JvmName("setEventMessageInfo")
        set(value) {
        _builder.eventMessageInfo = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearEventMessageInfo() {
      _builder.clearEventMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the eventMessageInfo field is set.
     */
    public fun hasEventMessageInfo(): kotlin.Boolean {
      return _builder.hasEventMessageInfo()
    }

    public val EVSEEventProfileKt.Dsl.eventMessageInfoOrNull: openfmb.commonmodule.EventMessageInfo?
      get() = _builder.eventMessageInfoOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EVSE evse = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var evse: openfmb.evsemodule.EVSE
      @kotlin.jvm.JvmName("getEvse")
        get() = _builder.evse
      @kotlin.jvm.JvmName("setEvse")
        set(value) {
        _builder.evse = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EVSE evse = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearEvse() {
      _builder.clearEvse()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EVSE evse = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the evse field is set.
     */
    public fun hasEvse(): kotlin.Boolean {
      return _builder.hasEvse()
    }

    public val EVSEEventProfileKt.Dsl.evseOrNull: openfmb.evsemodule.EVSE?
      get() = _builder.evseOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EVSEEvent evseEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var evseEvent: openfmb.evsemodule.EVSEEvent
      @kotlin.jvm.JvmName("getEvseEvent")
        get() = _builder.evseEvent
      @kotlin.jvm.JvmName("setEvseEvent")
        set(value) {
        _builder.evseEvent = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EVSEEvent evseEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearEvseEvent() {
      _builder.clearEvseEvent()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EVSEEvent evseEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the evseEvent field is set.
     */
    public fun hasEvseEvent(): kotlin.Boolean {
      return _builder.hasEvseEvent()
    }

    public val EVSEEventProfileKt.Dsl.evseEventOrNull: openfmb.evsemodule.EVSEEvent?
      get() = _builder.evseEventOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.evsemodule.EVSEEventProfile.copy(block: `openfmb.evsemodule`.EVSEEventProfileKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.EVSEEventProfile =
  `openfmb.evsemodule`.EVSEEventProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.evsemodule.EVSEEventProfileOrBuilder.eventMessageInfoOrNull: openfmb.commonmodule.EventMessageInfo?
  get() = if (hasEventMessageInfo()) getEventMessageInfo() else null

public val openfmb.evsemodule.EVSEEventProfileOrBuilder.evseOrNull: openfmb.evsemodule.EVSE?
  get() = if (hasEvse()) getEvse() else null

public val openfmb.evsemodule.EVSEEventProfileOrBuilder.evseEventOrNull: openfmb.evsemodule.EVSEEvent?
  get() = if (hasEvseEvent()) getEvseEvent() else null

