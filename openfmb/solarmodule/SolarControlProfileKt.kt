// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: solarmodule/solarmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.solarmodule;

@kotlin.jvm.JvmName("-initializesolarControlProfile")
public inline fun solarControlProfile(block: openfmb.solarmodule.SolarControlProfileKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarControlProfile =
  openfmb.solarmodule.SolarControlProfileKt.Dsl._create(openfmb.solarmodule.SolarControlProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Solar control profile
 * ```
 *
 * Protobuf type `solarmodule.SolarControlProfile`
 */
public object SolarControlProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.solarmodule.SolarControlProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.solarmodule.SolarControlProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.solarmodule.SolarControlProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var controlMessageInfo: openfmb.commonmodule.ControlMessageInfo
      @JvmName("getControlMessageInfo")
      get() = _builder.getControlMessageInfo()
      @JvmName("setControlMessageInfo")
      set(value) {
        _builder.setControlMessageInfo(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearControlMessageInfo() {
      _builder.clearControlMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the controlMessageInfo field is set.
     */
    public fun hasControlMessageInfo(): kotlin.Boolean {
      return _builder.hasControlMessageInfo()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarControl solarControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var solarControl: openfmb.solarmodule.SolarControl
      @JvmName("getSolarControl")
      get() = _builder.getSolarControl()
      @JvmName("setSolarControl")
      set(value) {
        _builder.setSolarControl(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarControl solarControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearSolarControl() {
      _builder.clearSolarControl()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarControl solarControl = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the solarControl field is set.
     */
    public fun hasSolarControl(): kotlin.Boolean {
      return _builder.hasSolarControl()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var solarInverter: openfmb.solarmodule.SolarInverter
      @JvmName("getSolarInverter")
      get() = _builder.getSolarInverter()
      @JvmName("setSolarInverter")
      set(value) {
        _builder.setSolarInverter(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearSolarInverter() {
      _builder.clearSolarInverter()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.solarmodule.SolarInverter solarInverter = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the solarInverter field is set.
     */
    public fun hasSolarInverter(): kotlin.Boolean {
      return _builder.hasSolarInverter()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.solarmodule.SolarControlProfile.copy(block: openfmb.solarmodule.SolarControlProfileKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarControlProfile =
  openfmb.solarmodule.SolarControlProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.solarmodule.SolarControlProfileOrBuilder.controlMessageInfoOrNull: openfmb.commonmodule.ControlMessageInfo?
  get() = if (hasControlMessageInfo()) getControlMessageInfo() else null

public val openfmb.solarmodule.SolarControlProfileOrBuilder.solarControlOrNull: openfmb.solarmodule.SolarControl?
  get() = if (hasSolarControl()) getSolarControl() else null

public val openfmb.solarmodule.SolarControlProfileOrBuilder.solarInverterOrNull: openfmb.solarmodule.SolarInverter?
  get() = if (hasSolarInverter()) getSolarInverter() else null

