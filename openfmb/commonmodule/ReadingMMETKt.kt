// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializereadingMMET")
public inline fun readingMMET(block: openfmb.commonmodule.ReadingMMETKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ReadingMMET =
  openfmb.commonmodule.ReadingMMETKt.Dsl._create(openfmb.commonmodule.ReadingMMET.newBuilder()).apply { block() }._build()
/**
 * ```
 * LN: Meteorological information   Name: MMET
 * ```
 *
 * Protobuf type `commonmodule.ReadingMMET`
 */
public object ReadingMMETKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.ReadingMMET.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.ReadingMMET.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.ReadingMMET = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public var logicalNode: openfmb.commonmodule.LogicalNode
      @kotlin.jvm.JvmName("getLogicalNode")
        get() = _builder.logicalNode
      @kotlin.jvm.JvmName("setLogicalNode")
        set(value) {
        _builder.logicalNode = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearLogicalNode() {
      _builder.clearLogicalNode()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the logicalNode field is set.
     */
    public fun hasLogicalNode(): kotlin.Boolean {
      return _builder.hasLogicalNode()
    }

    public val ReadingMMETKt.Dsl.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
      get() = _builder.logicalNodeOrNull

    /**
     * ```
     * Temperature of environment [&#176;C].
     * ```
     *
     * `.commonmodule.MV EnvTmp = 2;`
     */
    public var envTmp: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getEnvTmp")
        get() = _builder.envTmp
      @kotlin.jvm.JvmName("setEnvTmp")
        set(value) {
        _builder.envTmp = value
      }
    /**
     * ```
     * Temperature of environment [&#176;C].
     * ```
     *
     * `.commonmodule.MV EnvTmp = 2;`
     */
    public fun clearEnvTmp() {
      _builder.clearEnvTmp()
    }
    /**
     * ```
     * Temperature of environment [&#176;C].
     * ```
     *
     * `.commonmodule.MV EnvTmp = 2;`
     * @return Whether the envTmp field is set.
     */
    public fun hasEnvTmp(): kotlin.Boolean {
      return _builder.hasEnvTmp()
    }

    public val ReadingMMETKt.Dsl.envTmpOrNull: openfmb.commonmodule.MV?
      get() = _builder.envTmpOrNull

    /**
     * ```
     * Wet bulb temperature (typically in &#176;C).
     * ```
     *
     * `.commonmodule.MV WetBlbTmp = 3;`
     */
    public var wetBlbTmp: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getWetBlbTmp")
        get() = _builder.wetBlbTmp
      @kotlin.jvm.JvmName("setWetBlbTmp")
        set(value) {
        _builder.wetBlbTmp = value
      }
    /**
     * ```
     * Wet bulb temperature (typically in &#176;C).
     * ```
     *
     * `.commonmodule.MV WetBlbTmp = 3;`
     */
    public fun clearWetBlbTmp() {
      _builder.clearWetBlbTmp()
    }
    /**
     * ```
     * Wet bulb temperature (typically in &#176;C).
     * ```
     *
     * `.commonmodule.MV WetBlbTmp = 3;`
     * @return Whether the wetBlbTmp field is set.
     */
    public fun hasWetBlbTmp(): kotlin.Boolean {
      return _builder.hasWetBlbTmp()
    }

    public val ReadingMMETKt.Dsl.wetBlbTmpOrNull: openfmb.commonmodule.MV?
      get() = _builder.wetBlbTmpOrNull

    /**
     * ```
     * Cloud cover level.
     * ```
     *
     * `.commonmodule.MV CloudCvr = 4;`
     */
    public var cloudCvr: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getCloudCvr")
        get() = _builder.cloudCvr
      @kotlin.jvm.JvmName("setCloudCvr")
        set(value) {
        _builder.cloudCvr = value
      }
    /**
     * ```
     * Cloud cover level.
     * ```
     *
     * `.commonmodule.MV CloudCvr = 4;`
     */
    public fun clearCloudCvr() {
      _builder.clearCloudCvr()
    }
    /**
     * ```
     * Cloud cover level.
     * ```
     *
     * `.commonmodule.MV CloudCvr = 4;`
     * @return Whether the cloudCvr field is set.
     */
    public fun hasCloudCvr(): kotlin.Boolean {
      return _builder.hasCloudCvr()
    }

    public val ReadingMMETKt.Dsl.cloudCvrOrNull: openfmb.commonmodule.MV?
      get() = _builder.cloudCvrOrNull

    /**
     * ```
     * Humidity of environment (typically in %).
     * ```
     *
     * `.commonmodule.MV EnvHum = 5;`
     */
    public var envHum: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getEnvHum")
        get() = _builder.envHum
      @kotlin.jvm.JvmName("setEnvHum")
        set(value) {
        _builder.envHum = value
      }
    /**
     * ```
     * Humidity of environment (typically in %).
     * ```
     *
     * `.commonmodule.MV EnvHum = 5;`
     */
    public fun clearEnvHum() {
      _builder.clearEnvHum()
    }
    /**
     * ```
     * Humidity of environment (typically in %).
     * ```
     *
     * `.commonmodule.MV EnvHum = 5;`
     * @return Whether the envHum field is set.
     */
    public fun hasEnvHum(): kotlin.Boolean {
      return _builder.hasEnvHum()
    }

    public val ReadingMMETKt.Dsl.envHumOrNull: openfmb.commonmodule.MV?
      get() = _builder.envHumOrNull

    /**
     * ```
     * Dew point.
     * ```
     *
     * `.commonmodule.MV DewPt = 6;`
     */
    public var dewPt: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getDewPt")
        get() = _builder.dewPt
      @kotlin.jvm.JvmName("setDewPt")
        set(value) {
        _builder.dewPt = value
      }
    /**
     * ```
     * Dew point.
     * ```
     *
     * `.commonmodule.MV DewPt = 6;`
     */
    public fun clearDewPt() {
      _builder.clearDewPt()
    }
    /**
     * ```
     * Dew point.
     * ```
     *
     * `.commonmodule.MV DewPt = 6;`
     * @return Whether the dewPt field is set.
     */
    public fun hasDewPt(): kotlin.Boolean {
      return _builder.hasDewPt()
    }

    public val ReadingMMETKt.Dsl.dewPtOrNull: openfmb.commonmodule.MV?
      get() = _builder.dewPtOrNull

    /**
     * ```
     * Diffuse insolation (insolation SIUnit [W/m<sup>2</sup>]).
     * ```
     *
     * `.commonmodule.MV DffInsol = 7;`
     */
    public var dffInsol: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getDffInsol")
        get() = _builder.dffInsol
      @kotlin.jvm.JvmName("setDffInsol")
        set(value) {
        _builder.dffInsol = value
      }
    /**
     * ```
     * Diffuse insolation (insolation SIUnit [W/m<sup>2</sup>]).
     * ```
     *
     * `.commonmodule.MV DffInsol = 7;`
     */
    public fun clearDffInsol() {
      _builder.clearDffInsol()
    }
    /**
     * ```
     * Diffuse insolation (insolation SIUnit [W/m<sup>2</sup>]).
     * ```
     *
     * `.commonmodule.MV DffInsol = 7;`
     * @return Whether the dffInsol field is set.
     */
    public fun hasDffInsol(): kotlin.Boolean {
      return _builder.hasDffInsol()
    }

    public val ReadingMMETKt.Dsl.dffInsolOrNull: openfmb.commonmodule.MV?
      get() = _builder.dffInsolOrNull

    /**
     * ```
     * Direct normal insolation (insolation SIUnit [W/m<sup>2</sup>]).
     * ```
     *
     * `.commonmodule.MV DctInsol = 8;`
     */
    public var dctInsol: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getDctInsol")
        get() = _builder.dctInsol
      @kotlin.jvm.JvmName("setDctInsol")
        set(value) {
        _builder.dctInsol = value
      }
    /**
     * ```
     * Direct normal insolation (insolation SIUnit [W/m<sup>2</sup>]).
     * ```
     *
     * `.commonmodule.MV DctInsol = 8;`
     */
    public fun clearDctInsol() {
      _builder.clearDctInsol()
    }
    /**
     * ```
     * Direct normal insolation (insolation SIUnit [W/m<sup>2</sup>]).
     * ```
     *
     * `.commonmodule.MV DctInsol = 8;`
     * @return Whether the dctInsol field is set.
     */
    public fun hasDctInsol(): kotlin.Boolean {
      return _builder.hasDctInsol()
    }

    public val ReadingMMETKt.Dsl.dctInsolOrNull: openfmb.commonmodule.MV?
      get() = _builder.dctInsolOrNull

    /**
     * ```
     * Daylight duration (time elapsed between sunrise and sunset).
     * ```
     *
     * `.commonmodule.MV DlDur = 9;`
     */
    public var dlDur: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getDlDur")
        get() = _builder.dlDur
      @kotlin.jvm.JvmName("setDlDur")
        set(value) {
        _builder.dlDur = value
      }
    /**
     * ```
     * Daylight duration (time elapsed between sunrise and sunset).
     * ```
     *
     * `.commonmodule.MV DlDur = 9;`
     */
    public fun clearDlDur() {
      _builder.clearDlDur()
    }
    /**
     * ```
     * Daylight duration (time elapsed between sunrise and sunset).
     * ```
     *
     * `.commonmodule.MV DlDur = 9;`
     * @return Whether the dlDur field is set.
     */
    public fun hasDlDur(): kotlin.Boolean {
      return _builder.hasDlDur()
    }

    public val ReadingMMETKt.Dsl.dlDurOrNull: openfmb.commonmodule.MV?
      get() = _builder.dlDurOrNull

    /**
     * ```
     * Total horizontal insolation (insolation SIUnit [W/m<sup>2</sup>]).
     * ```
     *
     * `.commonmodule.MV HorInsol = 10;`
     */
    public var horInsol: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getHorInsol")
        get() = _builder.horInsol
      @kotlin.jvm.JvmName("setHorInsol")
        set(value) {
        _builder.horInsol = value
      }
    /**
     * ```
     * Total horizontal insolation (insolation SIUnit [W/m<sup>2</sup>]).
     * ```
     *
     * `.commonmodule.MV HorInsol = 10;`
     */
    public fun clearHorInsol() {
      _builder.clearHorInsol()
    }
    /**
     * ```
     * Total horizontal insolation (insolation SIUnit [W/m<sup>2</sup>]).
     * ```
     *
     * `.commonmodule.MV HorInsol = 10;`
     * @return Whether the horInsol field is set.
     */
    public fun hasHorInsol(): kotlin.Boolean {
      return _builder.hasHorInsol()
    }

    public val ReadingMMETKt.Dsl.horInsolOrNull: openfmb.commonmodule.MV?
      get() = _builder.horInsolOrNull

    /**
     * ```
     * Total horizontal wind direction.
     * ```
     *
     * `.commonmodule.MV HorWdDir = 11;`
     */
    public var horWdDir: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getHorWdDir")
        get() = _builder.horWdDir
      @kotlin.jvm.JvmName("setHorWdDir")
        set(value) {
        _builder.horWdDir = value
      }
    /**
     * ```
     * Total horizontal wind direction.
     * ```
     *
     * `.commonmodule.MV HorWdDir = 11;`
     */
    public fun clearHorWdDir() {
      _builder.clearHorWdDir()
    }
    /**
     * ```
     * Total horizontal wind direction.
     * ```
     *
     * `.commonmodule.MV HorWdDir = 11;`
     * @return Whether the horWdDir field is set.
     */
    public fun hasHorWdDir(): kotlin.Boolean {
      return _builder.hasHorWdDir()
    }

    public val ReadingMMETKt.Dsl.horWdDirOrNull: openfmb.commonmodule.MV?
      get() = _builder.horWdDirOrNull

    /**
     * ```
     * Average horizontal wind speed.
     * ```
     *
     * `.commonmodule.MV HorWdSpd = 12;`
     */
    public var horWdSpd: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getHorWdSpd")
        get() = _builder.horWdSpd
      @kotlin.jvm.JvmName("setHorWdSpd")
        set(value) {
        _builder.horWdSpd = value
      }
    /**
     * ```
     * Average horizontal wind speed.
     * ```
     *
     * `.commonmodule.MV HorWdSpd = 12;`
     */
    public fun clearHorWdSpd() {
      _builder.clearHorWdSpd()
    }
    /**
     * ```
     * Average horizontal wind speed.
     * ```
     *
     * `.commonmodule.MV HorWdSpd = 12;`
     * @return Whether the horWdSpd field is set.
     */
    public fun hasHorWdSpd(): kotlin.Boolean {
      return _builder.hasHorWdSpd()
    }

    public val ReadingMMETKt.Dsl.horWdSpdOrNull: openfmb.commonmodule.MV?
      get() = _builder.horWdSpdOrNull

    /**
     * ```
     * Vertical wind direction.
     * ```
     *
     * `.commonmodule.MV VerWdDir = 13;`
     */
    public var verWdDir: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getVerWdDir")
        get() = _builder.verWdDir
      @kotlin.jvm.JvmName("setVerWdDir")
        set(value) {
        _builder.verWdDir = value
      }
    /**
     * ```
     * Vertical wind direction.
     * ```
     *
     * `.commonmodule.MV VerWdDir = 13;`
     */
    public fun clearVerWdDir() {
      _builder.clearVerWdDir()
    }
    /**
     * ```
     * Vertical wind direction.
     * ```
     *
     * `.commonmodule.MV VerWdDir = 13;`
     * @return Whether the verWdDir field is set.
     */
    public fun hasVerWdDir(): kotlin.Boolean {
      return _builder.hasVerWdDir()
    }

    public val ReadingMMETKt.Dsl.verWdDirOrNull: openfmb.commonmodule.MV?
      get() = _builder.verWdDirOrNull

    /**
     * ```
     * Average vertical wind speed.
     * ```
     *
     * `.commonmodule.MV VerWdSpd = 14;`
     */
    public var verWdSpd: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getVerWdSpd")
        get() = _builder.verWdSpd
      @kotlin.jvm.JvmName("setVerWdSpd")
        set(value) {
        _builder.verWdSpd = value
      }
    /**
     * ```
     * Average vertical wind speed.
     * ```
     *
     * `.commonmodule.MV VerWdSpd = 14;`
     */
    public fun clearVerWdSpd() {
      _builder.clearVerWdSpd()
    }
    /**
     * ```
     * Average vertical wind speed.
     * ```
     *
     * `.commonmodule.MV VerWdSpd = 14;`
     * @return Whether the verWdSpd field is set.
     */
    public fun hasVerWdSpd(): kotlin.Boolean {
      return _builder.hasVerWdSpd()
    }

    public val ReadingMMETKt.Dsl.verWdSpdOrNull: openfmb.commonmodule.MV?
      get() = _builder.verWdSpdOrNull

    /**
     * ```
     * Maximum wind gust speed.
     * ```
     *
     * `.commonmodule.MV WdGustSpd = 15;`
     */
    public var wdGustSpd: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getWdGustSpd")
        get() = _builder.wdGustSpd
      @kotlin.jvm.JvmName("setWdGustSpd")
        set(value) {
        _builder.wdGustSpd = value
      }
    /**
     * ```
     * Maximum wind gust speed.
     * ```
     *
     * `.commonmodule.MV WdGustSpd = 15;`
     */
    public fun clearWdGustSpd() {
      _builder.clearWdGustSpd()
    }
    /**
     * ```
     * Maximum wind gust speed.
     * ```
     *
     * `.commonmodule.MV WdGustSpd = 15;`
     * @return Whether the wdGustSpd field is set.
     */
    public fun hasWdGustSpd(): kotlin.Boolean {
      return _builder.hasWdGustSpd()
    }

    public val ReadingMMETKt.Dsl.wdGustSpdOrNull: openfmb.commonmodule.MV?
      get() = _builder.wdGustSpdOrNull

    /**
     * ```
     * Barometric pressure of environment.
     * ```
     *
     * `.commonmodule.MV EnvPres = 16;`
     */
    public var envPres: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getEnvPres")
        get() = _builder.envPres
      @kotlin.jvm.JvmName("setEnvPres")
        set(value) {
        _builder.envPres = value
      }
    /**
     * ```
     * Barometric pressure of environment.
     * ```
     *
     * `.commonmodule.MV EnvPres = 16;`
     */
    public fun clearEnvPres() {
      _builder.clearEnvPres()
    }
    /**
     * ```
     * Barometric pressure of environment.
     * ```
     *
     * `.commonmodule.MV EnvPres = 16;`
     * @return Whether the envPres field is set.
     */
    public fun hasEnvPres(): kotlin.Boolean {
      return _builder.hasEnvPres()
    }

    public val ReadingMMETKt.Dsl.envPresOrNull: openfmb.commonmodule.MV?
      get() = _builder.envPresOrNull

    /**
     * ```
     * Rainfall (typically in mm - length SIUnit [m]).
     * ```
     *
     * `.commonmodule.MV RnFll = 17;`
     */
    public var rnFll: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getRnFll")
        get() = _builder.rnFll
      @kotlin.jvm.JvmName("setRnFll")
        set(value) {
        _builder.rnFll = value
      }
    /**
     * ```
     * Rainfall (typically in mm - length SIUnit [m]).
     * ```
     *
     * `.commonmodule.MV RnFll = 17;`
     */
    public fun clearRnFll() {
      _builder.clearRnFll()
    }
    /**
     * ```
     * Rainfall (typically in mm - length SIUnit [m]).
     * ```
     *
     * `.commonmodule.MV RnFll = 17;`
     * @return Whether the rnFll field is set.
     */
    public fun hasRnFll(): kotlin.Boolean {
      return _builder.hasRnFll()
    }

    public val ReadingMMETKt.Dsl.rnFllOrNull: openfmb.commonmodule.MV?
      get() = _builder.rnFllOrNull

    /**
     * ```
     * Snowfall density (typically in g/cm<sup>3</sup> - density SIUnit [kg/m<sup>3</sup>]).
     * ```
     *
     * `.commonmodule.MV SnwDen = 18;`
     */
    public var snwDen: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getSnwDen")
        get() = _builder.snwDen
      @kotlin.jvm.JvmName("setSnwDen")
        set(value) {
        _builder.snwDen = value
      }
    /**
     * ```
     * Snowfall density (typically in g/cm<sup>3</sup> - density SIUnit [kg/m<sup>3</sup>]).
     * ```
     *
     * `.commonmodule.MV SnwDen = 18;`
     */
    public fun clearSnwDen() {
      _builder.clearSnwDen()
    }
    /**
     * ```
     * Snowfall density (typically in g/cm<sup>3</sup> - density SIUnit [kg/m<sup>3</sup>]).
     * ```
     *
     * `.commonmodule.MV SnwDen = 18;`
     * @return Whether the snwDen field is set.
     */
    public fun hasSnwDen(): kotlin.Boolean {
      return _builder.hasSnwDen()
    }

    public val ReadingMMETKt.Dsl.snwDenOrNull: openfmb.commonmodule.MV?
      get() = _builder.snwDenOrNull

    /**
     * ```
     * Snowfall temperature (typically in &#176;C).
     * ```
     *
     * `.commonmodule.MV SnwTmp = 19;`
     */
    public var snwTmp: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getSnwTmp")
        get() = _builder.snwTmp
      @kotlin.jvm.JvmName("setSnwTmp")
        set(value) {
        _builder.snwTmp = value
      }
    /**
     * ```
     * Snowfall temperature (typically in &#176;C).
     * ```
     *
     * `.commonmodule.MV SnwTmp = 19;`
     */
    public fun clearSnwTmp() {
      _builder.clearSnwTmp()
    }
    /**
     * ```
     * Snowfall temperature (typically in &#176;C).
     * ```
     *
     * `.commonmodule.MV SnwTmp = 19;`
     * @return Whether the snwTmp field is set.
     */
    public fun hasSnwTmp(): kotlin.Boolean {
      return _builder.hasSnwTmp()
    }

    public val ReadingMMETKt.Dsl.snwTmpOrNull: openfmb.commonmodule.MV?
      get() = _builder.snwTmpOrNull

    /**
     * ```
     * Snow cover (typically in mm - length SIUnit [m]).
     * ```
     *
     * `.commonmodule.MV SnwCvr = 20;`
     */
    public var snwCvr: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getSnwCvr")
        get() = _builder.snwCvr
      @kotlin.jvm.JvmName("setSnwCvr")
        set(value) {
        _builder.snwCvr = value
      }
    /**
     * ```
     * Snow cover (typically in mm - length SIUnit [m]).
     * ```
     *
     * `.commonmodule.MV SnwCvr = 20;`
     */
    public fun clearSnwCvr() {
      _builder.clearSnwCvr()
    }
    /**
     * ```
     * Snow cover (typically in mm - length SIUnit [m]).
     * ```
     *
     * `.commonmodule.MV SnwCvr = 20;`
     * @return Whether the snwCvr field is set.
     */
    public fun hasSnwCvr(): kotlin.Boolean {
      return _builder.hasSnwCvr()
    }

    public val ReadingMMETKt.Dsl.snwCvrOrNull: openfmb.commonmodule.MV?
      get() = _builder.snwCvrOrNull

    /**
     * ```
     * Snowfall (typically in mm - length SIUnit [m]).
     * ```
     *
     * `.commonmodule.MV SnwFll = 21;`
     */
    public var snwFll: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getSnwFll")
        get() = _builder.snwFll
      @kotlin.jvm.JvmName("setSnwFll")
        set(value) {
        _builder.snwFll = value
      }
    /**
     * ```
     * Snowfall (typically in mm - length SIUnit [m]).
     * ```
     *
     * `.commonmodule.MV SnwFll = 21;`
     */
    public fun clearSnwFll() {
      _builder.clearSnwFll()
    }
    /**
     * ```
     * Snowfall (typically in mm - length SIUnit [m]).
     * ```
     *
     * `.commonmodule.MV SnwFll = 21;`
     * @return Whether the snwFll field is set.
     */
    public fun hasSnwFll(): kotlin.Boolean {
      return _builder.hasSnwFll()
    }

    public val ReadingMMETKt.Dsl.snwFllOrNull: openfmb.commonmodule.MV?
      get() = _builder.snwFllOrNull

    /**
     * ```
     * Water equivalent of snowfall (typically in mm - length SIUnit [m]).
     * ```
     *
     * `.commonmodule.MV SnwEq = 22;`
     */
    public var snwEq: openfmb.commonmodule.MV
      @kotlin.jvm.JvmName("getSnwEq")
        get() = _builder.snwEq
      @kotlin.jvm.JvmName("setSnwEq")
        set(value) {
        _builder.snwEq = value
      }
    /**
     * ```
     * Water equivalent of snowfall (typically in mm - length SIUnit [m]).
     * ```
     *
     * `.commonmodule.MV SnwEq = 22;`
     */
    public fun clearSnwEq() {
      _builder.clearSnwEq()
    }
    /**
     * ```
     * Water equivalent of snowfall (typically in mm - length SIUnit [m]).
     * ```
     *
     * `.commonmodule.MV SnwEq = 22;`
     * @return Whether the snwEq field is set.
     */
    public fun hasSnwEq(): kotlin.Boolean {
      return _builder.hasSnwEq()
    }

    public val ReadingMMETKt.Dsl.snwEqOrNull: openfmb.commonmodule.MV?
      get() = _builder.snwEqOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.ReadingMMET.copy(block: `openfmb.commonmodule`.ReadingMMETKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.ReadingMMET =
  `openfmb.commonmodule`.ReadingMMETKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.ReadingMMETOrBuilder.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
  get() = if (hasLogicalNode()) getLogicalNode() else null

public val openfmb.commonmodule.ReadingMMETOrBuilder.envTmpOrNull: openfmb.commonmodule.MV?
  get() = if (hasEnvTmp()) getEnvTmp() else null

public val openfmb.commonmodule.ReadingMMETOrBuilder.wetBlbTmpOrNull: openfmb.commonmodule.MV?
  get() = if (hasWetBlbTmp()) getWetBlbTmp() else null

public val openfmb.commonmodule.ReadingMMETOrBuilder.cloudCvrOrNull: openfmb.commonmodule.MV?
  get() = if (hasCloudCvr()) getCloudCvr() else null

public val openfmb.commonmodule.ReadingMMETOrBuilder.envHumOrNull: openfmb.commonmodule.MV?
  get() = if (hasEnvHum()) getEnvHum() else null

public val openfmb.commonmodule.ReadingMMETOrBuilder.dewPtOrNull: openfmb.commonmodule.MV?
  get() = if (hasDewPt()) getDewPt() else null

public val openfmb.commonmodule.ReadingMMETOrBuilder.dffInsolOrNull: openfmb.commonmodule.MV?
  get() = if (hasDffInsol()) getDffInsol() else null

public val openfmb.commonmodule.ReadingMMETOrBuilder.dctInsolOrNull: openfmb.commonmodule.MV?
  get() = if (hasDctInsol()) getDctInsol() else null

public val openfmb.commonmodule.ReadingMMETOrBuilder.dlDurOrNull: openfmb.commonmodule.MV?
  get() = if (hasDlDur()) getDlDur() else null

public val openfmb.commonmodule.ReadingMMETOrBuilder.horInsolOrNull: openfmb.commonmodule.MV?
  get() = if (hasHorInsol()) getHorInsol() else null

public val openfmb.commonmodule.ReadingMMETOrBuilder.horWdDirOrNull: openfmb.commonmodule.MV?
  get() = if (hasHorWdDir()) getHorWdDir() else null

public val openfmb.commonmodule.ReadingMMETOrBuilder.horWdSpdOrNull: openfmb.commonmodule.MV?
  get() = if (hasHorWdSpd()) getHorWdSpd() else null

public val openfmb.commonmodule.ReadingMMETOrBuilder.verWdDirOrNull: openfmb.commonmodule.MV?
  get() = if (hasVerWdDir()) getVerWdDir() else null

public val openfmb.commonmodule.ReadingMMETOrBuilder.verWdSpdOrNull: openfmb.commonmodule.MV?
  get() = if (hasVerWdSpd()) getVerWdSpd() else null

public val openfmb.commonmodule.ReadingMMETOrBuilder.wdGustSpdOrNull: openfmb.commonmodule.MV?
  get() = if (hasWdGustSpd()) getWdGustSpd() else null

public val openfmb.commonmodule.ReadingMMETOrBuilder.envPresOrNull: openfmb.commonmodule.MV?
  get() = if (hasEnvPres()) getEnvPres() else null

public val openfmb.commonmodule.ReadingMMETOrBuilder.rnFllOrNull: openfmb.commonmodule.MV?
  get() = if (hasRnFll()) getRnFll() else null

public val openfmb.commonmodule.ReadingMMETOrBuilder.snwDenOrNull: openfmb.commonmodule.MV?
  get() = if (hasSnwDen()) getSnwDen() else null

public val openfmb.commonmodule.ReadingMMETOrBuilder.snwTmpOrNull: openfmb.commonmodule.MV?
  get() = if (hasSnwTmp()) getSnwTmp() else null

public val openfmb.commonmodule.ReadingMMETOrBuilder.snwCvrOrNull: openfmb.commonmodule.MV?
  get() = if (hasSnwCvr()) getSnwCvr() else null

public val openfmb.commonmodule.ReadingMMETOrBuilder.snwFllOrNull: openfmb.commonmodule.MV?
  get() = if (hasSnwFll()) getSnwFll() else null

public val openfmb.commonmodule.ReadingMMETOrBuilder.snwEqOrNull: openfmb.commonmodule.MV?
  get() = if (hasSnwEq()) getSnwEq() else null

