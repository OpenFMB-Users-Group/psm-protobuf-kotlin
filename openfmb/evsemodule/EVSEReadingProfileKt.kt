// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: evsemodule/evsemodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.evsemodule;

@kotlin.jvm.JvmName("-initializeeVSEReadingProfile")
public inline fun eVSEReadingProfile(block: openfmb.evsemodule.EVSEReadingProfileKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.EVSEReadingProfile =
  openfmb.evsemodule.EVSEReadingProfileKt.Dsl._create(openfmb.evsemodule.EVSEReadingProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * EVSE Reading Profile
 * ```
 *
 * Protobuf type `evsemodule.EVSEReadingProfile`
 */
public object EVSEReadingProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.evsemodule.EVSEReadingProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.evsemodule.EVSEReadingProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.evsemodule.EVSEReadingProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var readingMessageInfo: openfmb.commonmodule.ReadingMessageInfo
      @kotlin.jvm.JvmName("getReadingMessageInfo")
        get() = _builder.readingMessageInfo
      @kotlin.jvm.JvmName("setReadingMessageInfo")
        set(value) {
        _builder.readingMessageInfo = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearReadingMessageInfo() {
      _builder.clearReadingMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the readingMessageInfo field is set.
     */
    public fun hasReadingMessageInfo(): kotlin.Boolean {
      return _builder.hasReadingMessageInfo()
    }

    public val EVSEReadingProfileKt.Dsl.readingMessageInfoOrNull: openfmb.commonmodule.ReadingMessageInfo?
      get() = _builder.readingMessageInfoOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EVSE evse = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var evse: openfmb.evsemodule.EVSE
      @kotlin.jvm.JvmName("getEvse")
        get() = _builder.evse
      @kotlin.jvm.JvmName("setEvse")
        set(value) {
        _builder.evse = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EVSE evse = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearEvse() {
      _builder.clearEvse()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EVSE evse = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the evse field is set.
     */
    public fun hasEvse(): kotlin.Boolean {
      return _builder.hasEvse()
    }

    public val EVSEReadingProfileKt.Dsl.evseOrNull: openfmb.evsemodule.EVSE?
      get() = _builder.evseOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EVSEReading evseReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var evseReading: openfmb.evsemodule.EVSEReading
      @kotlin.jvm.JvmName("getEvseReading")
        get() = _builder.evseReading
      @kotlin.jvm.JvmName("setEvseReading")
        set(value) {
        _builder.evseReading = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EVSEReading evseReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearEvseReading() {
      _builder.clearEvseReading()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EVSEReading evseReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the evseReading field is set.
     */
    public fun hasEvseReading(): kotlin.Boolean {
      return _builder.hasEvseReading()
    }

    public val EVSEReadingProfileKt.Dsl.evseReadingOrNull: openfmb.evsemodule.EVSEReading?
      get() = _builder.evseReadingOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.evsemodule.EVSEReadingProfile.copy(block: `openfmb.evsemodule`.EVSEReadingProfileKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.EVSEReadingProfile =
  `openfmb.evsemodule`.EVSEReadingProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.evsemodule.EVSEReadingProfileOrBuilder.readingMessageInfoOrNull: openfmb.commonmodule.ReadingMessageInfo?
  get() = if (hasReadingMessageInfo()) getReadingMessageInfo() else null

public val openfmb.evsemodule.EVSEReadingProfileOrBuilder.evseOrNull: openfmb.evsemodule.EVSE?
  get() = if (hasEvse()) getEvse() else null

public val openfmb.evsemodule.EVSEReadingProfileOrBuilder.evseReadingOrNull: openfmb.evsemodule.EVSEReading?
  get() = if (hasEvseReading()) getEvseReading() else null

