// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: resourcemodule/resourcemodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.resourcemodule;

@kotlin.jvm.JvmName("-initializeresourceStatusProfile")
public inline fun resourceStatusProfile(block: openfmb.resourcemodule.ResourceStatusProfileKt.Dsl.() -> kotlin.Unit): openfmb.resourcemodule.ResourceStatusProfile =
  openfmb.resourcemodule.ResourceStatusProfileKt.Dsl._create(openfmb.resourcemodule.ResourceStatusProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Resource status module
 * ```
 *
 * Protobuf type `resourcemodule.ResourceStatusProfile`
 */
public object ResourceStatusProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.resourcemodule.ResourceStatusProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.resourcemodule.ResourceStatusProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.resourcemodule.ResourceStatusProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var statusMessageInfo: openfmb.commonmodule.StatusMessageInfo
      @JvmName("getStatusMessageInfo")
      get() = _builder.getStatusMessageInfo()
      @JvmName("setStatusMessageInfo")
      set(value) {
        _builder.setStatusMessageInfo(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearStatusMessageInfo() {
      _builder.clearStatusMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the statusMessageInfo field is set.
     */
    public fun hasStatusMessageInfo(): kotlin.Boolean {
      return _builder.hasStatusMessageInfo()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ConductingEquipment conductingEquipment = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var conductingEquipment: openfmb.commonmodule.ConductingEquipment
      @JvmName("getConductingEquipment")
      get() = _builder.getConductingEquipment()
      @JvmName("setConductingEquipment")
      set(value) {
        _builder.setConductingEquipment(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ConductingEquipment conductingEquipment = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearConductingEquipment() {
      _builder.clearConductingEquipment()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ConductingEquipment conductingEquipment = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the conductingEquipment field is set.
     */
    public fun hasConductingEquipment(): kotlin.Boolean {
      return _builder.hasConductingEquipment()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.resourcemodule.ResourceStatus resourceStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var resourceStatus: openfmb.resourcemodule.ResourceStatus
      @JvmName("getResourceStatus")
      get() = _builder.getResourceStatus()
      @JvmName("setResourceStatus")
      set(value) {
        _builder.setResourceStatus(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.resourcemodule.ResourceStatus resourceStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearResourceStatus() {
      _builder.clearResourceStatus()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.resourcemodule.ResourceStatus resourceStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the resourceStatus field is set.
     */
    public fun hasResourceStatus(): kotlin.Boolean {
      return _builder.hasResourceStatus()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.resourcemodule.ResourceStatusProfile.copy(block: openfmb.resourcemodule.ResourceStatusProfileKt.Dsl.() -> kotlin.Unit): openfmb.resourcemodule.ResourceStatusProfile =
  openfmb.resourcemodule.ResourceStatusProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.resourcemodule.ResourceStatusProfileOrBuilder.statusMessageInfoOrNull: openfmb.commonmodule.StatusMessageInfo?
  get() = if (hasStatusMessageInfo()) getStatusMessageInfo() else null

public val openfmb.resourcemodule.ResourceStatusProfileOrBuilder.conductingEquipmentOrNull: openfmb.commonmodule.ConductingEquipment?
  get() = if (hasConductingEquipment()) getConductingEquipment() else null

public val openfmb.resourcemodule.ResourceStatusProfileOrBuilder.resourceStatusOrNull: openfmb.resourcemodule.ResourceStatus?
  get() = if (hasResourceStatus()) getResourceStatus() else null

