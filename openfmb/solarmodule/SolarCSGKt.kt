// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: solarmodule/solarmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.solarmodule;

@kotlin.jvm.JvmName("-initializesolarCSG")
public inline fun solarCSG(block: openfmb.solarmodule.SolarCSGKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarCSG =
  openfmb.solarmodule.SolarCSGKt.Dsl._create(openfmb.solarmodule.SolarCSG.newBuilder()).apply { block() }._build()
/**
 * ```
 * Curve shape setting (FC=SP) (CSG_SP)
 * ```
 *
 * Protobuf type `solarmodule.SolarCSG`
 */
public object SolarCSGKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.solarmodule.SolarCSG.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.solarmodule.SolarCSG.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.solarmodule.SolarCSG = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class CrvPtsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * The array with the points specifying a curve shape.
     * ```
     *
     * `repeated .solarmodule.SolarCurvePoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
     public val crvPts: com.google.protobuf.kotlin.DslList<openfmb.solarmodule.SolarCurvePoint, CrvPtsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getCrvPtsList()
      )
    /**
     * ```
     * The array with the points specifying a curve shape.
     * ```
     *
     * `repeated .solarmodule.SolarCurvePoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @param value The crvPts to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addCrvPts")
    public fun com.google.protobuf.kotlin.DslList<openfmb.solarmodule.SolarCurvePoint, CrvPtsProxy>.add(value: openfmb.solarmodule.SolarCurvePoint) {
      _builder.addCrvPts(value)
    }
    /**
     * ```
     * The array with the points specifying a curve shape.
     * ```
     *
     * `repeated .solarmodule.SolarCurvePoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @param value The crvPts to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignCrvPts")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<openfmb.solarmodule.SolarCurvePoint, CrvPtsProxy>.plusAssign(value: openfmb.solarmodule.SolarCurvePoint) {
      add(value)
    }
    /**
     * ```
     * The array with the points specifying a curve shape.
     * ```
     *
     * `repeated .solarmodule.SolarCurvePoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @param values The crvPts to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllCrvPts")
    public fun com.google.protobuf.kotlin.DslList<openfmb.solarmodule.SolarCurvePoint, CrvPtsProxy>.addAll(values: kotlin.collections.Iterable<openfmb.solarmodule.SolarCurvePoint>) {
      _builder.addAllCrvPts(values)
    }
    /**
     * ```
     * The array with the points specifying a curve shape.
     * ```
     *
     * `repeated .solarmodule.SolarCurvePoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @param values The crvPts to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllCrvPts")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<openfmb.solarmodule.SolarCurvePoint, CrvPtsProxy>.plusAssign(values: kotlin.collections.Iterable<openfmb.solarmodule.SolarCurvePoint>) {
      addAll(values)
    }
    /**
     * ```
     * The array with the points specifying a curve shape.
     * ```
     *
     * `repeated .solarmodule.SolarCurvePoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @param index The index to set the value at.
     * @param value The crvPts to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setCrvPts")
    public operator fun com.google.protobuf.kotlin.DslList<openfmb.solarmodule.SolarCurvePoint, CrvPtsProxy>.set(index: kotlin.Int, value: openfmb.solarmodule.SolarCurvePoint) {
      _builder.setCrvPts(index, value)
    }
    /**
     * ```
     * The array with the points specifying a curve shape.
     * ```
     *
     * `repeated .solarmodule.SolarCurvePoint crvPts = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearCrvPts")
    public fun com.google.protobuf.kotlin.DslList<openfmb.solarmodule.SolarCurvePoint, CrvPtsProxy>.clear() {
      _builder.clearCrvPts()
    }

  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.solarmodule.SolarCSG.copy(block: openfmb.solarmodule.SolarCSGKt.Dsl.() -> kotlin.Unit): openfmb.solarmodule.SolarCSG =
  openfmb.solarmodule.SolarCSGKt.Dsl._create(this.toBuilder()).apply { block() }._build()

