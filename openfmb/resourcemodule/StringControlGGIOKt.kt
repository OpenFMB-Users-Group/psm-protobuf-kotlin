//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: resourcemodule/resourcemodule.proto

package openfmb.resourcemodule;

@kotlin.jvm.JvmName("-initializestringControlGGIO")
public inline fun stringControlGGIO(block: openfmb.resourcemodule.StringControlGGIOKt.Dsl.() -> kotlin.Unit): openfmb.resourcemodule.StringControlGGIO =
  openfmb.resourcemodule.StringControlGGIOKt.Dsl._create(openfmb.resourcemodule.StringControlGGIO.newBuilder()).apply { block() }._build()
public object StringControlGGIOKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.resourcemodule.StringControlGGIO.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.resourcemodule.StringControlGGIO.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.resourcemodule.StringControlGGIO = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var logicalNode: openfmb.commonmodule.LogicalNode
      @JvmName("getLogicalNode")
      get() = _builder.getLogicalNode()
      @JvmName("setLogicalNode")
      set(value) {
        _builder.setLogicalNode(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearLogicalNode() {
      _builder.clearLogicalNode()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNode logicalNode = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the logicalNode field is set.
     */
    public fun hasLogicalNode(): kotlin.Boolean {
      return _builder.hasLogicalNode()
    }

    /**
     * <pre>
     * Phase code
     * </pre>
     *
     * <code>.commonmodule.Optional_PhaseCodeKind Phase = 2;</code>
     */
    public var phase: openfmb.commonmodule.Optional_PhaseCodeKind
      @JvmName("getPhase")
      get() = _builder.getPhase()
      @JvmName("setPhase")
      set(value) {
        _builder.setPhase(value)
      }
    /**
     * <pre>
     * Phase code
     * </pre>
     *
     * <code>.commonmodule.Optional_PhaseCodeKind Phase = 2;</code>
     */
    public fun clearPhase() {
      _builder.clearPhase()
    }
    /**
     * <pre>
     * Phase code
     * </pre>
     *
     * <code>.commonmodule.Optional_PhaseCodeKind Phase = 2;</code>
     * @return Whether the phase field is set.
     */
    public fun hasPhase(): kotlin.Boolean {
      return _builder.hasPhase()
    }

    /**
     * <pre>
     * String control
     * </pre>
     *
     * <code>.commonmodule.VSC StrOut = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var strOut: openfmb.commonmodule.VSC
      @JvmName("getStrOut")
      get() = _builder.getStrOut()
      @JvmName("setStrOut")
      set(value) {
        _builder.setStrOut(value)
      }
    /**
     * <pre>
     * String control
     * </pre>
     *
     * <code>.commonmodule.VSC StrOut = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearStrOut() {
      _builder.clearStrOut()
    }
    /**
     * <pre>
     * String control
     * </pre>
     *
     * <code>.commonmodule.VSC StrOut = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @return Whether the strOut field is set.
     */
    public fun hasStrOut(): kotlin.Boolean {
      return _builder.hasStrOut()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.resourcemodule.StringControlGGIO.copy(block: openfmb.resourcemodule.StringControlGGIOKt.Dsl.() -> kotlin.Unit): openfmb.resourcemodule.StringControlGGIO =
  openfmb.resourcemodule.StringControlGGIOKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.resourcemodule.StringControlGGIOOrBuilder.logicalNodeOrNull: openfmb.commonmodule.LogicalNode?
  get() = if (hasLogicalNode()) getLogicalNode() else null

public val openfmb.resourcemodule.StringControlGGIOOrBuilder.phaseOrNull: openfmb.commonmodule.Optional_PhaseCodeKind?
  get() = if (hasPhase()) getPhase() else null

public val openfmb.resourcemodule.StringControlGGIOOrBuilder.strOutOrNull: openfmb.commonmodule.VSC?
  get() = if (hasStrOut()) getStrOut() else null

