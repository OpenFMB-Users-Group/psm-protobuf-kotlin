// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: interconnectionmodule/interconnectionmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.interconnectionmodule;

@kotlin.jvm.JvmName("-initializeinterconnectionPlannedScheduleProfile")
public inline fun interconnectionPlannedScheduleProfile(block: openfmb.interconnectionmodule.InterconnectionPlannedScheduleProfileKt.Dsl.() -> kotlin.Unit): openfmb.interconnectionmodule.InterconnectionPlannedScheduleProfile =
  openfmb.interconnectionmodule.InterconnectionPlannedScheduleProfileKt.Dsl._create(openfmb.interconnectionmodule.InterconnectionPlannedScheduleProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Planned interconnection schedule profile
 * ```
 *
 * Protobuf type `interconnectionmodule.InterconnectionPlannedScheduleProfile`
 */
public object InterconnectionPlannedScheduleProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.interconnectionmodule.InterconnectionPlannedScheduleProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.interconnectionmodule.InterconnectionPlannedScheduleProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.interconnectionmodule.InterconnectionPlannedScheduleProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var controlMessageInfo: openfmb.commonmodule.ControlMessageInfo
      @JvmName("getControlMessageInfo")
      get() = _builder.getControlMessageInfo()
      @JvmName("setControlMessageInfo")
      set(value) {
        _builder.setControlMessageInfo(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearControlMessageInfo() {
      _builder.clearControlMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.ControlMessageInfo controlMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the controlMessageInfo field is set.
     */
    public fun hasControlMessageInfo(): kotlin.Boolean {
      return _builder.hasControlMessageInfo()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ApplicationSystem requesterCircuitSegmentService = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var requesterCircuitSegmentService: openfmb.commonmodule.ApplicationSystem
      @JvmName("getRequesterCircuitSegmentService")
      get() = _builder.getRequesterCircuitSegmentService()
      @JvmName("setRequesterCircuitSegmentService")
      set(value) {
        _builder.setRequesterCircuitSegmentService(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ApplicationSystem requesterCircuitSegmentService = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearRequesterCircuitSegmentService() {
      _builder.clearRequesterCircuitSegmentService()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ApplicationSystem requesterCircuitSegmentService = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the requesterCircuitSegmentService field is set.
     */
    public fun hasRequesterCircuitSegmentService(): kotlin.Boolean {
      return _builder.hasRequesterCircuitSegmentService()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.interconnectionmodule.InterconnectionSchedule interconnectionSchedule = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var interconnectionSchedule: openfmb.interconnectionmodule.InterconnectionSchedule
      @JvmName("getInterconnectionSchedule")
      get() = _builder.getInterconnectionSchedule()
      @JvmName("setInterconnectionSchedule")
      set(value) {
        _builder.setInterconnectionSchedule(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.interconnectionmodule.InterconnectionSchedule interconnectionSchedule = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearInterconnectionSchedule() {
      _builder.clearInterconnectionSchedule()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.interconnectionmodule.InterconnectionSchedule interconnectionSchedule = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the interconnectionSchedule field is set.
     */
    public fun hasInterconnectionSchedule(): kotlin.Boolean {
      return _builder.hasInterconnectionSchedule()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ConductingEquipment tiePoint = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var tiePoint: openfmb.commonmodule.ConductingEquipment
      @JvmName("getTiePoint")
      get() = _builder.getTiePoint()
      @JvmName("setTiePoint")
      set(value) {
        _builder.setTiePoint(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ConductingEquipment tiePoint = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearTiePoint() {
      _builder.clearTiePoint()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ConductingEquipment tiePoint = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the tiePoint field is set.
     */
    public fun hasTiePoint(): kotlin.Boolean {
      return _builder.hasTiePoint()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ApplicationSystem responderCircuitSegmentService = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var responderCircuitSegmentService: openfmb.commonmodule.ApplicationSystem
      @JvmName("getResponderCircuitSegmentService")
      get() = _builder.getResponderCircuitSegmentService()
      @JvmName("setResponderCircuitSegmentService")
      set(value) {
        _builder.setResponderCircuitSegmentService(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ApplicationSystem responderCircuitSegmentService = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearResponderCircuitSegmentService() {
      _builder.clearResponderCircuitSegmentService()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.commonmodule.ApplicationSystem responderCircuitSegmentService = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the responderCircuitSegmentService field is set.
     */
    public fun hasResponderCircuitSegmentService(): kotlin.Boolean {
      return _builder.hasResponderCircuitSegmentService()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun openfmb.interconnectionmodule.InterconnectionPlannedScheduleProfile.copy(block: openfmb.interconnectionmodule.InterconnectionPlannedScheduleProfileKt.Dsl.() -> kotlin.Unit): openfmb.interconnectionmodule.InterconnectionPlannedScheduleProfile =
  openfmb.interconnectionmodule.InterconnectionPlannedScheduleProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.interconnectionmodule.InterconnectionPlannedScheduleProfileOrBuilder.controlMessageInfoOrNull: openfmb.commonmodule.ControlMessageInfo?
  get() = if (hasControlMessageInfo()) getControlMessageInfo() else null

public val openfmb.interconnectionmodule.InterconnectionPlannedScheduleProfileOrBuilder.requesterCircuitSegmentServiceOrNull: openfmb.commonmodule.ApplicationSystem?
  get() = if (hasRequesterCircuitSegmentService()) getRequesterCircuitSegmentService() else null

public val openfmb.interconnectionmodule.InterconnectionPlannedScheduleProfileOrBuilder.interconnectionScheduleOrNull: openfmb.interconnectionmodule.InterconnectionSchedule?
  get() = if (hasInterconnectionSchedule()) getInterconnectionSchedule() else null

public val openfmb.interconnectionmodule.InterconnectionPlannedScheduleProfileOrBuilder.tiePointOrNull: openfmb.commonmodule.ConductingEquipment?
  get() = if (hasTiePoint()) getTiePoint() else null

public val openfmb.interconnectionmodule.InterconnectionPlannedScheduleProfileOrBuilder.responderCircuitSegmentServiceOrNull: openfmb.commonmodule.ApplicationSystem?
  get() = if (hasResponderCircuitSegmentService()) getResponderCircuitSegmentService() else null

