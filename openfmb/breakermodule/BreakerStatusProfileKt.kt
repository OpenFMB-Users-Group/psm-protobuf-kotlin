// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: breakermodule/breakermodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.breakermodule;

@kotlin.jvm.JvmName("-initializebreakerStatusProfile")
public inline fun breakerStatusProfile(block: openfmb.breakermodule.BreakerStatusProfileKt.Dsl.() -> kotlin.Unit): openfmb.breakermodule.BreakerStatusProfile =
  openfmb.breakermodule.BreakerStatusProfileKt.Dsl._create(openfmb.breakermodule.BreakerStatusProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Breaker status profile
 * ```
 *
 * Protobuf type `breakermodule.BreakerStatusProfile`
 */
public object BreakerStatusProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.breakermodule.BreakerStatusProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.breakermodule.BreakerStatusProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.breakermodule.BreakerStatusProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var statusMessageInfo: openfmb.commonmodule.StatusMessageInfo
      @JvmName("getStatusMessageInfo")
      get() = _builder.getStatusMessageInfo()
      @JvmName("setStatusMessageInfo")
      set(value) {
        _builder.setStatusMessageInfo(value)
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearStatusMessageInfo() {
      _builder.clearStatusMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the statusMessageInfo field is set.
     */
    public fun hasStatusMessageInfo(): kotlin.Boolean {
      return _builder.hasStatusMessageInfo()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.breakermodule.Breaker breaker = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var breaker: openfmb.breakermodule.Breaker
      @JvmName("getBreaker")
      get() = _builder.getBreaker()
      @JvmName("setBreaker")
      set(value) {
        _builder.setBreaker(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.breakermodule.Breaker breaker = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearBreaker() {
      _builder.clearBreaker()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.breakermodule.Breaker breaker = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the breaker field is set.
     */
    public fun hasBreaker(): kotlin.Boolean {
      return _builder.hasBreaker()
    }

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.breakermodule.BreakerStatus breakerStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var breakerStatus: openfmb.breakermodule.BreakerStatus
      @JvmName("getBreakerStatus")
      get() = _builder.getBreakerStatus()
      @JvmName("setBreakerStatus")
      set(value) {
        _builder.setBreakerStatus(value)
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.breakermodule.BreakerStatus breakerStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearBreakerStatus() {
      _builder.clearBreakerStatus()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.breakermodule.BreakerStatus breakerStatus = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the breakerStatus field is set.
     */
    public fun hasBreakerStatus(): kotlin.Boolean {
      return _builder.hasBreakerStatus()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.breakermodule.BreakerStatusProfile.copy(block: openfmb.breakermodule.BreakerStatusProfileKt.Dsl.() -> kotlin.Unit): openfmb.breakermodule.BreakerStatusProfile =
  openfmb.breakermodule.BreakerStatusProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.breakermodule.BreakerStatusProfileOrBuilder.statusMessageInfoOrNull: openfmb.commonmodule.StatusMessageInfo?
  get() = if (hasStatusMessageInfo()) getStatusMessageInfo() else null

public val openfmb.breakermodule.BreakerStatusProfileOrBuilder.breakerOrNull: openfmb.breakermodule.Breaker?
  get() = if (hasBreaker()) getBreaker() else null

public val openfmb.breakermodule.BreakerStatusProfileOrBuilder.breakerStatusOrNull: openfmb.breakermodule.BreakerStatus?
  get() = if (hasBreakerStatus()) getBreakerStatus() else null

