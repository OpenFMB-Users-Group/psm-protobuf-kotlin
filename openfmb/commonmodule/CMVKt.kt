//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializecMV")
public inline fun cMV(block: openfmb.commonmodule.CMVKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.CMV =
  openfmb.commonmodule.CMVKt.Dsl._create(openfmb.commonmodule.CMV.newBuilder()).apply { block() }._build()
public object CMVKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.CMV.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.CMV.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.CMV = _builder.build()

    /**
     * <pre>
     * Complex value based on a deadband calculation from the instantaneous value 'instCVal.mag'. The
     * deadband calculation is done both on 'instCVal.mag' (based on 'db') and on 'instCVal.ang' (based on
     * 'dbAng'), independently. See  'MV.mag'.
     * </pre>
     *
     * <code>.commonmodule.Vector cVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var cVal: openfmb.commonmodule.Vector
      @JvmName("getCVal")
      get() = _builder.getCVal()
      @JvmName("setCVal")
      set(value) {
        _builder.setCVal(value)
      }
    /**
     * <pre>
     * Complex value based on a deadband calculation from the instantaneous value 'instCVal.mag'. The
     * deadband calculation is done both on 'instCVal.mag' (based on 'db') and on 'instCVal.ang' (based on
     * 'dbAng'), independently. See  'MV.mag'.
     * </pre>
     *
     * <code>.commonmodule.Vector cVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearCVal() {
      _builder.clearCVal()
    }
    /**
     * <pre>
     * Complex value based on a deadband calculation from the instantaneous value 'instCVal.mag'. The
     * deadband calculation is done both on 'instCVal.mag' (based on 'db') and on 'instCVal.ang' (based on
     * 'dbAng'), independently. See  'MV.mag'.
     * </pre>
     *
     * <code>.commonmodule.Vector cVal = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @return Whether the cVal field is set.
     */
    public fun hasCVal(): kotlin.Boolean {
      return _builder.hasCVal()
    }

    /**
     * <pre>
     * Quality of the values in 'instCVal', 'cVal', 'range', ‘rangeAng’.
     * </pre>
     *
     * <code>.commonmodule.Quality q = 2;</code>
     */
    public var q: openfmb.commonmodule.Quality
      @JvmName("getQ")
      get() = _builder.getQ()
      @JvmName("setQ")
      set(value) {
        _builder.setQ(value)
      }
    /**
     * <pre>
     * Quality of the values in 'instCVal', 'cVal', 'range', ‘rangeAng’.
     * </pre>
     *
     * <code>.commonmodule.Quality q = 2;</code>
     */
    public fun clearQ() {
      _builder.clearQ()
    }
    /**
     * <pre>
     * Quality of the values in 'instCVal', 'cVal', 'range', ‘rangeAng’.
     * </pre>
     *
     * <code>.commonmodule.Quality q = 2;</code>
     * @return Whether the q field is set.
     */
    public fun hasQ(): kotlin.Boolean {
      return _builder.hasQ()
    }

    /**
     * <pre>
     * Timestamp of the last refresh of the value in 'cVal' or of the last change of the value in any
     * of 'range', 'rangeAng' or 'q'.
     * </pre>
     *
     * <code>.commonmodule.Timestamp t = 3;</code>
     */
    public var t: openfmb.commonmodule.Timestamp
      @JvmName("getT")
      get() = _builder.getT()
      @JvmName("setT")
      set(value) {
        _builder.setT(value)
      }
    /**
     * <pre>
     * Timestamp of the last refresh of the value in 'cVal' or of the last change of the value in any
     * of 'range', 'rangeAng' or 'q'.
     * </pre>
     *
     * <code>.commonmodule.Timestamp t = 3;</code>
     */
    public fun clearT() {
      _builder.clearT()
    }
    /**
     * <pre>
     * Timestamp of the last refresh of the value in 'cVal' or of the last change of the value in any
     * of 'range', 'rangeAng' or 'q'.
     * </pre>
     *
     * <code>.commonmodule.Timestamp t = 3;</code>
     * @return Whether the t field is set.
     */
    public fun hasT(): kotlin.Boolean {
      return _builder.hasT()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.CMV.copy(block: openfmb.commonmodule.CMVKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.CMV =
  openfmb.commonmodule.CMVKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val openfmb.commonmodule.CMVOrBuilder.cValOrNull: openfmb.commonmodule.Vector?
  get() = if (hasCVal()) getCVal() else null

val openfmb.commonmodule.CMVOrBuilder.qOrNull: openfmb.commonmodule.Quality?
  get() = if (hasQ()) getQ() else null

val openfmb.commonmodule.CMVOrBuilder.tOrNull: openfmb.commonmodule.Timestamp?
  get() = if (hasT()) getT() else null

