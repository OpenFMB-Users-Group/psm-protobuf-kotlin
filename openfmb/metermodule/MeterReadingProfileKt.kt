//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: metermodule/metermodule.proto

package openfmb.metermodule;

@kotlin.jvm.JvmName("-initializemeterReadingProfile")
public inline fun meterReadingProfile(block: openfmb.metermodule.MeterReadingProfileKt.Dsl.() -> kotlin.Unit): openfmb.metermodule.MeterReadingProfile =
  openfmb.metermodule.MeterReadingProfileKt.Dsl._create(openfmb.metermodule.MeterReadingProfile.newBuilder()).apply { block() }._build()
public object MeterReadingProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.metermodule.MeterReadingProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.metermodule.MeterReadingProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.metermodule.MeterReadingProfile = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var readingMessageInfo: openfmb.commonmodule.ReadingMessageInfo
      @JvmName("getReadingMessageInfo")
      get() = _builder.getReadingMessageInfo()
      @JvmName("setReadingMessageInfo")
      set(value) {
        _builder.setReadingMessageInfo(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearReadingMessageInfo() {
      _builder.clearReadingMessageInfo()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the readingMessageInfo field is set.
     */
    public fun hasReadingMessageInfo(): kotlin.Boolean {
      return _builder.hasReadingMessageInfo()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.Meter meter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var meter: openfmb.commonmodule.Meter
      @JvmName("getMeter")
      get() = _builder.getMeter()
      @JvmName("setMeter")
      set(value) {
        _builder.setMeter(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.Meter meter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearMeter() {
      _builder.clearMeter()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.Meter meter = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @return Whether the meter field is set.
     */
    public fun hasMeter(): kotlin.Boolean {
      return _builder.hasMeter()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.metermodule.MeterReading meterReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var meterReading: openfmb.metermodule.MeterReading
      @JvmName("getMeterReading")
      get() = _builder.getMeterReading()
      @JvmName("setMeterReading")
      set(value) {
        _builder.setMeterReading(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.metermodule.MeterReading meterReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearMeterReading() {
      _builder.clearMeterReading()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.metermodule.MeterReading meterReading = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @return Whether the meterReading field is set.
     */
    public fun hasMeterReading(): kotlin.Boolean {
      return _builder.hasMeterReading()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.metermodule.MeterReadingProfile.copy(block: openfmb.metermodule.MeterReadingProfileKt.Dsl.() -> kotlin.Unit): openfmb.metermodule.MeterReadingProfile =
  openfmb.metermodule.MeterReadingProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val openfmb.metermodule.MeterReadingProfileOrBuilder.readingMessageInfoOrNull: openfmb.commonmodule.ReadingMessageInfo?
  get() = if (hasReadingMessageInfo()) getReadingMessageInfo() else null

val openfmb.metermodule.MeterReadingProfileOrBuilder.meterOrNull: openfmb.commonmodule.Meter?
  get() = if (hasMeter()) getMeter() else null

val openfmb.metermodule.MeterReadingProfileOrBuilder.meterReadingOrNull: openfmb.metermodule.MeterReading?
  get() = if (hasMeterReading()) getMeterReading() else null

