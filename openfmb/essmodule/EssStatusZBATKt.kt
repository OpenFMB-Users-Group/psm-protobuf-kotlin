//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: essmodule/essmodule.proto

package openfmb.essmodule;

@kotlin.jvm.JvmName("-initializeessStatusZBAT")
public inline fun essStatusZBAT(block: openfmb.essmodule.EssStatusZBATKt.Dsl.() -> kotlin.Unit): openfmb.essmodule.EssStatusZBAT =
  openfmb.essmodule.EssStatusZBATKt.Dsl._create(openfmb.essmodule.EssStatusZBAT.newBuilder()).apply { block() }._build()
public object EssStatusZBATKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.essmodule.EssStatusZBAT.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.essmodule.EssStatusZBAT.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.essmodule.EssStatusZBAT = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var logicalNodeForEventAndStatus: openfmb.commonmodule.LogicalNodeForEventAndStatus
      @JvmName("getLogicalNodeForEventAndStatus")
      get() = _builder.getLogicalNodeForEventAndStatus()
      @JvmName("setLogicalNodeForEventAndStatus")
      set(value) {
        _builder.setLogicalNodeForEventAndStatus(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearLogicalNodeForEventAndStatus() {
      _builder.clearLogicalNodeForEventAndStatus()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the logicalNodeForEventAndStatus field is set.
     */
    public fun hasLogicalNodeForEventAndStatus(): kotlin.Boolean {
      return _builder.hasLogicalNodeForEventAndStatus()
    }

    /**
     * <pre>
     * Battery system status &amp;ndash; True: on
     * </pre>
     *
     * <code>.commonmodule.StatusSPS BatSt = 2;</code>
     */
    public var batSt: openfmb.commonmodule.StatusSPS
      @JvmName("getBatSt")
      get() = _builder.getBatSt()
      @JvmName("setBatSt")
      set(value) {
        _builder.setBatSt(value)
      }
    /**
     * <pre>
     * Battery system status &amp;ndash; True: on
     * </pre>
     *
     * <code>.commonmodule.StatusSPS BatSt = 2;</code>
     */
    public fun clearBatSt() {
      _builder.clearBatSt()
    }
    /**
     * <pre>
     * Battery system status &amp;ndash; True: on
     * </pre>
     *
     * <code>.commonmodule.StatusSPS BatSt = 2;</code>
     * @return Whether the batSt field is set.
     */
    public fun hasBatSt(): kotlin.Boolean {
      return _builder.hasBatSt()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ENG_GridConnectModeKind GriMod = 3;</code>
     */
    public var griMod: openfmb.commonmodule.ENG_GridConnectModeKind
      @JvmName("getGriMod")
      get() = _builder.getGriMod()
      @JvmName("setGriMod")
      set(value) {
        _builder.setGriMod(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ENG_GridConnectModeKind GriMod = 3;</code>
     */
    public fun clearGriMod() {
      _builder.clearGriMod()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ENG_GridConnectModeKind GriMod = 3;</code>
     * @return Whether the griMod field is set.
     */
    public fun hasGriMod(): kotlin.Boolean {
      return _builder.hasGriMod()
    }

    /**
     * <pre>
     * State of charge (in percentage)
     * </pre>
     *
     * <code>.commonmodule.MV Soc = 4;</code>
     */
    public var soc: openfmb.commonmodule.MV
      @JvmName("getSoc")
      get() = _builder.getSoc()
      @JvmName("setSoc")
      set(value) {
        _builder.setSoc(value)
      }
    /**
     * <pre>
     * State of charge (in percentage)
     * </pre>
     *
     * <code>.commonmodule.MV Soc = 4;</code>
     */
    public fun clearSoc() {
      _builder.clearSoc()
    }
    /**
     * <pre>
     * State of charge (in percentage)
     * </pre>
     *
     * <code>.commonmodule.MV Soc = 4;</code>
     * @return Whether the soc field is set.
     */
    public fun hasSoc(): kotlin.Boolean {
      return _builder.hasSoc()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.StatusSPS Stdby = 5;</code>
     */
    public var stdby: openfmb.commonmodule.StatusSPS
      @JvmName("getStdby")
      get() = _builder.getStdby()
      @JvmName("setStdby")
      set(value) {
        _builder.setStdby(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.StatusSPS Stdby = 5;</code>
     */
    public fun clearStdby() {
      _builder.clearStdby()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.StatusSPS Stdby = 5;</code>
     * @return Whether the stdby field is set.
     */
    public fun hasStdby(): kotlin.Boolean {
      return _builder.hasStdby()
    }

    /**
     * <pre>
     * State of health of the DER storage.
     * </pre>
     *
     * <code>.commonmodule.MV SoH = 6;</code>
     */
    public var soH: openfmb.commonmodule.MV
      @JvmName("getSoH")
      get() = _builder.getSoH()
      @JvmName("setSoH")
      set(value) {
        _builder.setSoH(value)
      }
    /**
     * <pre>
     * State of health of the DER storage.
     * </pre>
     *
     * <code>.commonmodule.MV SoH = 6;</code>
     */
    public fun clearSoH() {
      _builder.clearSoH()
    }
    /**
     * <pre>
     * State of health of the DER storage.
     * </pre>
     *
     * <code>.commonmodule.MV SoH = 6;</code>
     * @return Whether the soH field is set.
     */
    public fun hasSoH(): kotlin.Boolean {
      return _builder.hasSoH()
    }

    /**
     * <pre>
     * Energy available of the DER storage (WHAvail = WHRtg * SoC * SoH)
     * </pre>
     *
     * <code>.commonmodule.MV WHAvail = 7;</code>
     */
    public var wHAvail: openfmb.commonmodule.MV
      @JvmName("getWHAvail")
      get() = _builder.getWHAvail()
      @JvmName("setWHAvail")
      set(value) {
        _builder.setWHAvail(value)
      }
    /**
     * <pre>
     * Energy available of the DER storage (WHAvail = WHRtg * SoC * SoH)
     * </pre>
     *
     * <code>.commonmodule.MV WHAvail = 7;</code>
     */
    public fun clearWHAvail() {
      _builder.clearWHAvail()
    }
    /**
     * <pre>
     * Energy available of the DER storage (WHAvail = WHRtg * SoC * SoH)
     * </pre>
     *
     * <code>.commonmodule.MV WHAvail = 7;</code>
     * @return Whether the wHAvail field is set.
     */
    public fun hasWHAvail(): kotlin.Boolean {
      return _builder.hasWHAvail()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.essmodule.EssStatusZBAT.copy(block: openfmb.essmodule.EssStatusZBATKt.Dsl.() -> kotlin.Unit): openfmb.essmodule.EssStatusZBAT =
  openfmb.essmodule.EssStatusZBATKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.essmodule.EssStatusZBATOrBuilder.logicalNodeForEventAndStatusOrNull: openfmb.commonmodule.LogicalNodeForEventAndStatus?
  get() = if (hasLogicalNodeForEventAndStatus()) getLogicalNodeForEventAndStatus() else null

public val openfmb.essmodule.EssStatusZBATOrBuilder.batStOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasBatSt()) getBatSt() else null

public val openfmb.essmodule.EssStatusZBATOrBuilder.griModOrNull: openfmb.commonmodule.ENG_GridConnectModeKind?
  get() = if (hasGriMod()) getGriMod() else null

public val openfmb.essmodule.EssStatusZBATOrBuilder.socOrNull: openfmb.commonmodule.MV?
  get() = if (hasSoc()) getSoc() else null

public val openfmb.essmodule.EssStatusZBATOrBuilder.stdbyOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasStdby()) getStdby() else null

public val openfmb.essmodule.EssStatusZBATOrBuilder.soHOrNull: openfmb.commonmodule.MV?
  get() = if (hasSoH()) getSoH() else null

public val openfmb.essmodule.EssStatusZBATOrBuilder.wHAvailOrNull: openfmb.commonmodule.MV?
  get() = if (hasWHAvail()) getWHAvail() else null

