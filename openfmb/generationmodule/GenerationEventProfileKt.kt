// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: generationmodule/generationmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.generationmodule;

@kotlin.jvm.JvmName("-initializegenerationEventProfile")
public inline fun generationEventProfile(block: openfmb.generationmodule.GenerationEventProfileKt.Dsl.() -> kotlin.Unit): openfmb.generationmodule.GenerationEventProfile =
  openfmb.generationmodule.GenerationEventProfileKt.Dsl._create(openfmb.generationmodule.GenerationEventProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Generation event profile
 * ```
 *
 * Protobuf type `generationmodule.GenerationEventProfile`
 */
public object GenerationEventProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.generationmodule.GenerationEventProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.generationmodule.GenerationEventProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.generationmodule.GenerationEventProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var eventMessageInfo: openfmb.commonmodule.EventMessageInfo
      @kotlin.jvm.JvmName("getEventMessageInfo")
        get() = _builder.eventMessageInfo
      @kotlin.jvm.JvmName("setEventMessageInfo")
        set(value) {
        _builder.eventMessageInfo = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearEventMessageInfo() {
      _builder.clearEventMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the eventMessageInfo field is set.
     */
    public fun hasEventMessageInfo(): kotlin.Boolean {
      return _builder.hasEventMessageInfo()
    }

    public val GenerationEventProfileKt.Dsl.eventMessageInfoOrNull: openfmb.commonmodule.EventMessageInfo?
      get() = _builder.eventMessageInfoOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.generationmodule.GeneratingUnit generatingUnit = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var generatingUnit: openfmb.generationmodule.GeneratingUnit
      @kotlin.jvm.JvmName("getGeneratingUnit")
        get() = _builder.generatingUnit
      @kotlin.jvm.JvmName("setGeneratingUnit")
        set(value) {
        _builder.generatingUnit = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.generationmodule.GeneratingUnit generatingUnit = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearGeneratingUnit() {
      _builder.clearGeneratingUnit()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.generationmodule.GeneratingUnit generatingUnit = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the generatingUnit field is set.
     */
    public fun hasGeneratingUnit(): kotlin.Boolean {
      return _builder.hasGeneratingUnit()
    }

    public val GenerationEventProfileKt.Dsl.generatingUnitOrNull: openfmb.generationmodule.GeneratingUnit?
      get() = _builder.generatingUnitOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.generationmodule.GenerationEvent generationEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var generationEvent: openfmb.generationmodule.GenerationEvent
      @kotlin.jvm.JvmName("getGenerationEvent")
        get() = _builder.generationEvent
      @kotlin.jvm.JvmName("setGenerationEvent")
        set(value) {
        _builder.generationEvent = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.generationmodule.GenerationEvent generationEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearGenerationEvent() {
      _builder.clearGenerationEvent()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.generationmodule.GenerationEvent generationEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the generationEvent field is set.
     */
    public fun hasGenerationEvent(): kotlin.Boolean {
      return _builder.hasGenerationEvent()
    }

    public val GenerationEventProfileKt.Dsl.generationEventOrNull: openfmb.generationmodule.GenerationEvent?
      get() = _builder.generationEventOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.generationmodule.GenerationEventProfile.copy(block: `openfmb.generationmodule`.GenerationEventProfileKt.Dsl.() -> kotlin.Unit): openfmb.generationmodule.GenerationEventProfile =
  `openfmb.generationmodule`.GenerationEventProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.generationmodule.GenerationEventProfileOrBuilder.eventMessageInfoOrNull: openfmb.commonmodule.EventMessageInfo?
  get() = if (hasEventMessageInfo()) getEventMessageInfo() else null

public val openfmb.generationmodule.GenerationEventProfileOrBuilder.generatingUnitOrNull: openfmb.generationmodule.GeneratingUnit?
  get() = if (hasGeneratingUnit()) getGeneratingUnit() else null

public val openfmb.generationmodule.GenerationEventProfileOrBuilder.generationEventOrNull: openfmb.generationmodule.GenerationEvent?
  get() = if (hasGenerationEvent()) getGenerationEvent() else null

