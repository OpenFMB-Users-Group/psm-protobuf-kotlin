// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializequality")
public inline fun quality(block: openfmb.commonmodule.QualityKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.Quality =
  openfmb.commonmodule.QualityKt.Dsl._create(openfmb.commonmodule.Quality.newBuilder()).apply { block() }._build()
/**
 * ```
 * Quality contains data that describe the quality of the data from the server. Quality of the data
 * is also related to the mode of a logical node. Further details can be found in IEC 61850-7-4. The
 * different quality attributes are <i>not</i> independent.The default value shall be applied if the
 * functionality of the related attribute is not supported. The mapping may specify to exclude the
 * attribute from the message if it is not supported or if the default value applies.
 * ```
 *
 * Protobuf type `commonmodule.Quality`
 */
public object QualityKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.Quality.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.Quality.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.Quality = _builder.build()

    /**
     * ```
     * Describes some reasons in case 'validity' is not 'good'.
     * ```
     *
     * `.commonmodule.DetailQual detailQual = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var detailQual: openfmb.commonmodule.DetailQual
      @JvmName("getDetailQual")
      get() = _builder.getDetailQual()
      @JvmName("setDetailQual")
      set(value) {
        _builder.setDetailQual(value)
      }
    /**
     * ```
     * Describes some reasons in case 'validity' is not 'good'.
     * ```
     *
     * `.commonmodule.DetailQual detailQual = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearDetailQual() {
      _builder.clearDetailQual()
    }
    /**
     * ```
     * Describes some reasons in case 'validity' is not 'good'.
     * ```
     *
     * `.commonmodule.DetailQual detailQual = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the detailQual field is set.
     */
    public fun hasDetailQual(): kotlin.Boolean {
      return _builder.hasDetailQual()
    }

    /**
     * ```
     * (default=false) If true, further update of the value has been blocked by an operator. The value
     * shall be the information that was acquired before blocking. If this flag is set, then the
     * 'detailQual.oldData' shall also be set. The operator shall use the data attribute 'CDC.blkEna' to
     * block the update of the value. NOTE Both an operator as well as an automatic function may freeze
     * communication updating as well as input updating. In both cases, 'detailQual.oldData' will be set.
     * If the blocking is done by an operator, then this flag is set additionally, and an operator activity
     * is required to clear the condition.
     * ```
     *
     * `bool operatorBlocked = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var operatorBlocked: kotlin.Boolean
      @JvmName("getOperatorBlocked")
      get() = _builder.getOperatorBlocked()
      @JvmName("setOperatorBlocked")
      set(value) {
        _builder.setOperatorBlocked(value)
      }
    /**
     * ```
     * (default=false) If true, further update of the value has been blocked by an operator. The value
     * shall be the information that was acquired before blocking. If this flag is set, then the
     * 'detailQual.oldData' shall also be set. The operator shall use the data attribute 'CDC.blkEna' to
     * block the update of the value. NOTE Both an operator as well as an automatic function may freeze
     * communication updating as well as input updating. In both cases, 'detailQual.oldData' will be set.
     * If the blocking is done by an operator, then this flag is set additionally, and an operator activity
     * is required to clear the condition.
     * ```
     *
     * `bool operatorBlocked = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearOperatorBlocked() {
      _builder.clearOperatorBlocked()
    }

    /**
     * ```
     * (default=process) Defines the source of a value. NOTE 1 Substitution may be done locally or via
     * the communication services. In the second case, specific attributes with a FC=SV are used. NOTE 2
     * There are various means to clear a substitution. As an example, a substitution that was done
     * following an invalid condition may be cleared automatically if the invalid condition is cleared.
     * However, this is a local issue and therefore not within the scope of this standard.
     * ```
     *
     * `.commonmodule.SourceKind source = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var source: openfmb.commonmodule.SourceKind
      @JvmName("getSource")
      get() = _builder.getSource()
      @JvmName("setSource")
      set(value) {
        _builder.setSource(value)
      }
    public var sourceValue: kotlin.Int
      @JvmName("getSourceValue")
      get() = _builder.getSourceValue()
      @JvmName("setSourceValue")
      set(value) {
        _builder.setSourceValue(value)
      }
    /**
     * ```
     * (default=process) Defines the source of a value. NOTE 1 Substitution may be done locally or via
     * the communication services. In the second case, specific attributes with a FC=SV are used. NOTE 2
     * There are various means to clear a substitution. As an example, a substitution that was done
     * following an invalid condition may be cleared automatically if the invalid condition is cleared.
     * However, this is a local issue and therefore not within the scope of this standard.
     * ```
     *
     * `.commonmodule.SourceKind source = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearSource() {
      _builder.clearSource()
    }

    /**
     * ```
     * (default=false) If true, the value is a test value. The processing of the test quality in the
     * client shall be as described in IEC 61850-7-4. This bit shall be completely independent from the
     * other bits within the quality descriptor.
     * ```
     *
     * `bool test = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var test: kotlin.Boolean
      @JvmName("getTest")
      get() = _builder.getTest()
      @JvmName("setTest")
      set(value) {
        _builder.setTest(value)
      }
    /**
     * ```
     * (default=false) If true, the value is a test value. The processing of the test quality in the
     * client shall be as described in IEC 61850-7-4. This bit shall be completely independent from the
     * other bits within the quality descriptor.
     * ```
     *
     * `bool test = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearTest() {
      _builder.clearTest()
    }

    /**
     * ```
     * Validity of the value, as condensed information for the client. In case this value is not
     * 'good', some reasons may be found in the 'detailQual'.
     * ```
     *
     * `.commonmodule.ValidityKind validity = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var validity: openfmb.commonmodule.ValidityKind
      @JvmName("getValidity")
      get() = _builder.getValidity()
      @JvmName("setValidity")
      set(value) {
        _builder.setValidity(value)
      }
    public var validityValue: kotlin.Int
      @JvmName("getValidityValue")
      get() = _builder.getValidityValue()
      @JvmName("setValidityValue")
      set(value) {
        _builder.setValidityValue(value)
      }
    /**
     * ```
     * Validity of the value, as condensed information for the client. In case this value is not
     * 'good', some reasons may be found in the 'detailQual'.
     * ```
     *
     * `.commonmodule.ValidityKind validity = 5 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearValidity() {
      _builder.clearValidity()
    }
  }
}
@kotlin.jvm.JvmSynthetic
@com.google.errorprone.annotations.CheckReturnValue
public inline fun openfmb.commonmodule.Quality.copy(block: openfmb.commonmodule.QualityKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.Quality =
  openfmb.commonmodule.QualityKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.QualityOrBuilder.detailQualOrNull: openfmb.commonmodule.DetailQual?
  get() = if (hasDetailQual()) getDetailQual() else null

