// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: evsemodule/evsemodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.evsemodule;

@kotlin.jvm.JvmName("-initializeeventAndStatusDEAO")
public inline fun eventAndStatusDEAO(block: openfmb.evsemodule.EventAndStatusDEAOKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.EventAndStatusDEAO =
  openfmb.evsemodule.EventAndStatusDEAOKt.Dsl._create(openfmb.evsemodule.EventAndStatusDEAO.newBuilder()).apply { block() }._build()
/**
 * ```
 * Specialized 61850 DEAO class
 * ```
 *
 * Protobuf type `evsemodule.EventAndStatusDEAO`
 */
public object EventAndStatusDEAOKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.evsemodule.EventAndStatusDEAO.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.evsemodule.EventAndStatusDEAO.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.evsemodule.EventAndStatusDEAO = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];`
     */
    public var logicalNodeForEventAndStatus: openfmb.commonmodule.LogicalNodeForEventAndStatus
      @kotlin.jvm.JvmName("getLogicalNodeForEventAndStatus")
        get() = _builder.logicalNodeForEventAndStatus
      @kotlin.jvm.JvmName("setLogicalNodeForEventAndStatus")
        set(value) {
        _builder.logicalNodeForEventAndStatus = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearLogicalNodeForEventAndStatus() {
      _builder.clearLogicalNodeForEventAndStatus()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the logicalNodeForEventAndStatus field is set.
     */
    public fun hasLogicalNodeForEventAndStatus(): kotlin.Boolean {
      return _builder.hasLogicalNodeForEventAndStatus()
    }

    public val EventAndStatusDEAOKt.Dsl.logicalNodeForEventAndStatusOrNull: openfmb.commonmodule.LogicalNodeForEventAndStatus?
      get() = _builder.logicalNodeForEventAndStatusOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EventAndStatusDEEV eventAndStatusDEEV = 2;`
     */
    public var eventAndStatusDEEV: openfmb.evsemodule.EventAndStatusDEEV
      @kotlin.jvm.JvmName("getEventAndStatusDEEV")
        get() = _builder.eventAndStatusDEEV
      @kotlin.jvm.JvmName("setEventAndStatusDEEV")
        set(value) {
        _builder.eventAndStatusDEEV = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EventAndStatusDEEV eventAndStatusDEEV = 2;`
     */
    public fun clearEventAndStatusDEEV() {
      _builder.clearEventAndStatusDEEV()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.evsemodule.EventAndStatusDEEV eventAndStatusDEEV = 2;`
     * @return Whether the eventAndStatusDEEV field is set.
     */
    public fun hasEventAndStatusDEEV(): kotlin.Boolean {
      return _builder.hasEventAndStatusDEEV()
    }

    public val EventAndStatusDEAOKt.Dsl.eventAndStatusDEEVOrNull: openfmb.evsemodule.EventAndStatusDEEV?
      get() = _builder.eventAndStatusDEEVOrNull

    /**
     * ```
     * Enable digital communication with the EV
     * ```
     *
     * `.commonmodule.StatusSPS DigComm = 3;`
     */
    public var digComm: openfmb.commonmodule.StatusSPS
      @kotlin.jvm.JvmName("getDigComm")
        get() = _builder.digComm
      @kotlin.jvm.JvmName("setDigComm")
        set(value) {
        _builder.digComm = value
      }
    /**
     * ```
     * Enable digital communication with the EV
     * ```
     *
     * `.commonmodule.StatusSPS DigComm = 3;`
     */
    public fun clearDigComm() {
      _builder.clearDigComm()
    }
    /**
     * ```
     * Enable digital communication with the EV
     * ```
     *
     * `.commonmodule.StatusSPS DigComm = 3;`
     * @return Whether the digComm field is set.
     */
    public fun hasDigComm(): kotlin.Boolean {
      return _builder.hasDigComm()
    }

    public val EventAndStatusDEAOKt.Dsl.digCommOrNull: openfmb.commonmodule.StatusSPS?
      get() = _builder.digCommOrNull

    /**
     * ```
     * Connection state (notation from IEC 61851-1)
     * ```
     *
     * `.evsemodule.ENS_EVACConnectionStateKind ConnSt = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var connSt: openfmb.evsemodule.ENS_EVACConnectionStateKind
      @kotlin.jvm.JvmName("getConnSt")
        get() = _builder.connSt
      @kotlin.jvm.JvmName("setConnSt")
        set(value) {
        _builder.connSt = value
      }
    /**
     * ```
     * Connection state (notation from IEC 61851-1)
     * ```
     *
     * `.evsemodule.ENS_EVACConnectionStateKind ConnSt = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearConnSt() {
      _builder.clearConnSt()
    }
    /**
     * ```
     * Connection state (notation from IEC 61851-1)
     * ```
     *
     * `.evsemodule.ENS_EVACConnectionStateKind ConnSt = 4 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the connSt field is set.
     */
    public fun hasConnSt(): kotlin.Boolean {
      return _builder.hasConnSt()
    }

    public val EventAndStatusDEAOKt.Dsl.connStOrNull: openfmb.evsemodule.ENS_EVACConnectionStateKind?
      get() = _builder.connStOrNull

    /**
     * ```
     * Plug present and coupler lock state (according to 61851-1)
     * ```
     *
     * `.evsemodule.ENS_EVACPlugStateKind PlgStAC = 5;`
     */
    public var plgStAC: openfmb.evsemodule.ENS_EVACPlugStateKind
      @kotlin.jvm.JvmName("getPlgStAC")
        get() = _builder.plgStAC
      @kotlin.jvm.JvmName("setPlgStAC")
        set(value) {
        _builder.plgStAC = value
      }
    /**
     * ```
     * Plug present and coupler lock state (according to 61851-1)
     * ```
     *
     * `.evsemodule.ENS_EVACPlugStateKind PlgStAC = 5;`
     */
    public fun clearPlgStAC() {
      _builder.clearPlgStAC()
    }
    /**
     * ```
     * Plug present and coupler lock state (according to 61851-1)
     * ```
     *
     * `.evsemodule.ENS_EVACPlugStateKind PlgStAC = 5;`
     * @return Whether the plgStAC field is set.
     */
    public fun hasPlgStAC(): kotlin.Boolean {
      return _builder.hasPlgStAC()
    }

    public val EventAndStatusDEAOKt.Dsl.plgStACOrNull: openfmb.evsemodule.ENS_EVACPlugStateKind?
      get() = _builder.plgStACOrNull

    /**
     * ```
     * Capability of the EV cable assembly (according to 61851-1)
     * ```
     *
     * `.evsemodule.ENS_EVACCableCapabilityKind CabRtgAC = 6;`
     */
    public var cabRtgAC: openfmb.evsemodule.ENS_EVACCableCapabilityKind
      @kotlin.jvm.JvmName("getCabRtgAC")
        get() = _builder.cabRtgAC
      @kotlin.jvm.JvmName("setCabRtgAC")
        set(value) {
        _builder.cabRtgAC = value
      }
    /**
     * ```
     * Capability of the EV cable assembly (according to 61851-1)
     * ```
     *
     * `.evsemodule.ENS_EVACCableCapabilityKind CabRtgAC = 6;`
     */
    public fun clearCabRtgAC() {
      _builder.clearCabRtgAC()
    }
    /**
     * ```
     * Capability of the EV cable assembly (according to 61851-1)
     * ```
     *
     * `.evsemodule.ENS_EVACCableCapabilityKind CabRtgAC = 6;`
     * @return Whether the cabRtgAC field is set.
     */
    public fun hasCabRtgAC(): kotlin.Boolean {
      return _builder.hasCabRtgAC()
    }

    public val EventAndStatusDEAOKt.Dsl.cabRtgACOrNull: openfmb.evsemodule.ENS_EVACCableCapabilityKind?
      get() = _builder.cabRtgACOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.evsemodule.EventAndStatusDEAO.copy(block: `openfmb.evsemodule`.EventAndStatusDEAOKt.Dsl.() -> kotlin.Unit): openfmb.evsemodule.EventAndStatusDEAO =
  `openfmb.evsemodule`.EventAndStatusDEAOKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.evsemodule.EventAndStatusDEAOOrBuilder.logicalNodeForEventAndStatusOrNull: openfmb.commonmodule.LogicalNodeForEventAndStatus?
  get() = if (hasLogicalNodeForEventAndStatus()) getLogicalNodeForEventAndStatus() else null

public val openfmb.evsemodule.EventAndStatusDEAOOrBuilder.eventAndStatusDEEVOrNull: openfmb.evsemodule.EventAndStatusDEEV?
  get() = if (hasEventAndStatusDEEV()) getEventAndStatusDEEV() else null

public val openfmb.evsemodule.EventAndStatusDEAOOrBuilder.digCommOrNull: openfmb.commonmodule.StatusSPS?
  get() = if (hasDigComm()) getDigComm() else null

public val openfmb.evsemodule.EventAndStatusDEAOOrBuilder.connStOrNull: openfmb.evsemodule.ENS_EVACConnectionStateKind?
  get() = if (hasConnSt()) getConnSt() else null

public val openfmb.evsemodule.EventAndStatusDEAOOrBuilder.plgStACOrNull: openfmb.evsemodule.ENS_EVACPlugStateKind?
  get() = if (hasPlgStAC()) getPlgStAC() else null

public val openfmb.evsemodule.EventAndStatusDEAOOrBuilder.cabRtgACOrNull: openfmb.evsemodule.ENS_EVACCableCapabilityKind?
  get() = if (hasCabRtgAC()) getCabRtgAC() else null

