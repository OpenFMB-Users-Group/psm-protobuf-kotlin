// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: regulatormodule/regulatormodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.regulatormodule;

@kotlin.jvm.JvmName("-initializeregulatorStatusProfile")
public inline fun regulatorStatusProfile(block: openfmb.regulatormodule.RegulatorStatusProfileKt.Dsl.() -> kotlin.Unit): openfmb.regulatormodule.RegulatorStatusProfile =
  openfmb.regulatormodule.RegulatorStatusProfileKt.Dsl._create(openfmb.regulatormodule.RegulatorStatusProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Regulator status profile
 * ```
 *
 * Protobuf type `regulatormodule.RegulatorStatusProfile`
 */
public object RegulatorStatusProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.regulatormodule.RegulatorStatusProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.regulatormodule.RegulatorStatusProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.regulatormodule.RegulatorStatusProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var statusMessageInfo: openfmb.commonmodule.StatusMessageInfo
      @kotlin.jvm.JvmName("getStatusMessageInfo")
        get() = _builder.statusMessageInfo
      @kotlin.jvm.JvmName("setStatusMessageInfo")
        set(value) {
        _builder.statusMessageInfo = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearStatusMessageInfo() {
      _builder.clearStatusMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.StatusMessageInfo statusMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the statusMessageInfo field is set.
     */
    public fun hasStatusMessageInfo(): kotlin.Boolean {
      return _builder.hasStatusMessageInfo()
    }

    public val RegulatorStatusProfileKt.Dsl.statusMessageInfoOrNull: openfmb.commonmodule.StatusMessageInfo?
      get() = _builder.statusMessageInfoOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.regulatormodule.RegulatorStatus regulatorStatus = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var regulatorStatus: openfmb.regulatormodule.RegulatorStatus
      @kotlin.jvm.JvmName("getRegulatorStatus")
        get() = _builder.regulatorStatus
      @kotlin.jvm.JvmName("setRegulatorStatus")
        set(value) {
        _builder.regulatorStatus = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.regulatormodule.RegulatorStatus regulatorStatus = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearRegulatorStatus() {
      _builder.clearRegulatorStatus()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.regulatormodule.RegulatorStatus regulatorStatus = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the regulatorStatus field is set.
     */
    public fun hasRegulatorStatus(): kotlin.Boolean {
      return _builder.hasRegulatorStatus()
    }

    public val RegulatorStatusProfileKt.Dsl.regulatorStatusOrNull: openfmb.regulatormodule.RegulatorStatus?
      get() = _builder.regulatorStatusOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var regulatorSystem: openfmb.regulatormodule.RegulatorSystem
      @kotlin.jvm.JvmName("getRegulatorSystem")
        get() = _builder.regulatorSystem
      @kotlin.jvm.JvmName("setRegulatorSystem")
        set(value) {
        _builder.regulatorSystem = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearRegulatorSystem() {
      _builder.clearRegulatorSystem()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the regulatorSystem field is set.
     */
    public fun hasRegulatorSystem(): kotlin.Boolean {
      return _builder.hasRegulatorSystem()
    }

    public val RegulatorStatusProfileKt.Dsl.regulatorSystemOrNull: openfmb.regulatormodule.RegulatorSystem?
      get() = _builder.regulatorSystemOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.regulatormodule.RegulatorStatusProfile.copy(block: `openfmb.regulatormodule`.RegulatorStatusProfileKt.Dsl.() -> kotlin.Unit): openfmb.regulatormodule.RegulatorStatusProfile =
  `openfmb.regulatormodule`.RegulatorStatusProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.regulatormodule.RegulatorStatusProfileOrBuilder.statusMessageInfoOrNull: openfmb.commonmodule.StatusMessageInfo?
  get() = if (hasStatusMessageInfo()) getStatusMessageInfo() else null

public val openfmb.regulatormodule.RegulatorStatusProfileOrBuilder.regulatorStatusOrNull: openfmb.regulatormodule.RegulatorStatus?
  get() = if (hasRegulatorStatus()) getRegulatorStatus() else null

public val openfmb.regulatormodule.RegulatorStatusProfileOrBuilder.regulatorSystemOrNull: openfmb.regulatormodule.RegulatorSystem?
  get() = if (hasRegulatorSystem()) getRegulatorSystem() else null

