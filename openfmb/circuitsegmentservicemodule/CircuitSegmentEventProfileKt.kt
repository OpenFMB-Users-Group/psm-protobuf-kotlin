//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: circuitsegmentservicemodule/circuitsegmentservicemodule.proto

package openfmb.circuitsegmentservicemodule;

@kotlin.jvm.JvmName("-initializecircuitSegmentEventProfile")
public inline fun circuitSegmentEventProfile(block: openfmb.circuitsegmentservicemodule.CircuitSegmentEventProfileKt.Dsl.() -> kotlin.Unit): openfmb.circuitsegmentservicemodule.CircuitSegmentEventProfile =
  openfmb.circuitsegmentservicemodule.CircuitSegmentEventProfileKt.Dsl._create(openfmb.circuitsegmentservicemodule.CircuitSegmentEventProfile.newBuilder()).apply { block() }._build()
public object CircuitSegmentEventProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.circuitsegmentservicemodule.CircuitSegmentEventProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.circuitsegmentservicemodule.CircuitSegmentEventProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.circuitsegmentservicemodule.CircuitSegmentEventProfile = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var eventMessageInfo: openfmb.commonmodule.EventMessageInfo
      @JvmName("getEventMessageInfo")
      get() = _builder.getEventMessageInfo()
      @JvmName("setEventMessageInfo")
      set(value) {
        _builder.setEventMessageInfo(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearEventMessageInfo() {
      _builder.clearEventMessageInfo()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the eventMessageInfo field is set.
     */
    public fun hasEventMessageInfo(): kotlin.Boolean {
      return _builder.hasEventMessageInfo()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ApplicationSystem applicationSystem = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var applicationSystem: openfmb.commonmodule.ApplicationSystem
      @JvmName("getApplicationSystem")
      get() = _builder.getApplicationSystem()
      @JvmName("setApplicationSystem")
      set(value) {
        _builder.setApplicationSystem(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ApplicationSystem applicationSystem = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearApplicationSystem() {
      _builder.clearApplicationSystem()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.commonmodule.ApplicationSystem applicationSystem = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @return Whether the applicationSystem field is set.
     */
    public fun hasApplicationSystem(): kotlin.Boolean {
      return _builder.hasApplicationSystem()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.circuitsegmentservicemodule.CircuitSegmentEvent circuitSegmentEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public var circuitSegmentEvent: openfmb.circuitsegmentservicemodule.CircuitSegmentEvent
      @JvmName("getCircuitSegmentEvent")
      get() = _builder.getCircuitSegmentEvent()
      @JvmName("setCircuitSegmentEvent")
      set(value) {
        _builder.setCircuitSegmentEvent(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.circuitsegmentservicemodule.CircuitSegmentEvent circuitSegmentEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     */
    public fun clearCircuitSegmentEvent() {
      _builder.clearCircuitSegmentEvent()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.circuitsegmentservicemodule.CircuitSegmentEvent circuitSegmentEvent = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];</code>
     * @return Whether the circuitSegmentEvent field is set.
     */
    public fun hasCircuitSegmentEvent(): kotlin.Boolean {
      return _builder.hasCircuitSegmentEvent()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.circuitsegmentservicemodule.CircuitSegmentEventProfile.copy(block: openfmb.circuitsegmentservicemodule.CircuitSegmentEventProfileKt.Dsl.() -> kotlin.Unit): openfmb.circuitsegmentservicemodule.CircuitSegmentEventProfile =
  openfmb.circuitsegmentservicemodule.CircuitSegmentEventProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val openfmb.circuitsegmentservicemodule.CircuitSegmentEventProfileOrBuilder.eventMessageInfoOrNull: openfmb.commonmodule.EventMessageInfo?
  get() = if (hasEventMessageInfo()) getEventMessageInfo() else null

val openfmb.circuitsegmentservicemodule.CircuitSegmentEventProfileOrBuilder.applicationSystemOrNull: openfmb.commonmodule.ApplicationSystem?
  get() = if (hasApplicationSystem()) getApplicationSystem() else null

val openfmb.circuitsegmentservicemodule.CircuitSegmentEventProfileOrBuilder.circuitSegmentEventOrNull: openfmb.circuitsegmentservicemodule.CircuitSegmentEvent?
  get() = if (hasCircuitSegmentEvent()) getCircuitSegmentEvent() else null

