// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: commonmodule/commonmodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.commonmodule;

@kotlin.jvm.JvmName("-initializemV")
public inline fun mV(block: openfmb.commonmodule.MVKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.MV =
  openfmb.commonmodule.MVKt.Dsl._create(openfmb.commonmodule.MV.newBuilder()).apply { block() }._build()
/**
 * ```
 * Measured value (MV)
 * ```
 *
 * Protobuf type `commonmodule.MV`
 */
public object MVKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.commonmodule.MV.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.commonmodule.MV.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.commonmodule.MV = _builder.build()

    /**
     * ```
     * Value of the magnitude based on a deadband calculation from the instantaneous value 'instMag'.
     * The value of 'mag' shall be updated to the current instantaneous value 'instMag' when the value has
     * changed according to the configuration parameter 'db'. If 'db'=0, 'mag'='instMag'.NOTE 1 This value
     * is typically used to create reports for analogue values. Such a report sent "by exception" is not
     * comparable to the transfer of sampled measured values as supported by the CDC SAV.NOTE 2 This 'mag'
     * is not the same as 'mag' of the constructed attribute class 'Vector'.
     * ```
     *
     * `double mag = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var mag: kotlin.Double
      @JvmName("getMag")
      get() = _builder.getMag()
      @JvmName("setMag")
      set(value) {
        _builder.setMag(value)
      }
    /**
     * ```
     * Value of the magnitude based on a deadband calculation from the instantaneous value 'instMag'.
     * The value of 'mag' shall be updated to the current instantaneous value 'instMag' when the value has
     * changed according to the configuration parameter 'db'. If 'db'=0, 'mag'='instMag'.NOTE 1 This value
     * is typically used to create reports for analogue values. Such a report sent "by exception" is not
     * comparable to the transfer of sampled measured values as supported by the CDC SAV.NOTE 2 This 'mag'
     * is not the same as 'mag' of the constructed attribute class 'Vector'.
     * ```
     *
     * `double mag = 1 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearMag() {
      _builder.clearMag()
    }

    /**
     * ```
     * Quality of the values in 'instMag', 'mag', 'range'.
     * ```
     *
     * `.commonmodule.Quality q = 2;`
     */
    public var q: openfmb.commonmodule.Quality
      @JvmName("getQ")
      get() = _builder.getQ()
      @JvmName("setQ")
      set(value) {
        _builder.setQ(value)
      }
    /**
     * ```
     * Quality of the values in 'instMag', 'mag', 'range'.
     * ```
     *
     * `.commonmodule.Quality q = 2;`
     */
    public fun clearQ() {
      _builder.clearQ()
    }
    /**
     * ```
     * Quality of the values in 'instMag', 'mag', 'range'.
     * ```
     *
     * `.commonmodule.Quality q = 2;`
     * @return Whether the q field is set.
     */
    public fun hasQ(): kotlin.Boolean {
      return _builder.hasQ()
    }

    /**
     * ```
     * Timestamp of the last refresh of the value in 'mag' or of the last change of the value in any of
     * 'range' or 'q'.
     * ```
     *
     * `.commonmodule.Timestamp t = 3;`
     */
    public var t: openfmb.commonmodule.Timestamp
      @JvmName("getT")
      get() = _builder.getT()
      @JvmName("setT")
      set(value) {
        _builder.setT(value)
      }
    /**
     * ```
     * Timestamp of the last refresh of the value in 'mag' or of the last change of the value in any of
     * 'range' or 'q'.
     * ```
     *
     * `.commonmodule.Timestamp t = 3;`
     */
    public fun clearT() {
      _builder.clearT()
    }
    /**
     * ```
     * Timestamp of the last refresh of the value in 'mag' or of the last change of the value in any of
     * 'range' or 'q'.
     * ```
     *
     * `.commonmodule.Timestamp t = 3;`
     * @return Whether the t field is set.
     */
    public fun hasT(): kotlin.Boolean {
      return _builder.hasT()
    }

    /**
     * ```
     * Unit for: 'instMag', 'mag', 'subMag', 'rangeC'.
     * ```
     *
     * `.commonmodule.Unit units = 4;`
     */
    public var units: openfmb.commonmodule.Unit
      @JvmName("getUnits")
      get() = _builder.getUnits()
      @JvmName("setUnits")
      set(value) {
        _builder.setUnits(value)
      }
    /**
     * ```
     * Unit for: 'instMag', 'mag', 'subMag', 'rangeC'.
     * ```
     *
     * `.commonmodule.Unit units = 4;`
     */
    public fun clearUnits() {
      _builder.clearUnits()
    }
    /**
     * ```
     * Unit for: 'instMag', 'mag', 'subMag', 'rangeC'.
     * ```
     *
     * `.commonmodule.Unit units = 4;`
     * @return Whether the units field is set.
     */
    public fun hasUnits(): kotlin.Boolean {
      return _builder.hasUnits()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.commonmodule.MV.copy(block: openfmb.commonmodule.MVKt.Dsl.() -> kotlin.Unit): openfmb.commonmodule.MV =
  openfmb.commonmodule.MVKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.commonmodule.MVOrBuilder.qOrNull: openfmb.commonmodule.Quality?
  get() = if (hasQ()) getQ() else null

public val openfmb.commonmodule.MVOrBuilder.tOrNull: openfmb.commonmodule.Timestamp?
  get() = if (hasT()) getT() else null

public val openfmb.commonmodule.MVOrBuilder.unitsOrNull: openfmb.commonmodule.Unit?
  get() = if (hasUnits()) getUnits() else null

