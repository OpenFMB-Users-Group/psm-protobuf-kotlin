// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: regulatormodule/regulatormodule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package openfmb.regulatormodule;

@kotlin.jvm.JvmName("-initializeregulatorEventProfile")
public inline fun regulatorEventProfile(block: openfmb.regulatormodule.RegulatorEventProfileKt.Dsl.() -> kotlin.Unit): openfmb.regulatormodule.RegulatorEventProfile =
  openfmb.regulatormodule.RegulatorEventProfileKt.Dsl._create(openfmb.regulatormodule.RegulatorEventProfile.newBuilder()).apply { block() }._build()
/**
 * ```
 * Regulator event profile
 * ```
 *
 * Protobuf type `regulatormodule.RegulatorEventProfile`
 */
public object RegulatorEventProfileKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.regulatormodule.RegulatorEventProfile.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: openfmb.regulatormodule.RegulatorEventProfile.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): openfmb.regulatormodule.RegulatorEventProfile = _builder.build()

    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public var eventMessageInfo: openfmb.commonmodule.EventMessageInfo
      @kotlin.jvm.JvmName("getEventMessageInfo")
        get() = _builder.eventMessageInfo
      @kotlin.jvm.JvmName("setEventMessageInfo")
        set(value) {
        _builder.eventMessageInfo = value
      }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];`
     */
    public fun clearEventMessageInfo() {
      _builder.clearEventMessageInfo()
    }
    /**
     * ```
     * UML inherited base object
     * ```
     *
     * `.commonmodule.EventMessageInfo eventMessageInfo = 1 [(.uml.option_parent_message) = true];`
     * @return Whether the eventMessageInfo field is set.
     */
    public fun hasEventMessageInfo(): kotlin.Boolean {
      return _builder.hasEventMessageInfo()
    }

    public val RegulatorEventProfileKt.Dsl.eventMessageInfoOrNull: openfmb.commonmodule.EventMessageInfo?
      get() = _builder.eventMessageInfoOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.regulatormodule.RegulatorEvent regulatorEvent = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var regulatorEvent: openfmb.regulatormodule.RegulatorEvent
      @kotlin.jvm.JvmName("getRegulatorEvent")
        get() = _builder.regulatorEvent
      @kotlin.jvm.JvmName("setRegulatorEvent")
        set(value) {
        _builder.regulatorEvent = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.regulatormodule.RegulatorEvent regulatorEvent = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearRegulatorEvent() {
      _builder.clearRegulatorEvent()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.regulatormodule.RegulatorEvent regulatorEvent = 2 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the regulatorEvent field is set.
     */
    public fun hasRegulatorEvent(): kotlin.Boolean {
      return _builder.hasRegulatorEvent()
    }

    public val RegulatorEventProfileKt.Dsl.regulatorEventOrNull: openfmb.regulatormodule.RegulatorEvent?
      get() = _builder.regulatorEventOrNull

    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public var regulatorSystem: openfmb.regulatormodule.RegulatorSystem
      @kotlin.jvm.JvmName("getRegulatorSystem")
        get() = _builder.regulatorSystem
      @kotlin.jvm.JvmName("setRegulatorSystem")
        set(value) {
        _builder.regulatorSystem = value
      }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     */
    public fun clearRegulatorSystem() {
      _builder.clearRegulatorSystem()
    }
    /**
     * ```
     * MISSING DOCUMENTATION!!!
     * ```
     *
     * `.regulatormodule.RegulatorSystem regulatorSystem = 3 [(.uml.option_required_field) = true, (.uml.option_multiplicity_min) = 1];`
     * @return Whether the regulatorSystem field is set.
     */
    public fun hasRegulatorSystem(): kotlin.Boolean {
      return _builder.hasRegulatorSystem()
    }

    public val RegulatorEventProfileKt.Dsl.regulatorSystemOrNull: openfmb.regulatormodule.RegulatorSystem?
      get() = _builder.regulatorSystemOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.regulatormodule.RegulatorEventProfile.copy(block: `openfmb.regulatormodule`.RegulatorEventProfileKt.Dsl.() -> kotlin.Unit): openfmb.regulatormodule.RegulatorEventProfile =
  `openfmb.regulatormodule`.RegulatorEventProfileKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val openfmb.regulatormodule.RegulatorEventProfileOrBuilder.eventMessageInfoOrNull: openfmb.commonmodule.EventMessageInfo?
  get() = if (hasEventMessageInfo()) getEventMessageInfo() else null

public val openfmb.regulatormodule.RegulatorEventProfileOrBuilder.regulatorEventOrNull: openfmb.regulatormodule.RegulatorEvent?
  get() = if (hasRegulatorEvent()) getRegulatorEvent() else null

public val openfmb.regulatormodule.RegulatorEventProfileOrBuilder.regulatorSystemOrNull: openfmb.regulatormodule.RegulatorSystem?
  get() = if (hasRegulatorSystem()) getRegulatorSystem() else null

