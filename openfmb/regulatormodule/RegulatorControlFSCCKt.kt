//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: regulatormodule/regulatormodule.proto

package openfmb.regulatormodule;

@kotlin.jvm.JvmName("-initializeregulatorControlFSCC")
public inline fun regulatorControlFSCC(block: openfmb.regulatormodule.RegulatorControlFSCCKt.Dsl.() -> kotlin.Unit): openfmb.regulatormodule.RegulatorControlFSCC =
  openfmb.regulatormodule.RegulatorControlFSCCKt.Dsl._create(openfmb.regulatormodule.RegulatorControlFSCC.newBuilder()).apply { block() }._build()
public object RegulatorControlFSCCKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: openfmb.regulatormodule.RegulatorControlFSCC.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: openfmb.regulatormodule.RegulatorControlFSCC.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): openfmb.regulatormodule.RegulatorControlFSCC = _builder.build()

    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];</code>
     */
    public var controlFSCC: openfmb.commonmodule.ControlFSCC
      @JvmName("getControlFSCC")
      get() = _builder.getControlFSCC()
      @JvmName("setControlFSCC")
      set(value) {
        _builder.setControlFSCC(value)
      }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];</code>
     */
    public fun clearControlFSCC() {
      _builder.clearControlFSCC()
    }
    /**
     * <pre>
     * UML inherited base object
     * </pre>
     *
     * <code>.commonmodule.ControlFSCC controlFSCC = 1 [(.uml.option_parent_message) = true];</code>
     * @return Whether the controlFSCC field is set.
     */
    public fun hasControlFSCC(): kotlin.Boolean {
      return _builder.hasControlFSCC()
    }

    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.regulatormodule.RegulatorControlScheduleFSCH regulatorControlScheduleFSCH = 2;</code>
     */
    public var regulatorControlScheduleFSCH: openfmb.regulatormodule.RegulatorControlScheduleFSCH
      @JvmName("getRegulatorControlScheduleFSCH")
      get() = _builder.getRegulatorControlScheduleFSCH()
      @JvmName("setRegulatorControlScheduleFSCH")
      set(value) {
        _builder.setRegulatorControlScheduleFSCH(value)
      }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.regulatormodule.RegulatorControlScheduleFSCH regulatorControlScheduleFSCH = 2;</code>
     */
    public fun clearRegulatorControlScheduleFSCH() {
      _builder.clearRegulatorControlScheduleFSCH()
    }
    /**
     * <pre>
     * MISSING DOCUMENTATION!!!
     * </pre>
     *
     * <code>.regulatormodule.RegulatorControlScheduleFSCH regulatorControlScheduleFSCH = 2;</code>
     * @return Whether the regulatorControlScheduleFSCH field is set.
     */
    public fun hasRegulatorControlScheduleFSCH(): kotlin.Boolean {
      return _builder.hasRegulatorControlScheduleFSCH()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun openfmb.regulatormodule.RegulatorControlFSCC.copy(block: openfmb.regulatormodule.RegulatorControlFSCCKt.Dsl.() -> kotlin.Unit): openfmb.regulatormodule.RegulatorControlFSCC =
  openfmb.regulatormodule.RegulatorControlFSCCKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val openfmb.regulatormodule.RegulatorControlFSCCOrBuilder.controlFSCCOrNull: openfmb.commonmodule.ControlFSCC?
  get() = if (hasControlFSCC()) getControlFSCC() else null

val openfmb.regulatormodule.RegulatorControlFSCCOrBuilder.regulatorControlScheduleFSCHOrNull: openfmb.regulatormodule.RegulatorControlScheduleFSCH?
  get() = if (hasRegulatorControlScheduleFSCH()) getRegulatorControlScheduleFSCH() else null

